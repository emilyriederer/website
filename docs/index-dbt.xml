<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Emily Riederer</title>
<link>https://emilyriederer.com/#category=dbt</link>
<atom:link href="https://emilyriederer.com/index-dbt.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Sat, 16 Aug 2025 05:00:00 GMT</lastBuildDate>
<item>
  <title>MLOrbs?: MLOps in the database with orbital and dbt</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/orbital-mlops/</link>
  <description><![CDATA[ 





<p>So, you build a great predictive model. <em>Now what</em>?</p>
<p><a href="https://mlops.community/">MLOps</a> is hard. Deploying a model involves different tools, skills, and risks than model development. This dooms some data science projects to die on their creator’s hard drive.</p>
<p>Tools like <code>dbt</code> and <code>SQLMesh</code> entered the scene to solve a similar problem for data analysts. These tools offer an opinionatee frameowrk for organizing multiple related SQL scripts into fully tested, orchestrated, and version conotrolled projects. Data analysts can deliver end-to-end pipelines by applying their existing business context, SQL experience, and database modeling<sup>1</sup> acumen into existing infrastructure, resulting in the rise of “analytics engineering”.</p>
<p>So what is the <code>dbt</code> for data scientists doing MLOps? It turns out, it <em>might</em> just be… <code>dbt</code>! (Enter caveats galore).</p>
<p>Posit’s <a href="https://posit.co/blog/introducing-orbital-for-scikit-learn-pipelines/">recently announced</a> <code>orbital</code> project<sup>2</sup> translates feature enginering and model scoring code training in <code>scikit-learn</code> pipelines (python) and <code>tidymodels</code> workflows into raw SQL code. Similar to <code>dbt</code>, this has the potential to help data scientist’s deploy their own models batch scoring models using existing tools (R, python, SQL) an infrastructure (analytical database) by creating a new table or view in their data warehouse (or pointing <code>duckdb</code> against their data lake!) Coupled with <code>dbt</code>, the combination unlocks baseline “good enough” MLOps practices at no-to-low cost and zero additional infrastructure.</p>
<p>In this post, I explore a workflow for using <code>orbital</code> and <code>dbt</code> for zero-infrastructure deployment of batch models inside of a <code>dbt</code> pipeline. We’ll discuss:</p>
<ul>
<li>what makes MLOps hard</li>
<li>when database/<code>dbt</code>-based deployment might help</li>
<li>a reference implementation and workflow for <code>dbt</code> + <code>orbital</code><sup>3</sup></li>
<li>how preexisting <code>dbt</code> + <code>orbital</code> features address common MLOps pain points</li>
<li>limitations and caveats to the above approach</li>
</ul>
<p>Along the way, we’ll walk through this <a href="https://github.com/emilyriederer/orbital-exploration/tree/main/dbt_orb_demo">demo implementation of a churn prediction model</a> (wow, what a cliche). The demo is fully self-contained with open data and a <code>duckdb</code> backend if you want to pull it down and play along!</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
R and python compatibility
</div>
</div>
<div class="callout-body-container callout-body">
<p>My example in this post uses the <code>orbital</code> python package to translate a <code>scikit-learn</code> pipline to SQL. However, there is also an <code>orbital</code> R package that can translate <code>tidymodels</code>. This post is more about the <em>workflow</em> of preparing and consuming <code>orbital</code> output in <code>dbt</code>, so it’s mostly useful for either language.</p>
</div>
</div>
<section id="mlops-challenges" class="level2">
<h2 class="anchored" data-anchor-id="mlops-challenges">MLOps Challenges</h2>
<p>Predictive modeling requires nuanced, detailed thinking; MLOps requires systems thinking. Success requires an unlikely combination of skills including a deep understanding of the business problem, the modeling workflow, and engineering principles. Some key challenges include:<sup>4</sup></p>
<ul>
<li>Data management &amp; testing
<ul>
<li>Pre-modeling (not exactly MLOps) – test source data upstream of the initial query for better visibility into quality errors or concept drift</li>
<li>Scoring time – preventing scoring on features ranges not seen in training when this poses inordinate risk</li>
</ul></li>
<li>Recreating the development / evaluation environment
<ul>
<li>Feature transformations – ensuring feature availability in prod (no leakage!) and same transformation logic as dev</li>
<li>Environment management – controling package versions and dependencies for scoring code</li>
<li>Versioning – tracking changes to the model over time</li>
</ul></li>
<li>Serving relevance
<ul>
<li>Access – controlling access to intended consumers and delivering to platform they can use</li>
<li>Reliability – ensuring predictions are retrievable on-demand</li>
</ul></li>
<li>Reproducibility / Observability
<ul>
<li>Snapshotting – ability to store past predictions for auditability and performance monitoring</li>
<li>Testing – inserting tests at relevant points in the pipeline, providing observability and automated error handling</li>
<li>Logging – ensuring general system observability of performance, errors, retries, and latency</li>
</ul></li>
</ul>
<p>These technical challenges are exacerbated by cultural factors. In small companies, data teams may be small (or even a data team-of-one) and lack bandwidth for model deployment, engineering-focused skillsets, access to enterprise-grade tools, or stakeholders who would know how to consume model predictions published in bespoke environments. In large companies, modelers may not be allowed access to production systems required for deployment, so handoffs often require prioritization and context sharing across multiple teams.</p>
</section>
<section id="deploying-to-the-database" class="level2">
<h2 class="anchored" data-anchor-id="deploying-to-the-database">Deploying to the database</h2>
<p>For the right use cases, publishing predictions back into an analytical warehouse can be an attractive proposition. This approach is best suited for offline batch scoring, such as models that:</p>
<ul>
<li>drive bulk actions in downstrean CRMs, e.g.&nbsp;marketing segments to drive targeted emails<sup>5</sup></li>
<li>inform human decision-making, e.g.&nbsp;individual predictions that rollup into quarterly sales forecast dashboard</li>
<li>are reincorporated in downstream analysis similar to raw data, e.g.&nbsp;model validation and backtesting, publish a set of propensity scores back into a clinical database</li>
</ul>
<p>In such cases, there are many advantages of having model predictions in the database:</p>
<ul>
<li><strong>Fast &amp; accurate deployment</strong>: SQL-based deployment means you can deploy your data against exactly the same data is was trained on, reducing the risk of feature drift between dev and prod. Similarly, it reduced ongoing headaches of dependency management since SQL is generally a stable language<sup>6</sup> and does not depend on external packages.</li>
<li><strong>Data management tools</strong>: Features, scores – at the end of the day <em>its all just data flow</em>. Having predictions in the database unlocks the ability to leverage on other features integrated in your database like access controls, data quality checks, scheduled updates, incremental loads, and snapshots.</li>
<li><strong>Integration</strong>: Many modern data stacks have their analytical data warehouse connected to many other business-critical systems like dashboards and CRMs (e.g.&nbsp;MailChimp) or are easy to integrate via numerous reverse ETL solutions. Serving predictions to a warehouse is a great first step to syncing them <em>beyond</em> the warehouse in the platforms where they can drive actions like customer contacts.</li>
<li><strong>Development language agnosticism</strong>: For R users tired of the “we don’t put R in production” conversations, SQL provides a generic abstraction layer to “hand off” a model object regardless of how it was developed</li>
</ul>
<p>Conversely, this solution is poorly suited for real-time models where models are scored for single observations on the fly. I share a few more thoughts on when this solution is not well-suited in the final section of this post, Section&nbsp;4.</p>
</section>
<section id="orbital-dbt-pattern" class="level2">
<h2 class="anchored" data-anchor-id="orbital-dbt-pattern"><code>orbital</code> + <code>dbt</code> Pattern</h2>
<p>To demonstrate how an <code>orbital</code> + <code>dbt</code> pattern could work, I’ll walk through <a href="https://github.com/emilyriederer/orbital-exploration/tree/main/dbt_orb_demo">this example project</a>, using <a href="https://github.com/IBM/telco-customer-churn-on-icp4d/blob/master/data/Telco-Customer-Churn.csv">IBM’s telcom churn dataset</a>. The project mostly is mostly structured like a standard <code>dbt</code> project with most of the model training and <code>orbital</code> code in <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/model_dev/train_and_convert.ipynb">this additional notebook</a>.</p>
<p>Churn prediction might be a good candidate for batch scoring. Each month, accounts reaching their resubscription date could be scored and published to a database. Scores might then be used analytical use cases like monitoring or revenue forecasting and operational use cases like ingesting segments into a CRM to email targeted retention offers.</p>
<p>We’ll work up to this final pipeline:</p>
<p><img src="https://emilyriederer.com/post/orbital-mlops/full.png" class="img-fluid"></p>
<p>The point of this exercise is to think about the <code>orbital</code> and <code>dbt</code> architecture, so the model we deploy will be quite uninventive. Pull down some features, one-hot encode, fit a random forest, and do it all in a (<em>gasp</em>) Jupyter notebook. (Please dont’ do this.)</p>
<section id="sec-design" class="level3">
<h3 class="anchored" data-anchor-id="sec-design">Key Features and Design Choices</h3>
<p>If you want the TLDR, I’ll briefly explain the key design choices for this pipeline:</p>
<ul>
<li>Initial Data Preparation
<ul>
<li>Set up <code>dbt test</code>s to test sources before joining your feature table. This can better catch dropout from failed joins, newly emerging encoded categories, etc. Consider what additional filters you want to put in downstream tables (Better to “alert and allow” and “block until fixed”?)</li>
<li>Prepare feature separately (for normalization) but join different features in database to take advantage of database processing</li>
<li>Consider adding random number in training table for reproducible test/train split (this has to be linked to hash or something about the entities your randomizing to ensure reproducibility without regard to ordering of data samples)</li>
</ul></li>
<li>Feature Engineering
<ul>
<li>Create separate <code>scikit-learn</code> pipelines and/or <code>tidymodels</code> workflows for the feature engineering and training steps so you can render these as separate queries. This can enable better data testing and make queries more efficient so <code>orbital</code> does not repeat the feature transformation logic</li>
<li>Use test-driven development to update <code>dbt</code> data tests as you develop. For example, encoding a categorical? Immediately add an upstream test to check for previously unseen values.</li>
</ul></li>
<li>Preparing <code>orbital</code> SQL (supported by <code>sqlglot</code>)
<ul>
<li>Add back your identifier column to the query so predictions are joinable</li>
<li>Add a model version field into the query for better context to users</li>
<li>Change placeholder table to a <code>dbt</code> <code>ref()</code></li>
<li>Rename columns to remove <code>.</code>s so you do not have to always quote in queries</li>
<li>Output nicely formatted version for readability</li>
</ul></li>
<li>Deploying as a model
<ul>
<li>Consider carefully whether to make a table, view, or macro depending on your specific database, query latency, and desire to score bespoke populations</li>
</ul></li>
<li>Observability, logging, and error handling
<ul>
<li>Use <code>dbt snapshots</code> to save timestamped past predictions and feature values if these can change over time. This improves auditability and future analysis</li>
<li>Execute tests to <code>--store-failures</code> to detect changes in your data that might require model retraining or additional error handling</li>
<li>Check out <code>dbt</code> packages like <a href="https://hub.getdbt.com/elementary-data/elementary/latest/">elementary</a> to log more aspects of the model run process</li>
</ul></li>
</ul>
</section>
<section id="set-up" class="level3">
<h3 class="anchored" data-anchor-id="set-up">Set-Up</h3>
<p>The sample IBM data is provided as “one big table”, so I <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/setup/prep-seeds.py">break things up</a> to look a bit more like normalized database data representing subscription information, billing information, demographics, and churn targets. I also add a few columns to simulate different months, censor data I want to pretend is in the future, and add a few data errors for fun.</p>
<p>Here’s a preview of the resulting tables, connected by a <code>customer_id</code> primary key:</p>
<div id="ace4cd8c" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev.duckdb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> con:</span>
<span id="cb1-5"></span>
<span id="cb1-6">    df_serv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'serv'</span>).pl()</span>
<span id="cb1-7">    df_bill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill'</span>).pl()</span>
<span id="cb1-8">    df_demo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo'</span>).pl()</span>
<span id="cb1-9">    df_chrn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chrn'</span>).pl()</span></code></pre></div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Services Enrolled</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Billing Information</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Demographics</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Churn</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div id="018c10f8" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df_serv.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 7043
Columns: 12
$ customer_id        &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ tenure             &lt;i32&gt; 1, 34, 2, 45, 2, 8, 22, 10, 28, 62
$ phone_service      &lt;str&gt; 'No', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'Yes'
$ multiple_lines     &lt;str&gt; 'No phone service', 'No', 'No', 'No phone service', 'No', 'Yes', 'Yes', 'No phone service', 'Yes', 'No'
$ internet_service   &lt;str&gt; 'DSL', 'DSL', 'DSL', 'DSL', 'Fiber optic', 'Fiber optic', 'Fiber optic', 'DSL', 'Fiber optic', 'DSL'
$ online_security    &lt;str&gt; 'No', 'Yes', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'No', 'Yes'
$ online_backup      &lt;str&gt; 'Yes', 'No', 'Yes', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes'
$ device_protection  &lt;str&gt; 'No', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No', 'No', 'Yes', 'No'
$ tech_support       &lt;str&gt; 'No', 'No', 'No', 'Yes', 'No', 'No', 'No', 'No', 'Yes', 'No'
$ streaming_tv       &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'Yes', 'Yes', 'No', 'Yes', 'No'
$ streaming_movies   &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes', 'No'
$ dt_renewal        &lt;date&gt; 2025-07-01, 2025-07-01, 2025-07-01, 2025-07-01, 2025-07-01, 2025-07-01, 2025-08-01, 2025-07-01, 2025-07-01, 2025-07-01
</code></pre>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div id="c3c97fd5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df_bill.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 7043
Columns: 6
$ customer_id       &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ contract          &lt;str&gt; 'Month-to-month', 'One year', 'Month-to-month', 'One year', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'One year'
$ paperless_billing &lt;str&gt; 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No'
$ payment_method    &lt;str&gt; 'Electronic check', 'Mailed check', 'Mailed check', 'Bank transfer (automatic)', 'Electronic check', 'Electronic check', 'Credit card (automatic)', 'Mailed check', 'Electronic check', 'Bank transfer (automatic)'
$ monthly_charges   &lt;f64&gt; 29.85, 56.95, 53.85, 42.3, 70.7, 99.65, 89.1, 29.75, 104.8, 56.15
$ total_charges     &lt;f64&gt; 29.85, 1889.5, 108.15, 1840.75, 151.65, 820.5, 1949.4, 301.9, 3046.05, 3487.95
</code></pre>
</div>
</div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="795b373c" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df_demo.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 7043
Columns: 5
$ customer_id    &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ gender         &lt;str&gt; 'Female', 'Male', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female', 'Female', 'Male'
$ senior_citizen &lt;i32&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
$ partner        &lt;str&gt; 'Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'Yes', 'No'
$ dependents     &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes'
</code></pre>
</div>
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div id="d80ba20a" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df_chrn.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 7043
Columns: 2
$ customer_id &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ churn       &lt;str&gt; 'No', 'No', 'Yes', 'No', 'Yes', 'Yes', 'No', 'No', 'Yes', 'No'
</code></pre>
</div>
</div>
</div>
</div>
</div>
<p>Ultimately, these are saved as <code>seeds</code> in the dbt project as a lightweight way to ingest small CSVs; in reality, they would be my <code>sources</code> flowing into my data warehouse from other production sources.</p>
</section>
<section id="features-training" class="level3">
<h3 class="anchored" data-anchor-id="features-training">Features &amp; Training</h3>
<p>Feature preparation and training are the heart of where <code>orbital</code> fits into our pipelines. I recommend doing these steps one-at-a-time and explain them similarly. However, since the code is closely coupled, I’ll provide it at once for reference. The combination of feature engineering and model training steps look like this:</p>
<div id="0cbc36d3" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Pipeline to orbital</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build pipeline(s)</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## feature pipeline does OneHotEncoding on all string columns (all are low/known cardinality)</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## orbital can create some very verbose variable names (for uniqueness) so we clean those up some</span></span>
<span id="cb10-5">cols_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.select( cs.string() ).columns</span>
<span id="cb10-6">onho_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'oh'</span>, OneHotEncoder(sparse_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), cols_str)</span>
<span id="cb10-7">ppl_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([</span>
<span id="cb10-8">  (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encoder"</span>, ColumnTransformer([onho_enc], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passthrough'</span>))</span>
<span id="cb10-9">]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polars"</span>)</span>
<span id="cb10-10">X_tran <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ppl_feat.fit_transform(X, y)</span>
<span id="cb10-11">X_tran.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [c.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'('</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">')'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> X_tran.columns]</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## training pipeline fits actual random forest model</span></span>
<span id="cb10-14">ppl_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([</span>
<span id="cb10-15">  (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prep"</span>, ColumnTransformer([], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passthrough'</span>)),</span>
<span id="cb10-16">  (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pred"</span>, RandomForestClassifier(max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_estimators<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb10-17">])</span>
<span id="cb10-18">ppl_pred.fit(X_tran, y)</span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to orbital</span></span>
<span id="cb10-21"></span>
<span id="cb10-22">tbl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TBL_REF"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># placeholder replaced in cleaning</span></span>
<span id="cb10-23"></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## creating mapping of source data types to orbital types </span></span>
<span id="cb10-25">type_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb10-26">    pl.String:orbital.types.StringColumnType(),</span>
<span id="cb10-27">    pl.Int32:orbital.types.Int32ColumnType(),</span>
<span id="cb10-28">    pl.Float64:orbital.types.DoubleColumnType()</span>
<span id="cb10-29">}</span>
<span id="cb10-30">dict_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {e: type_map.get(t) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> e, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(X.columns, X.dtypes)}</span>
<span id="cb10-31">dict_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {e: type_map.get(t) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> e, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(X_tran.columns, X_tran.dtypes)}</span>
<span id="cb10-32"></span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## features</span></span>
<span id="cb10-34">orb_ppl_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orbital.parse_pipeline(ppl_feat, features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dict_feat)</span>
<span id="cb10-35">sql_raw_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orbital.export_sql(tbl, orb_ppl_feat, dialect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duckdb"</span>)</span>
<span id="cb10-36"></span>
<span id="cb10-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## scoring</span></span>
<span id="cb10-38">orb_ppl_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orbital.parse_pipeline(ppl_pred, features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dict_pred)</span>
<span id="cb10-39">sql_raw_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orbital.export_sql(tbl, orb_ppl_pred, dialect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duckdb"</span>)</span></code></pre></div>
</details>
</div>
<section id="features" class="level4">
<h4 class="anchored" data-anchor-id="features">Features</h4>
<p>Feature prep is the first use case for integrating <code>orbital</code> code in our <code>dbt</code> pipeline. Ultimately, we want to be sure our production features are identical to our development features. To do this, we make three design choices:</p>
<ul>
<li>Prepare raw features in the database (pre-joining) to take advantage of database-grade computational power and have preprocessing “published” to fuel different model experimentation
<ul>
<li>Adding a <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/models/churn_model/raw_feat.sql">model <code>raw_feat</code></a> to my dbt project that simply pre-joins relevant sources</li>
</ul></li>
<li>Make separate <code>scikit-learn</code> pipelines and <code>orbital</code> SQL output for feature and training steps for separate testing and faster scoring (Otherwise, <code>orbital</code>-generated SQL sometimes reproduces feature transformation logic at <em>every use</em> of the feature versus doing it once upfront. Depending one your database’s optimizer, it may or may not be smart enough to reorder this at runtime.)
<ul>
<li>In python, fit the <code>ppl_feat</code> pipeline (<a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/model_dev/train_and_convert.ipynb">cell 4</a>) which only fits the feature transformation steps</li>
<li>Retrieve the resulting SQL code from <code>orbital</code> and clean it up (discussed below)</li>
<li>Deploy it by writing the SQL back to the <code>models/</code> folder as a <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/models/churn_model/prep_feat.sql">model <code>prep_feat</code></a></li>
</ul></li>
<li>Noting the assumptions we are making about our data while engineering features and pushing those tests upstream to the source in the database
<ul>
<li>For example, one-hot encoding assumes the categories won’t change. So, since we are one-hot encoding the <code>internet_service</code> field from source, we can update our <code>schema.yml</code> file to <a href="https://github.com/emilyriederer/orbital-exploration/blob/b63cf4732cc8a440821ed96339bdb1655e9b9bb5/dbt_orb_demo/seeds/schema.yml#L33">add an <code>accepted_values</code> data test for that field</a> to warn us if our model is beginning to see data is was not prepared to handle<sup>7</sup>. Subsequent data models could, in theory, route these cases away from our scoring table and into a separate logging table for separate handling.</li>
</ul></li>
</ul>
<p>This way, we can deploy our exact features to the database separately from our final model for additional data validation. We can also run our dbt tests before consuming the results to ensure the assumptions that went into feature creation still hold.</p>
<p>Again, because we are using <code>dbt</code>, we can take advtange of related tools. Using the VS Code extension, we can examine our database’s DAG so far and see that our data test was correctly placed on the source:</p>
<p><img src="https://emilyriederer.com/post/orbital-mlops/source-test.png" class="img-fluid"></p>
</section>
<section id="training" class="level4">
<h4 class="anchored" data-anchor-id="training">Training</h4>
<p>Model training follows similarly. We create another sci-kit-learn pipline <code>ppl_pred</code> and train it (<a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/model_dev/train_and_convert.ipynb">cell 4</a>). This time, we just use the preprocessed data that was <code>fit_transform</code>ed in the prior step. Alternatively, we could re-retrieve our newly prepared features from the database.</p>
<p>In theory, this is where we’d also do a lot of model evaluation and iteration where being <em>outside</em> of the database in a joy. I don’t do this since getting a good model is not my goal.</p>
</section>
</section>
<section id="sql-cleanup" class="level3">
<h3 class="anchored" data-anchor-id="sql-cleanup">SQL Cleanup</h3>
<p>While <code>orbital</code> does a lot of heavy lifting, the SQL it produces is not perfect:</p>
<ul>
<li>It does not <code>SELECT</code> any metadata or identifier columns, rendering your predictions impossible to join to other data sources. Inserting this column requires care because sometimes the upstream data is being queried within the main query and other times it is queried in a CTE</li>
<li>Its hard to get <code>orbital</code> to query from a <code>ref()</code> that plays nice with <code>dbt</code>’s Jinja because <code>orbital</code> is rigorous about quoting table and column names. So, it’s easier to put a placeholder table name and edit it in post-processing.</li>
<li>It uses somewhat long and bulky variable names that reflect <code>scikit-learn</code> internals, including <code>.</code>s in column names which can reduce readability and requires quoting since <code>.</code> usually means something different in SQL</li>
<li>It includes positive predictions, negative predictions, and labels which may be excessive. I’ve never wanted anything more than the positive predictions</li>
<li>It’s not formatted which shouldn’t matter but will wrankle anyone who has ever worked with SQL</li>
</ul>
<p>To mitigate these multiple issues, <code>sqlglot</code> makes it easy to further parse the query. <code>sqlglot</code> is a package that allows you to turn any SQL script into an AST for ease of programatic modification. I defined a <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/model_dev/clean_sql.py">helper function</a> with <code>sqlglot</code> to fix all of the above.</p>
<div id="48c78f73" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Cleaning function definition</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlglot</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlglot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> parse_one, exp </span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> clean_sql(sql_raw: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, </span>
<span id="cb11-5">              tbl_ref: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, </span>
<span id="cb11-6">              model_version: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb11-7">              col_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, </span>
<span id="cb11-8">              cols_renm: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output_probability.1'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred'</span>, </span>
<span id="cb11-9">                                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output_probability.0'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>, </span>
<span id="cb11-10">                                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output_label'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>},</span>
<span id="cb11-11">              ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb11-12"></span>
<span id="cb11-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Opinionated clean-up of SQL returned by orbital</span></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function executes the following transformations:</span></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Rename desired columns such as the prediction column (per result of cols_renm)</span></span>
<span id="cb11-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Remove unwanted variables (those being "renamed" to "0")</span></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Add back ID variable for joining predictions to other datasets </span></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Fix table reference from default TBL_REF to a specific dbt model reference</span></span>
<span id="cb11-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Reformats SQL for improved readability</span></span>
<span id="cb11-21"></span>
<span id="cb11-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    sql_raw: SQL string provided by `orbital`</span></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tbl_ref: Name of dbt model to be referenced in query's FROM clause</span></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    model_version: Version number of model to be added as own column. Defaults to None to add no column</span></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    col_id: Name of the column representing the unique identifier of entities to be predicted</span></span>
<span id="cb11-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cols_renm: Dictionary of {default_name: desired_name} to rename fields</span></span>
<span id="cb11-29"></span>
<span id="cb11-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb11-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb11-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    str</span></span>
<span id="cb11-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A formatted and updated SQL query</span></span>
<span id="cb11-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-35"></span>
<span id="cb11-36"></span>
<span id="cb11-37">    ast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse_one(sql_raw)</span>
<span id="cb11-38">    </span>
<span id="cb11-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ast.expressions:</span>
<span id="cb11-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rename prediction column</span></span>
<span id="cb11-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cols_renm.get(e.alias) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>:</span>
<span id="cb11-42">            e.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(arg_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'this'</span>,value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb11-43">            e.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(arg_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alias'</span>,value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb11-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> e.alias <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_renm.keys():</span>
<span id="cb11-45">            e.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(arg_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alias'</span>,value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cols_renm.get(e.alias))</span>
<span id="cb11-46">    </span>
<span id="cb11-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add back a variable for reference (typically like an ID for joining to other tables)</span></span>
<span id="cb11-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is tricky because sometimes orbital uses CTEs and other times it doesn't;</span></span>
<span id="cb11-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generally, we need to get the identifier inside the CTE if it exists</span></span>
<span id="cb11-50">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp.Column(this<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exp.to_identifier(col_id))</span>
<span id="cb11-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ast.find(exp.CTE) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb11-52">        cte_select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.find(exp.CTE).this</span>
<span id="cb11-53">        cte_select.expressions.append(col)</span>
<span id="cb11-54">    ast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.select(col_id)</span>
<span id="cb11-55"></span>
<span id="cb11-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add model version to outer query if desired</span></span>
<span id="cb11-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> model_version <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb11-58"></span>
<span id="cb11-59">        col_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp.Alias(</span>
<span id="cb11-60">            this<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exp.Literal.string(model_version), </span>
<span id="cb11-61">            alias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_version"</span>)</span>
<span id="cb11-62">        ast.find(exp.Select).expressions.append(col_version)</span>
<span id="cb11-63">    </span>
<span id="cb11-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pretty print</span></span>
<span id="cb11-65">    sql_fmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlglot.transpile(ast.sql(), </span>
<span id="cb11-66">                                write<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duckdb"</span>, </span>
<span id="cb11-67">                                identify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb11-68">                                pretty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-69">    </span>
<span id="cb11-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change out table to dbt reference</span></span>
<span id="cb11-71">    ref_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">{{{{</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ref('</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tbl_ref<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">')</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">}}}}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-72">    sql_fnl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sql_fmt.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"TBL_REF"'</span>, ref_str) </span>
<span id="cb11-73">  </span>
<span id="cb11-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sql_fnl</span></code></pre></div>
</details>
</div>
<p>I run the SQL generated from both <code>ppl_feat</code> and <code>ppl_rafo</code> through this function before writing them to <code>models/churn_model/prep_feat.sql</code> and <code>models/churn_model/pred_churn.sql</code> in my <a href="https://github.com/emilyriederer/orbital-exploration/tree/main/dbt_orb_demo/models/churn_model"><code>dbt</code> <code>models/</code> directory</a>.</p>
<p>This establishes our core model deployment pipeline:</p>
<p><img src="https://emilyriederer.com/post/orbital-mlops/core-pipe.png" class="img-fluid"></p>
</section>
<section id="scoring-preserving-and-activating-predictions" class="level3">
<h3 class="anchored" data-anchor-id="scoring-preserving-and-activating-predictions">Scoring, Preserving, and Activating Predictions</h3>
<p>We now have a table in our database that has our churn model predictions! Here is where we can begin to utilize the full benefit of the data management tools that <code>dbt</code> has built in.</p>
<p>Before scoring, we can run our <code>dbt test</code> to ensure that our features are stable and valid.</p>
<p>For scoring, depending on our use case we can set the table materialization to be a table (rebuilt on a schedule) or a view (generated on the fly for a specific population).</p>
<p>For archiving past scores, we can update our <a href="https://github.com/emilyriederer/orbital-exploration/blob/b63cf4732cc8a440821ed96339bdb1655e9b9bb5/dbt_orb_demo/dbt_project.yml#L35">dbt-project.yml to include snapshotting</a> our predictions table. This means even if we publish our tables as a view, we could schedule a call to <code>dbt snapshot</code> on a regular basis to record a timestamped record of what our scores were at any given point in time. This could be useful for model monitoring or auditiability. For example, if we are using our churn model to segment a marketing campaign, we might need these scores later to determine who got what treatment in the campaign.</p>
<p>For staging analysis, we can use <code>dbt</code> <code>analyses</code> to <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/analyses/churn_model_perf.sql">render the scripts</a> that might be needed to conduct model monitoring (e.g.&nbsp;merging past scores with observed targets.)</p>
<p>We can see examples of these different artifacts branching off of our DAG:</p>
<p><img src="https://emilyriederer.com/post/orbital-mlops/artifacts.png" class="img-fluid"></p>
</section>
<section id="datamart-preview" class="level3">
<h3 class="anchored" data-anchor-id="datamart-preview">Datamart Preview</h3>
<p>Below, we can tour the resulting datasets:</p>
<div id="4315c981" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev.duckdb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> con:</span>
<span id="cb12-5"></span>
<span id="cb12-6">    df_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'raw_feat'</span>).pl()</span>
<span id="cb12-7">    df_prep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prep_feat'</span>).pl()</span>
<span id="cb12-8">    df_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_churn'</span>).pl()</span>
<span id="cb12-9">    df_snap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main_snapshots.pred_churn_snapshot'</span>).pl()</span>
<span id="cb12-10">    df_fail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main_audit.accepted_values_serv_internet_service__DSL__Fiber_optic__No'</span>).pl()</span></code></pre></div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Raw Training Data</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Prepared Features</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Predictions</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Snapshots</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-5-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-5" aria-controls="tabset-2-5" aria-selected="false">Failures</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div id="fad7bf70" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df_feat.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6944
Columns: 21
$ customer_id       &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ cat_train_test    &lt;str&gt; 'Train', 'Train', 'Train', 'Train', 'Train', 'Train', 'Train', 'Train', 'Train', 'Train'
$ tenure            &lt;i32&gt; 1, 34, 2, 45, 2, 8, 22, 10, 28, 62
$ phone_service     &lt;str&gt; 'No', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'Yes'
$ multiple_lines    &lt;str&gt; 'No phone service', 'No', 'No', 'No phone service', 'No', 'Yes', 'Yes', 'No phone service', 'Yes', 'No'
$ internet_service  &lt;str&gt; 'DSL', 'DSL', 'DSL', 'DSL', 'Fiber optic', 'Fiber optic', 'Fiber optic', 'DSL', 'Fiber optic', 'DSL'
$ online_security   &lt;str&gt; 'No', 'Yes', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'No', 'Yes'
$ online_backup     &lt;str&gt; 'Yes', 'No', 'Yes', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes'
$ device_protection &lt;str&gt; 'No', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No', 'No', 'Yes', 'No'
$ tech_support      &lt;str&gt; 'No', 'No', 'No', 'Yes', 'No', 'No', 'No', 'No', 'Yes', 'No'
$ streaming_tv      &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'Yes', 'Yes', 'No', 'Yes', 'No'
$ streaming_movies  &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes', 'No'
$ gender            &lt;str&gt; 'Female', 'Male', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female', 'Female', 'Male'
$ senior_citizen    &lt;i32&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
$ partner           &lt;str&gt; 'Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'Yes', 'No'
$ dependents        &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes'
$ contract          &lt;str&gt; 'Month-to-month', 'One year', 'Month-to-month', 'One year', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'One year'
$ paperless_billing &lt;str&gt; 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No'
$ payment_method    &lt;str&gt; 'Electronic check', 'Mailed check', 'Mailed check', 'Bank transfer (automatic)', 'Electronic check', 'Electronic check', 'Credit card (automatic)', 'Mailed check', 'Electronic check', 'Bank transfer (automatic)'
$ monthly_charges   &lt;f64&gt; 29.85, 56.95, 53.85, 42.3, 70.7, 99.65, 89.1, 29.75, 104.8, 56.15
$ total_charges     &lt;f64&gt; 29.85, 1889.5, 108.15, 1840.75, 151.65, 820.5, 1949.4, 301.9, 3046.05, 3487.95
</code></pre>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div id="3783234a" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df_prep.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6944
Columns: 47
$ oh__phone_service_No                       &lt;f64&gt; 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0
$ oh__phone_service_Yes                      &lt;f64&gt; 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0
$ oh__multiple_lines_No                      &lt;f64&gt; 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0
$ oh__multiple_lines_No_phone_service        &lt;f64&gt; 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0
$ oh__multiple_lines_Yes                     &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__internet_service_DSL                   &lt;f64&gt; 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0
$ oh__internet_service_Fiber_optic           &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__internet_service_No                    &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__online_security_No                     &lt;f64&gt; 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__online_security_No_internet_service    &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__online_security_Yes                    &lt;f64&gt; 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0
$ oh__online_backup_No                       &lt;f64&gt; 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0
$ oh__online_backup_No_internet_service      &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__online_backup_Yes                      &lt;f64&gt; 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0
$ oh__device_protection_No                   &lt;f64&gt; 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0
$ oh__device_protection_No_internet_service  &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__device_protection_Yes                  &lt;f64&gt; 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0
$ oh__tech_support_No                        &lt;f64&gt; 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0
$ oh__tech_support_No_internet_service       &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__tech_support_Yes                       &lt;f64&gt; 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0
$ oh__streaming_tv_No                        &lt;f64&gt; 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0
$ oh__streaming_tv_No_internet_service       &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__streaming_tv_Yes                       &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__streaming_movies_No                    &lt;f64&gt; 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0
$ oh__streaming_movies_No_internet_service   &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__streaming_movies_Yes                   &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0
$ oh__gender_Female                          &lt;f64&gt; 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0
$ oh__gender_Male                            &lt;f64&gt; 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0
$ oh__partner_No                             &lt;f64&gt; 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0
$ oh__partner_Yes                            &lt;f64&gt; 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0
$ oh__dependents_No                          &lt;f64&gt; 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0
$ oh__dependents_Yes                         &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0
$ oh__contract_Month_to_month                &lt;f64&gt; 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0
$ oh__contract_One_year                      &lt;f64&gt; 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0
$ oh__contract_Two_year                      &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__paperless_billing_No                   &lt;f64&gt; 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0
$ oh__paperless_billing_Yes                  &lt;f64&gt; 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__payment_method_Bank_transfer_automatic &lt;f64&gt; 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0
$ oh__payment_method_Credit_card_automatic   &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0
$ oh__payment_method_Electronic_check        &lt;f64&gt; 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0
$ oh__payment_method_Mailed_check            &lt;f64&gt; 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0
$ remainder__tenure                          &lt;f64&gt; 1.0, 34.0, 2.0, 45.0, 2.0, 8.0, 22.0, 10.0, 28.0, 62.0
$ remainder__senior_citizen                  &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ remainder__monthly_charges                 &lt;f64&gt; 29.85, 56.95, 53.85, 42.3, 70.7, 99.65, 89.1, 29.75, 104.8, 56.15
$ remainder__total_charges                   &lt;f64&gt; 29.85, 1889.5, 108.15, 1840.75, 151.65, 820.5, 1949.4, 301.9, 3046.05, 3487.95
$ customer_id                                &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ model_version                              &lt;str&gt; '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0'
</code></pre>
</div>
</div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div id="95bd4553" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df_pred.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6944
Columns: 3
$ pred          &lt;f64&gt; 0.4350639304611832, 0.14068829294410534, 0.34994459204608575, 0.10898763570003211, 0.5811184463091195, 0.5483232741244137, 0.4043196897255257, 0.311830934981117, 0.3962726652389392, 0.1372128768125549
$ customer_id   &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ model_version &lt;str&gt; '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0'
</code></pre>
</div>
</div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<p>Score versioned and timestamped predictions from snapshots for auditability.</p>
<div id="9ad523d9" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">df_snap.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6944
Columns: 7
$ pred                    &lt;f64&gt; 0.4350639304611832, 0.14068829294410534, 0.34994459204608575, 0.10898763570003211, 0.5811184463091195, 0.5483232741244137, 0.4043196897255257, 0.311830934981117, 0.3962726652389392, 0.1372128768125549
$ customer_id             &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ model_version           &lt;str&gt; '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0'
$ dbt_scd_id              &lt;str&gt; 'c4671964ba707c90a41d74f6f2ef75b7', '7dc40efa71bcee4795c7f54b3b5bc783', 'b05d4425f5d07106f1f2f2e782461f44', '3b919e27eb23ba54e200462af172e7da', 'eb6117ba3156a771b0e02e5e7bc644ab', 'ddae31e6abdabdd771ea4bbd1072fe55', 'aa7fe49fcbb5a937b44f7ac589b3ff34', 'da7eb2655934862105e8782e40ca5eb5', '882f945d0e265290e5976d4c8d04679e', '72f44f68e12a53baaf1d9ddd2469a616'
$ dbt_updated_at &lt;datetime[μs]&gt; 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000
$ dbt_valid_from &lt;datetime[μs]&gt; 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000
$ dbt_valid_to   &lt;datetime[μs]&gt; 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00
</code></pre>
</div>
</div>
</div>
<div id="tabset-2-5" class="tab-pane" aria-labelledby="tabset-2-5-tab">
<p>What happens when the <code>internet_service</code> field is recoded in production data from “Fiber optic” to “Fiber” after training? If we are checking for <code>accepted_values</code>, we capture that change in our failures table before scoring on bad data!</p>
<div id="ad60aa36" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">df_fail.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1
Columns: 2
$ value_field &lt;str&gt; 'Fiber'
$ n_records   &lt;i64&gt; 48
</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="dreaming-bigger" class="level3">
<h3 class="anchored" data-anchor-id="dreaming-bigger">Dreaming bigger</h3>
<p>This demo shows just <code>orbital</code> + <code>dbt</code>, but that’s just the beginning. Treating the whole MLOps process just like data processing means you can benefit from a wide range of integrated tools and capabilities, e.g.:</p>
<ul>
<li>data ingestion
<ul>
<li>retrieve training data for APIs with <code>dlt</code></li>
<li>ingest features from flatfiles on blob sources via the <code>dbt</code> <a href="https://hub.getdbt.com/dbt-labs/dbt_external_tables/latest/">external-tables</a> package</li>
</ul></li>
<li>better testing with dbt packages such as <a href="https://hub.getdbt.com/metaplane/dbt_expectations/latest/"><code>dbt-expectatons</code></a> (from Great Expectations)</li>
<li>logging and observability
<ul>
<li>snapshot features table as well as predictions table</li>
<li>use <code>dbt</code> packages like <a href="https://hub.getdbt.com/elementary-data/elementary/latest/">elementary</a> to write more run metadata to your warehouse</li>
</ul></li>
<li>orchestration with <code>Dagster</code>
<ul>
<li>unfurl your local <code>dbt</code> DAG into a broader pipeline</li>
<li>trigger more model-adjacent tasks from refitting, monitoring, etc.</li>
</ul></li>
<li>documentions with <code>dbt docs</code> (which can be <a href="https://github.com/emilyriederer/dbt_duckdb_quarto">enhanced with Quarto</a>)</li>
<li>reverse ETL with tools like HighTouch or Census to easily sync analytical data models into production systems like CRMs</li>
</ul>
</section>
</section>
<section id="sec-limitations" class="level2">
<h2 class="anchored" data-anchor-id="sec-limitations">Limitations</h2>
<p>While I see a lot of promise in model deployment to the database, it’s currently not without it’s limitations. Tobias Macey of the excellent <a href="https://www.dataengineeringpodcast.com/">Data Engineering Podcast</a> always ends his show by asking his guests (mostly tool developers): “When is <thing> not the right solution?” I’ll conclude by answering the same.</thing></p>
<p>There are many things I would consider if using <code>orbital</code> today for business use cases versus hobby projects:</p>
<ul>
<li><strong>Use Case</strong>: ML in Database only makes sense for batch predictions. <code>orbital</code> is not the right solution if there is a chance you’ll want realtime predictions</li>
<li><strong>Scale</strong>: SQL is generally good at optimizing large-scale data processing jobs. However, extremely large ensemble models may experience slower runtimes. If such a model was to be run at extreme scale, one would need to consider the relative latency<sup>8</sup> and cost<sup>9</sup> of this versus other solutions</li>
<li><strong>Algorithms</strong>: Right now <code>orbital</code> is mostly limited to <code>scikit-learn</code> models and select feature engineering steps (or <code>tidymodels</code> in R). This can be a challenge if you want to use other common algorithms. I’ve figured out some workarounds for <a href="../..\post/orbital-xgb"><code>xgboost</code></a> but at some point, the amount of hacking around the periphery reduces the “same code in dev and prod” benefits</li>
<li><strong>Precision</strong>: <code>orbital</code> uses <code>sklearn-onnx</code> which can create some issues when <a href="https://onnx.ai/sklearn-onnx/auto_tutorial/plot_ebegin_float_double.html">floating point precision</a>. It is easily tested how critical this is for your use case, but you may find corner cases where it is difficult to precisely recreate your local predictions – particularly for tree-based models where tiny perturbations send an observation down a different path.</li>
<li><strong>Bugs</strong>: <code>orbital</code> still has some bugs it’s working out and seems to still be building out its testing infrastructure. For example, at the time of writing this demo, I started out trying to use the <code>TargetEncoder()</code> which <a href="https://github.com/posit-dev/orbital/issues/62">failed unexpectedly</a> so I switched to the <code>OneHotEncoder()</code>. That’s fine for a demo, but I wouldn’t be so cavelier about letting tool limitations shape my modeling choices in real life.</li>
<li><strong>Governance</strong>: Similar to the downsides of <code>dbt</code>, the risk of lowering the barriers to entry to deploying a new data model or machine learning model is that it will be done carelessly or prolificly. As the demo above shows, a rigorous approach can add many data artifacts to your datamart and could risk causing bloat if done casually. Having the right controls to determine who should be allowed to deploy models of what materiality is key.</li>
</ul>
<p>The good news is, most of these downsides are fully testable. You can quickly and pretty robustly dual-validated <code>orbital</code>’s logic and cross-check prediction speed and accuracy from python and SQL environments. So, if the idea sounds intriguing, take it for a spin! There aren’t too many “unknown unknowns”. These packages are under active development and improving by the day. I am excited to continue following the progress and experimenting with this project.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This post is cursed because “data modeling” and “predictive modeling” are completely different things, one involving data pipelines and the other involve machine learning. Both happen to be relevant here.↩︎</p></li>
<li id="fn2"><p>I say project versus package because <code>orbital</code> is really a “concept” with parallel but programmatically unrelated R and python implementations; the R project has been around for a but, but the python version is recently released .↩︎</p></li>
<li id="fn3"><p>Just want a few concrete ideas for stitching these tools together without the wind-up? Jump to Section&nbsp;3.1.↩︎</p></li>
<li id="fn4"><p>This list is, of course, non-comprehensive and coincidentally cherry-picked towards the problems which I’ll claim <code>orbital</code> might address. For a thoughtful and comprehensive take on MLOps, check out <a href="https://arxiv.org/abs/2209.09125">this excellent survey</a> by <a href="https://www.sh-reya.com/">Shreya Shankar</a> who, coincidentally enough, made MLOps the focus on her Stanford PhD in… Databases!↩︎</p></li>
<li id="fn5"><p>In my dual life volunteering on downballot campaigns, I also thing this pattern would be very effective to publish partisanship and turnout scores back to BigQuery, the beating heart of campaign data infrastructure.↩︎</p></li>
<li id="fn6"><p>Within a given database. SQL is a loosely enforced spec leading to an absurd amount of arbitrary uniqueness on top of ANSI. But, happily, so long as you aren’t switching databases, this does not matter.↩︎</p></li>
<li id="fn7"><p>If you run <code>dbt test</code> or <code>dbt test --store-failures</code>, you can find two such failure cases.↩︎</p></li>
<li id="fn8"><p>Or mitigate it through off-hours scheduling and materializing as a table versus a view↩︎</p></li>
<li id="fn9"><p>Comparing cost of database compute versus egress/ingress of pulling data from database to execute somewhere else↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>python</category>
  <category>dbt</category>
  <category>sql</category>
  <category>data</category>
  <category>ml</category>
  <guid>https://emilyriederer.com/post/orbital-mlops/</guid>
  <pubDate>Sat, 16 Aug 2025 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/orbital-mlops/featured.png" medium="image" type="image/png" height="135" width="144"/>
</item>
<item>
  <title>Crosspost: Power up your data quality with grouped checks</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/grouping-data-quality-crosspost/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/grouping-data-quality-crosspost/featured.jpg" class="img-fluid figure-img"></p>
<figcaption>Photo credit to <a href="https://unsplash.com/@greysonjoralemon">Greyson Joralemon</a> on Unsplash</figcaption>
</figure>
</div>
<p>I’ve written previously about the <a href="../..\post/grouping-data-quality/">unreasonably effectiveness of grouping in data quality checks</a> and <a href="../..\post/grouping-data-quality-update/">implementing such checks in dbt</a>. To publicize my <a href="https://github.com/dbt-labs/dbt-utils/pull/633">merged pull request</a> for this feature in <code>dbt-utils</code> package, I summarized my thinking on the topic on dbt’s Developer Blog.</p>
<p>Check out the post <a href="https://docs.getdbt.com/blog/grouping-data-tests#grouped-checks">here</a>.</p>



 ]]></description>
  <category>data</category>
  <category>dbt</category>
  <category>crosspost</category>
  <guid>https://emilyriederer.com/post/grouping-data-quality-crosspost/</guid>
  <pubDate>Tue, 17 Jan 2023 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/grouping-data-quality-crosspost/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Update: grouped data quality check PR merged to dbt-utils</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/grouping-data-quality-update/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/grouping-data-quality-update/featured.jpg" class="img-fluid figure-img"></p>
<figcaption>Photo credit to <a href="https://unsplash.com/@greysonjoralemon">Greyson Joralemon</a> on Unsplash</figcaption>
</figure>
</div>
<p>Last fall, I wrote about the <a href="https://www.emilyriederer.com/post/grouping-data-quality/">unreasonably effectiveness of grouping in data quality checks</a>. In this follow-up, I want to share that my <a href="https://github.com/dbt-labs/dbt-utils/pull/633">pull request</a> for such features has just been merged into the development branch of the <code>dbt-utils</code> package, a common add-on to the <code>dbt</code> data transformation stack. This feature will officially “go live” in the 1.0.0 version release that is planned for later this fall.</p>
<p>In this brief post, I’ll recall the benefits of such checks (which my original post further illustrates with NYC subway data) and demonstrate how these checks can now be implemented in <code>dbt-utils</code>.</p>
<p>For those interested, I’ll also provide a brief overview of how I implemented this change, but I recommend checking out the PR itself for complete details.</p>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>To recap the benefits of such checks from my initial post:</p>
<ul>
<li>Some data checks can only be expressed within a group (e.g.&nbsp;ID values should be unique within a group but can be repeated between groups)</li>
<li>Some data checks are more precise when done by group (e.g.&nbsp;not only should table row-counts be equal but the counts within each group should be equal)</li>
</ul>
<p>Of course, these benefits are more or less relevant to different types of data checks. My PR updates the following tests:</p>
<ul>
<li>equal_rowcount()</li>
<li>recency()</li>
<li>fewer_rows_than()</li>
<li>at_least_one()</li>
<li>not_constant()</li>
<li>non_null_proportion()</li>
<li>sequential_values()</li>
</ul>
<p>Of these checks, most fall in the category of providing more rigor when being conducted at the group level. Only the <code>sequential_values()</code> test is often unable to be expressed without grouping.</p>
</section>
<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<p><a href="https://docs.getdbt.com/docs/building-a-dbt-project/tests">Data tests</a> in <code>dbt</code> are specified in the <code>schema.yml</code> file for relevant models. Adding grouping to the tests listed above will now be as simple as adding a <code>group_by_columns</code> key-value pair to the tests, as desired, which accepts either a single variable name or a list of variables to be used for grouping.</p>
<p><code>{yaml eval = FALSE}   - name: data_test_at_least_one     columns:       - name: field         tests:           - dbt_utils.at_least_one:               group_by_columns: ['grouping_column']</code></p>
<p>For those that have not used <code>dbt</code>’s data testing framework before, this configuration is then used to generate SQL (now with the custom <code>GROUP BY</code> clause) which are evaluated when <code>dbt test</code> is run.</p>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>In implementing this PR, I considered a few core principles:</p>
<ul>
<li>Make this feature as unobtrusive and isolated as possible with respect to the macros broader implementation</li>
<li>Follow standard DRY principles (e.g.&nbsp;specifically, render needed text as few times as possible)</li>
<li>Implement consistently across macros</li>
</ul>
<p>With these principles in mind, the majority of implementations are like that of the <code>recency</code> macro where all relevant SQL strings are pre-computed:</p>
<pre><code>{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}
{% if group_by_columns|length() &gt; 0 %}
  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}
  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}
{% endif %}</code></pre>
<p>The main deviations to this were the sequential() macro (requiring a window function) and the equal_rowcount()/fewer_rows_than() (requiring joins)</p>


</section>

 ]]></description>
  <category>data</category>
  <category>dbt</category>
  <guid>https://emilyriederer.com/post/grouping-data-quality-update/</guid>
  <pubDate>Fri, 26 Aug 2022 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/grouping-data-quality-update/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Update: column-name contracts with dbtplyr</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/convo-dbt-update/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/convo-dbt-update/featured.PNG" class="img-fluid figure-img"></p>
<figcaption>Diff of original dbt model using dbtplyr’s concise, declarative macros</figcaption>
</figure>
</div>
<p>Earlier this year, I wrote about <a href="../..\post/convo-dbt/">embedding column-name contracts in data pipelines with dbt</a>. This, in turn, built off my post regarding the general theory of <a href="../..\post/column-name-contracts/">using controlled vocabularies to define data models</a>.</p>
<p>The general idea of the post was:</p>
<ul>
<li>Column names are the “user interface” between data producers and consumers</li>
<li>Standardizing a controlled vocabulary of naming “keywords” can communicate semantics and type information</li>
<li>These names can then be operated on in code and aid in automated documentation, testing, and transformation</li>
</ul>
<p>My first post illustrated these concepts using packages from R’s <code>tidyverse</code>. This suite of packages has an expressive, declarative API that inadvertently shaped a lot of my thinking around “naming things”. Clever naming schemes make things <em>just work</em>. The latter, as the name suggests, used <code>SQL</code> and <code>dbt</code>. While this too proved effective, it felt less elegant and satisfying. This inspired me: what if more <code>dplyr</code> syntax existed in <code>dbt</code>?</p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">TLDR</h2>
<p>This inspired the creation of the <code>dbtplyr</code> dbt package (find it on <a href="https://github.com/emilyriederer/dbtplyr">GitHub</a>). This package aims to port the semantic sugar of <code>dplyr</code>’s <code>select-helpers</code> and related functionality to <code>dbt</code> to support both controlled vocabularies and, more broadly, more concise and semantic code.</p>
<p>A full explanation is provided below. Additionally, for those that have read the previous post, I have also rewritten my COVID data modeling example to use the macros available in <code>dbtplyr</code>. Comparing the <a href="https://github.com/emilyriederer/dbt-convo-covid/pull/2/files">diff of the <code>model_monitor</code> model between the two versions</a> illustrates how <code>dbtplyr</code>’s semantic sugar creates more concise and readable templating code.</p>
</section>
<section id="introducing-dbtplyr" class="level2">
<h2 class="anchored" data-anchor-id="introducing-dbtplyr">Introducing dbtplyr</h2>
<p>To paraphrase the <code>README</code>:</p>
<p>This add-on package enhances <code>dbt</code> by providing macros which programmatically select columns based on their column names. It is inspired by the <a href="https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-colwise/"><code>across()</code> function</a> and the <a href="https://tidyselect.r-lib.org/reference/select_helpers.html"><code>select helpers</code></a> in the R package <code>dplyr</code>.</p>
<p><code>dplyr</code> (&gt;= 1.0.0) has helpful semantics for selecting and applying transformations to variables based on their names. For example, if one wishes to take the <em>sum</em> of all variables with name prefixes of <code>N</code> and the mean of all variables with name prefixes of <code>IND</code> in the dataset <code>mydata</code>, they may write:</p>
<pre><code>summarize(
  mydata, 
  across( starts_with('N'), sum),
  across( starts_with('IND', mean)
)</code></pre>
<p>This package enables us to similarly write <code>dbt</code> data models with commands like:</p>
<pre><code>{% set cols = dbtplyr.get_column_names( ref('mydata') ) %}
{% set cols_n = dbtplyr.starts_with('N', cols) %}
{% set cols_ind = dbtplyr.starts_with('IND', cols) %}

select

  {{ dbtplyr.across(cols_n, "sum({{var}}) as {{var}}_tot") }},
  {{ dbtplyr.across(cols_ind, "mean({{var}}) as {{var}}_avg") }}

from {{ ref('mydata') }}</code></pre>
<p>which <code>dbt</code> then compiles to standard SQL.</p>
<p>Alternatively, to protect against cases where no column names matched the pattern provided (e.g.&nbsp;no variables start with <code>n</code> so <code>cols_n</code> is an empty list), one may instead internalize the final comma so that it is only compiled to SQL when relevant by using the <code>final_comma</code> parameter of <code>across</code>.</p>
<pre><code>  {{ dbtplyr.across(cols_n, "sum({{var}}) as {{var}}_tot", final_comma = true) }}</code></pre>
<p>Note that, slightly more <code>dplyr</code>-like, you may also write:</p>
<pre><code>select

  {{ dbtplyr.across(dbtplyr.starts_with('N', ref('mydata')), "sum({{var}}) as {{var}}_tot") }},
  {{ dbtplyr.across(dbtplyr.starts_with('IND', ref('mydata')), "mean({{var}}) as {{var}}_avg") }}

from {{ ref('mydata') }}</code></pre>
<p>But, as each function call is a bit longer than the equivalent <code>dplyr</code> code, I personally find the first form more readable.</p>
<p>The complete list of macros included are:</p>
<p><strong>Functions to apply operation across columns</strong></p>
<ul>
<li><code>across(var_list, script_string, final_comma)</code></li>
<li><code>c_across(var_list, script_string)</code></li>
</ul>
<p><strong>Functions to evaluation condition across columns</strong></p>
<ul>
<li><code>if_any(var_list, script_string)</code></li>
<li><code>if_all(var_list, script_string)</code></li>
</ul>
<p><strong>Functions to subset columns by naming conventions</strong></p>
<ul>
<li><code>starts_with(string, relation or list)</code></li>
<li><code>ends_with(string, relation or list)</code></li>
<li><code>contains(string, relation or list)</code></li>
<li><code>not_contains(string, relation or list)</code></li>
<li><code>one_of(string_list, relation or list)</code></li>
<li><code>not_one_of(string_list, relation or list)</code></li>
<li><code>matches(string, relation)</code></li>
<li><code>everything(relation)</code></li>
<li><code>where(fn, relation)</code> where <code>fn</code> is the string name of a <a href="https://docs.getdbt.com/reference/dbt-classes/#column">Column type-checker</a> (e.g.&nbsp;“is_number”)</li>
</ul>
<p>Note that all of the select-helper functions that take a relation as an argument can optionally be passed a list of names instead.</p>
<p>Documentation for these functions is available on the <a href="https://emilyriederer.github.io/dbtplyr/">package website</a> and in the <a href="https://github.com/emilyriederer/dbtplyr/blob/main/macros/macro.yml"><code>macros/macro.yml</code></a> file.</p>


</section>

 ]]></description>
  <category>rstats</category>
  <category>dbt</category>
  <guid>https://emilyriederer.com/post/convo-dbt-update/</guid>
  <pubDate>Tue, 21 Sep 2021 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/convo-dbt-update/featured.PNG" medium="image"/>
</item>
<item>
  <title>Embedding column-name contracts in data pipelines with dbt</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/convo-dbt/</link>
  <description><![CDATA[ 





<p><img src="https://emilyriederer.com/post/convo-dbt/featured.png" class="img-fluid" alt="Data model DAG autogenerated by dbt"> In my post <a href="../..\post/column-name-contracts/">Column Names as Contracts</a>, I explore how using controlled vocabularies to name fields in a data table can create performance contracts between data producers and data consumers<sup>1</sup>. In short, I argue that field names can encode metadata<sup>2</sup> and illustrate with R and python how these names can be used to improve data documentation, wrangling, and validation.</p>
<p>However, demonstrations with R and python are biased towards the needs of data consumers. These popular data analysis tools provide handy, high-level interfaces for programmatically operating on columns. For example, <code>dplyr</code>’s <a href="https://tidyselect.r-lib.org/reference/select_helpers.html">select helpers</a> make it easy to quickly manipulate all columns whose names match given patterns. For example, suppose I know that all variables beginning with <code>IND_</code> are binary and non-null so I may sum them to get a count or average them to get a valid proportion. I can succinctly write:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize_at</span>(my_data,</span>
<span id="cb1-2">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IND"</span>)),</span>
<span id="cb1-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.funs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(sum, mean))</span></code></pre></div>
</div>
<p>In contrast, SQL remains a mainstay for data producers – both for use in traditional relational databases and SQL interfaces for modern large-scale data processing engines like Spark. As a <em>very</em> high-level and declarative language, SQL variants generally don’t offer a control flow (e.g.&nbsp;for loops, if statements) or programmatic control which would allow for column operations that are similar to the one shown above. That is, one might have to manually write:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb2-2">  mean(ind_a), </span>
<span id="cb2-3">  mean(ind_b), </span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(ind_a), </span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(ind_b)</span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> my_data</span></code></pre></div>
</div>
<p>But that is tedious, static (would not automatically adapt to the addition of more indicator variables), and error-prone (easy to miss or mistype a variable).</p>
<p>Although SQL itself is relatively inflexible, recent tools have added a layer of “programmability” on top of SQL which affords far more flexibility and customization. In this post, I’ll demonstrate how one such tool, <code>dbt</code>, can help data producers consistently apply controlled vocabularies when defining, manipulating, and testing tables for analytical users.</p>
<p><em>(In fact, after writing this post, I’ve also begun experimenting with a <a href="https://github.com/emilyriederer/dbt_dplyr">dbt package, <code>dbt_dplyr</code></a> that brings <code>dplyr</code>’s select-helper semantics to SQL.)</em></p>
<section id="a-brief-intro-to-dbt" class="level2">
<h2 class="anchored" data-anchor-id="a-brief-intro-to-dbt">A brief intro to <code>dbt</code></h2>
<p><code>dbt</code> (<a href="https://www.getdbt.com/">Data Build Tool</a>) “applies the principles of software engineering to analytics code”. Specifically, it encourages data producers to write modular, atomic SQL <code>SELECT</code> statements in separate files (as opposed to the use of CTEs or subqueries) from which dbt derives a DAG and orchestrates the execution on your database of choice<sup>3</sup>. Further, it enables the ability to write more programmatic (with control flow) SQL <em>templates</em> with <code>Jinja2</code> which <code>dbt</code> compiles to standard SQL files before executing.</p>
<p>For the purposes of implementing a controlled vocabulary, key advantages of this approach include:</p>
<ul>
<li>Templating with <code>if</code> statements and <code>for</code> loops</li>
<li>Dynamic insertion of local variables<sup>4</sup></li>
<li>Automated testing of each modular SQL unit</li>
<li>Code sharing with tests and macros exportable in a package framework</li>
</ul>
<p>Additional slick (but tangential for this post) <code>dbt</code> features include:</p>
<ul>
<li>The ability to switch between dev and production schemas</li>
<li>Easy toggling between views, tables, and inserts for the same base logic</li>
<li>Automatic generation of a static website documenting data lineage, metadata, and test results (the featured image above is a screenshot from the created website)</li>
<li>Orchestration of SQL statements in the DAG</li>
<li>Hooks for rote database management tasks like adding indices and keys or granting access</li>
</ul>
<p>For a general overview to <code>dbt</code>, check out the <a href="https://docs.getdbt.com/tutorial/setting-up">introductory tutorial</a> on their website, the <a href="https://www.getdbt.com/coalesce/agenda/dbt-101-eu-and-us-friendly">dbt101 presentation</a> from their recent Coalesce conference<sup>5</sup>, or the interview with one of their founders on the <a href="https://open.spotify.com/episode/1gKKgR8eZgdqdXztFGGkFe">Data Engineering Today</a> podcast.</p>
<p>In this post, I’ll demonstrate how three features of <code>dbt</code> can support the use of controlled vocabulary column naming by:</p>
<ul>
<li>Creating variable names that adhere to conventions with Jinja templating</li>
<li>Operating on subgroups of columns created by custom macros to enforce contracts</li>
<li>Validating subgroups of columns to ensure adherence to contracts with custom tests</li>
</ul>
</section>
<section id="scenario-covid-forecast-model-monitoring" class="level2">
<h2 class="anchored" data-anchor-id="scenario-covid-forecast-model-monitoring">Scenario: COVID Forecast Model Monitoring</h2>
<p>The full example code for this project is available <a href="http://github.com/emilyriederer/dbt-convo-covid">on GitHub</a>.</p>
<p>To illustrate these concepts, imagine we are tasked with monitoring the performance of a county-level COVID forecasting model using data similar to datasets available through <a href="https://cloud.google.com/blog/products/data-analytics/publicly-available-covid-19-data-for-analytics">Google BigQuery public dataset program</a>. We might want to continually log forecasted versus actual observations to ask questions like:</p>
<ul>
<li>Does the forecast perform well?</li>
<li>How far in advance does the forecast become reliable?</li>
<li>How does performance vary across counties?</li>
<li>Is the performance acceptable in particularly sensitive counties, such as those with known health professional shortages?</li>
</ul>
<p>Before we go further, a few caveats:</p>
<ul>
<li>I am not a COVID expert nor do I pretend to be. This is not a post about how one should monitor a COVID model. This is just an understandable, hypothetical example with data in a publicly available database<sup>6</sup></li>
<li>I do not attempt to demonstrate the best way to evaluate a forecasting model or a holistic approach to model monitoring. Again, this is just a hypothetical motivation to illustrate <em>data management</em> techniques</li>
<li>This may seem like significant over-engineering for the problem at hand. Once again, this is just an example</li>
</ul>
<p>Now, back to work.</p>
<section id="controlled-vocabulary" class="level3">
<h3 class="anchored" data-anchor-id="controlled-vocabulary">Controlled Vocabulary</h3>
<p>To operationalize this analytical goal, we might start out by defining our controlled vocabulary with relevant concepts and contracts.</p>
<p><strong>Units of measurement</strong>:</p>
<ul>
<li><code>ID</code>: Unique identifier of entity with no other semantic meaning
<ul>
<li>Non-null</li>
</ul></li>
<li><code>N</code>: Count
<ul>
<li>Integer</li>
<li>Non-null</li>
</ul></li>
<li><code>DT</code>: Date
<ul>
<li>Date format</li>
</ul></li>
<li><code>IND</code>: Binary indicator
<ul>
<li>Values of 0 or 1</li>
<li>Non-null</li>
</ul></li>
<li><code>PROP</code>: Proportion
<ul>
<li>Numeric</li>
<li>Bounded between 0 and 1</li>
</ul></li>
<li><code>PCT</code>: Percent
<ul>
<li>Numeric</li>
<li>Unlike <code>PROP</code>, <em>not</em> bounded (e.g.&nbsp;think “percent error”)</li>
</ul></li>
<li><code>CD</code>: System-generated character
<ul>
<li>Non-null</li>
</ul></li>
<li><code>NM</code>: Human-readable name</li>
</ul>
<p><strong>Units of observation</strong>:</p>
<ul>
<li><code>COUNTY</code>: US County</li>
<li><code>STATE</code>: US State</li>
<li><code>CASE</code>: Realized case (in practice, we would give this a more specific definition. What defines a case? What sort of confirmation is required? Is the event recorded on the date or realization or the date of reporting?)</li>
<li><code>HOSP</code>: Realized hospitalization (same note as above)</li>
<li><code>DEATH</code>: Realized death (same note as above)</li>
</ul>
<p><strong>Descriptors</strong>:</p>
<ul>
<li><code>ACTL</code>: Actual observed value</li>
<li><code>PRED</code>: Predicted value</li>
<li><code>HPSA</code>: Health Professional Shortage Area (county-level measure)</li>
</ul>
</section>
<section id="data-sources-and-flow" class="level3">
<h3 class="anchored" data-anchor-id="data-sources-and-flow">Data Sources and Flow</h3>
<p>Our goal is to end up with a <code>model_monitor</code> table with one record per <code>observation date</code> and <code>county</code> (same as the <code>actual</code> table). Using the grammar above, we may define the variables we intend to include in our final table:</p>
<ul>
<li><code>CD_(COUNTY|STATE)</code>: Unique county/state identifier (from Census Bureau FIPS codes)</li>
<li><code>NM_(COUNTY|STATE)</code>: Human-readable county/state names-</li>
<li><code>DT_COUNTY</code>: The date a county’s values are observed</li>
<li><code>N_(CASE|HOSP|DEATH)_(ACTL|PRED)_(07|14|21|28)</code>: The actual or predicted number of cases, hospitalizations, or deaths (and, for predictions only, the value of these predictions at 7, 14, 21, and 28 days prior to the day being forecasted)</li>
<li><code>IND_COUNTY_HPSA</code>: Indicator of whether county is considered a shortage area</li>
<li><code>PROP_COUNTY_HPSA</code>: Proportion of population that is underserved in a designated shortage area</li>
</ul>
<p>We will source these fields from four tables:</p>
<ul>
<li><code>actual</code> table
<ul>
<li>sourced from <code>bigquery-public-data</code>.<code>covid19_jhu_csse</code>.<code>summary</code></li>
<li>one record per <code>observation date</code> x <code>county</code></li>
<li>fields for county code, observation date, realized number of cases and deaths</li>
</ul></li>
<li><code>prediction</code> table
<ul>
<li>sourced from <code>bigquery-public-data</code>.<code>covid19_public_forecasts</code>.<code>county_28d_historical</code></li>
<li>one record per <code>date prediction was made</code> x <code>data being predicted</code> x <code>county</code> (initially)</li>
<li>fields for county code, observation date, prediction date, predicted number of cases and deaths</li>
<li>we transform to one record per <code>observation date</code> x <code>county</code> with observations at different time lags represented as separate fields</li>
</ul></li>
<li><code>hpsa</code> table
<ul>
<li>sourced from <code>bigquery-public-data</code>.<code>sdoh_hrsa_shortage_areas</code>.<code>hpsa_primary_care</code></li>
<li>(after some wrangling on our end) one record per <code>county</code> for counties identified as having a shortage</li>
<li>fields for the county code, date of designation, proportion of county under-served</li>
</ul></li>
<li><code>fips</code> table<sup>7</sup>
<ul>
<li>sourced from <code>bigquery-public-data</code>.<code>census_utility</code>.<code>fips_codes_all</code></li>
<li>(after some wrangling) one record per <code>county</code> for each county in the 50 US states</li>
<li>fields for FIPS code (Census Bureau county identifiers), state name, county name</li>
</ul></li>
</ul>
<p>For a conceptual mental map, once all the wrangling and cleaning is done for each of the tables above, we might have psuedocode for the final table that looks something like this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb3-3">  actual </span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb3-5">  predictions <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county, dt_county)</span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb3-7">  hpsa <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county)</span>
<span id="cb3-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb3-9">  fips <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county)</span></code></pre></div>
</div>
<p>But as we’re about to see, <code>dbt</code> allows us to get a bit more complex and elegant.</p>
</section>
</section>
<section id="variable-creation-with-jinja-templating" class="level2">
<h2 class="anchored" data-anchor-id="variable-creation-with-jinja-templating">Variable Creation with Jinja Templating</h2>
<p><code>dbt</code> makes it easy to create typo-free variable names that adhere to our controlled vocabulary by using the Jinja templating language.<sup>8</sup> Jinja brings traditional control-flow elements like conditional statements and loops to make SQL more programmatic. When <code>dbt</code> is executed with <code>dbt run</code>, it first renders this Jinja to standard SQL before sending the query to the database.</p>
<p>Templates, and specifically loops, help write more concise and proof-readable SQL code when deriving a large number of variables with similar logic. For example, below we collapse the raw prediction data (which is represented as one record for <code>each county</code> x <code>each day being prediction</code> x <code>each day a prediction was made</code>) to one record for each county and each day being predicted with different columns containing the numeric value of each prediction of cases, hospitalizations, and deaths at <code>lags</code> (defined in the <code>dbt_project.yml</code> configuration file) of 7, 14, 21, and 28 days prior to the date being predicted.</p>
<p>Ordinarily, deriving these 12 variables (3 measures x 4 lags) would pose significant room for typos in either the code or the variable names, but in this script, the Jinja template of <code>n_case_pred_{{l}}</code> ensures consistency.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb4-1">{{</span>
<span id="cb4-2">    config(</span>
<span id="cb4-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">materialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'incremental'</span>,</span>
<span id="cb4-4">        unique_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span></span>
<span id="cb4-5">    )</span>
<span id="cb4-6">}}</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb4-9">  county_fips_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> forecast_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb4-10">  county_fips_code <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> cd_county,</span>
<span id="cb4-11">  forecast_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> dt_county,</span>
<span id="cb4-12">  {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> var(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lags'</span>) %}</span>
<span id="cb4-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {{l}}, </span>
<span id="cb4-14">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_{{l}},</span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {{l}}, </span>
<span id="cb4-16">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_{{l}},</span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {{l}}, </span>
<span id="cb4-18">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_{{l}}</span>
<span id="cb4-19">  {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">loop</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last</span> %},{% endif %}</span>
<span id="cb4-20">  {% endfor %}</span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bqpred'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred'</span>) }}</span>
<span id="cb4-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> </span>
<span id="cb4-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span>(county_fips_code, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> int64) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">between</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb4-24">  forecast_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">current_date</span>()</span>
<span id="cb4-25">  {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_incremental() %}</span>
<span id="cb4-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> forecast_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (</span>
<span id="cb4-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> dateadd(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(dt_county)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{this}}</span>
<span id="cb4-28">  )</span>
<span id="cb4-29">  {% endif %}</span>
<span id="cb4-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<p>This script renders to the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb5-2">  county_fips_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> forecast_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb5-3">  county_fips_code <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> cd_county,</span>
<span id="cb5-4">  forecast_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> dt_county,</span>
<span id="cb5-5">  </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>, </span>
<span id="cb5-7">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_07,</span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>, </span>
<span id="cb5-9">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_07,</span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>, </span>
<span id="cb5-11">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_07</span>
<span id="cb5-12">  ,</span>
<span id="cb5-13">  </span>
<span id="cb5-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, </span>
<span id="cb5-15">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_14,</span>
<span id="cb5-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, </span>
<span id="cb5-17">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_14,</span>
<span id="cb5-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, </span>
<span id="cb5-19">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_14</span>
<span id="cb5-20">  ,</span>
<span id="cb5-21">  </span>
<span id="cb5-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, </span>
<span id="cb5-23">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_21,</span>
<span id="cb5-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, </span>
<span id="cb5-25">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_21,</span>
<span id="cb5-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, </span>
<span id="cb5-27">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_21</span>
<span id="cb5-28">  ,</span>
<span id="cb5-29">  </span>
<span id="cb5-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, </span>
<span id="cb5-31">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_28,</span>
<span id="cb5-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, </span>
<span id="cb5-33">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_28,</span>
<span id="cb5-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, </span>
<span id="cb5-35">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_28</span>
<span id="cb5-36">  </span>
<span id="cb5-37">  </span>
<span id="cb5-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> `bigquery<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>data`.`covid19_public_forecasts`.`county_28d_historical`</span>
<span id="cb5-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> </span>
<span id="cb5-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span>(county_fips_code, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> int64) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">between</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb5-41">  forecast_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">current_date</span>()</span>
<span id="cb5-42">  </span>
<span id="cb5-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<p>This script and the other three that derive our base tables (<code>actual</code>, <code>prediction</code>, <code>fips</code>, and <code>hpsa</code>) can be found in <a href="https://github.com/emilyriederer/dbt-convo-covid/tree/main/models">the <code>models</code> directory</a> of the repo. After they are individually created, they are combined into the <code>model_monitor_staging</code> table in the relatively uninteresting <a href="https://github.com/emilyriederer/dbt-convo-covid/blob/main/models/model_monitor_staging.sql">script</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb6-1">{{</span>
<span id="cb6-2">    config(</span>
<span id="cb6-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">materialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'incremental'</span>,</span>
<span id="cb6-4">        unique_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span></span>
<span id="cb6-5">    )</span>
<span id="cb6-6">}}</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb6-9">  actual.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb6-10">  prediction.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> (cd_county, dt_county, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span>),</span>
<span id="cb6-11">  fips.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> (cd_county),</span>
<span id="cb6-12">  hspa.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> (cd_county)</span>
<span id="cb6-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span></span>
<span id="cb6-14">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'actual'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> actual</span>
<span id="cb6-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb6-16">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prediction'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> prediction</span>
<span id="cb6-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (dt_county, cd_county)</span>
<span id="cb6-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb6-19">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fips'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> fips</span>
<span id="cb6-20">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county)</span>
<span id="cb6-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb6-22">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hpsa'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> hspa</span>
<span id="cb6-23">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county)</span>
<span id="cb6-24">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_incremental() %}</span>
<span id="cb6-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> dt_county <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (</span>
<span id="cb6-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> dateadd(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(dt_county)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{this}}</span>
<span id="cb6-27">  )</span>
<span id="cb6-28">{% endif %}</span></code></pre></div>
</div>
</section>
<section id="variable-manipulation-with-regex-macros" class="level2">
<h2 class="anchored" data-anchor-id="variable-manipulation-with-regex-macros">Variable Manipulation with Regex Macros</h2>
<p>Of course, it’s not enough to adhere to controlled vocabulary <em>naming</em>. If the actual <em>contracts</em> implied in those names are not upheld, the process is meaningless (or, worse, dangerous). When preparing our final table, we want to explicitly enforce as many of the vocabulary’s promises to be met as possible. This means, for example, ensuring all variables prefixed with <code>n</code> are really integers, <code>dt</code> are truly dates (and not just similarly formatted strings), and <code>ind</code> variables are actually never-null.</p>
<p>This time, we again use Jinja templating along with another dbt feature: custom macros. The final script in our pipeline (<a href="https://github.com/emilyriederer/dbt-convo-covid/blob/main/models/model_monitor.sql"><code>model_monitor</code></a>) uses custom macros <code>get_column_names()</code> to determine all of the column names in the staging table and <code>get_matches()</code> to subset this list for variable names which match regular expressions corresponding to different prefixes.</p>
<p>Then, we iterate over each of these lists to apply certain treatments to each set of columns such as casting <code>cols_n</code> and <code>cols_dt</code> variables to <code>int64</code> and <code>date</code> respectively, rounding <code>cols_prop</code> variables to three decimal places, and coalescing <code>cols_ind</code> variables to be 0 if null.<sup>9</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb7-1">{{</span>
<span id="cb7-2">    config(</span>
<span id="cb7-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">materialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'incremental'</span>,</span>
<span id="cb7-4">        unique_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>,</span>
<span id="cb7-5">        partition_by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb7-6">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"field"</span>: <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"dt_county"</span>,</span>
<span id="cb7-7">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"data_type"</span>: <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"date"</span>,</span>
<span id="cb7-8">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"granularity"</span>: <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"month"</span></span>
<span id="cb7-9">        }</span>
<span id="cb7-10">    )</span>
<span id="cb7-11">}}</span>
<span id="cb7-12"></span>
<span id="cb7-13">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_column_names( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor_staging'</span>) ) %}</span>
<span id="cb7-14">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^n_.*'</span>) %}</span>
<span id="cb7-15">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^dt_.*'</span>) %}</span>
<span id="cb7-16">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^prop_.*'</span>) %}</span>
<span id="cb7-17">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^ind_.*'</span>) %}</span>
<span id="cb7-18">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_oth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cols</span>
<span id="cb7-19">   | reject(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, cols_n)</span>
<span id="cb7-20">   | reject(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, cols_dt)</span>
<span id="cb7-21">   | reject(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, cols_prop)</span>
<span id="cb7-22">   | reject(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, cols_ind) %}</span>
<span id="cb7-23"></span>
<span id="cb7-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb7-25">    </span>
<span id="cb7-26">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_oth %}</span>
<span id="cb7-27">   {{c}},</span>
<span id="cb7-28">   {% endfor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>%}</span>
<span id="cb7-29">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_n %} </span>
<span id="cb7-30">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>({{c}} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> int64) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> {{c}}, </span>
<span id="cb7-31">   {% endfor %}</span>
<span id="cb7-32">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_dt %} </span>
<span id="cb7-33">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">date</span>({{c}}) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> {{c}}, </span>
<span id="cb7-34">   {% endfor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>%}</span>
<span id="cb7-35">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_prop %} </span>
<span id="cb7-36">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>({{c}}, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> {{c}}, </span>
<span id="cb7-37">   {% endfor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>%}</span>
<span id="cb7-38">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_ind %} </span>
<span id="cb7-39">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>({{c}}, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> {{c}} </span>
<span id="cb7-40">     {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">loop</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last</span> %},{% endif %} </span>
<span id="cb7-41">   {% endfor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>%}</span>
<span id="cb7-42">   </span>
<span id="cb7-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor_staging'</span>) }}</span>
<span id="cb7-44"></span>
<span id="cb7-45">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_incremental() %}</span>
<span id="cb7-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> dt_county <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (</span>
<span id="cb7-47">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> dateadd(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(dt_county)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{this}}</span>
<span id="cb7-48">  )</span>
<span id="cb7-49">{% endif %}</span></code></pre></div>
</div>
<p>Note how abstract this query template is. In fact, it completely avoids referencing specific variables in our table.<sup>10</sup> If we should decide to go back and add more fields (for example, actual and predicted recoveries) into our upstream models, they will receive the correct post-processing and validation as long as they are named appropriately.</p>
<p>For a peak under the hood, here’s how those two macros work.</p>
<p>First, <code>get_column_names()</code> simply queries the databases’ built in <a href="https://en.wikipedia.org/wiki/Information_schema"><code>INFORMATION_SCHEMA</code></a><sup>11</sup> to collect all column names of a given table. In the case of the <code>model_monitor.sql</code> script, the table provided is the staging table (<code>model_monitor_staging</code>) which was made in the previous step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb8-1">{% macro get_column_names(relation) %}</span>
<span id="cb8-2"></span>
<span id="cb8-3">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> relation_query %}</span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> column_name</span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> {{relation.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">database</span>}}.{{relation.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">schema</span>}}.INFORMATION_SCHEMA.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COLUMNS</span></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{{relation.identifier}}'</span>;</span>
<span id="cb8-7">{% endset %}</span>
<span id="cb8-8"></span>
<span id="cb8-9">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_query(relation_query) %}</span>
<span id="cb8-10"></span>
<span id="cb8-11">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">execute</span> %}</span>
<span id="cb8-12">{# <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">Return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">the</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">column</span> #}</span>
<span id="cb8-13">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> results_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">columns</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">values</span>() %}</span>
<span id="cb8-14">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> %}</span>
<span id="cb8-15">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> results_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] %}</span>
<span id="cb8-16">{% endif %}</span>
<span id="cb8-17"></span>
<span id="cb8-18">{{ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(results_list) }}</span>
<span id="cb8-19"></span>
<span id="cb8-20">{% endmacro %}</span></code></pre></div>
</div>
<p>Next, the <code>get_matches()</code> macro simply iterates through a list of characters (such as the column names obtained in the previous step) and appends only those that match our regex to the final list that is returned.<sup>12</sup> <sup>13</sup> (Thanks to <a href="https://twitter.com/dsmd4vid">David Sanchez</a> on the <code>dbt</code> Slack community for helping me figure out how to call the <code>re</code> library from within Jinja.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb9-1">{% macro get_matches(input_list, regex) %}</span>
<span id="cb9-2"></span>
<span id="cb9-3">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> results_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] %}</span>
<span id="cb9-4">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> input_list %}</span>
<span id="cb9-5">    {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> modules.re.match(regex, l, modules.re.IGNORECASE) %}</span>
<span id="cb9-6">        {{ results_list.append(l) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">""</span> }}</span>
<span id="cb9-7">    {% endif %}</span>
<span id="cb9-8">{% endfor %}</span>
<span id="cb9-9"></span>
<span id="cb9-10">{{ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(results_list) }}</span>
<span id="cb9-11"></span>
<span id="cb9-12">{% endmacro %}</span></code></pre></div>
</div>
<p>These macros live in the <a href="https://github.com/emilyriederer/dbt-convo-covid/tree/main/macros"><code>macros/</code> directory</a> of the repository.</p>
</section>
<section id="data-validation-with-custom-tests" class="level2">
<h2 class="anchored" data-anchor-id="data-validation-with-custom-tests">Data Validation with Custom Tests</h2>
<p>Of course, not every contract can be made by force without risk of corrupting data. For any that we cannot enforce in their creation, we must rigorously test.</p>
<p><code>dbt</code>’s testing framework allows for testing any data model in the project – not just the final table. This is very useful to intercept errors as soon as they happen instead of trying to backtrack from bad output many steps later. Some tests are built-in but others can be custom written as SQL <code>SELECT</code> statements.</p>
<p>Built-in tests for properties of individual columns include <code>unique</code>, <code>not_null</code>, and <code>relationship</code><sup>14</sup>. These can be implemented in the <code>schema.yml</code> configuration file under the <code>tests</code> key-value pair for each relevant column, and can sometimes be shared across models with the YAML <code>&amp;</code> and <code>*</code> (as shown below with the same <code>basetest</code> checks being applied to the <code>actual</code> and <code>prediction</code> data models) which allows for naming and repeating blocks (think copy-paste). However, even with a relatively small number of tests and columns, its cumbersome and easy to overlook a column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bqhspa</span></span>
<span id="cb10-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> HRSA designated shortage areas</span></span>
<span id="cb10-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bigquery-public-data</span></span>
<span id="cb10-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sdoh_hrsa_shortage_areas</span></span>
<span id="cb10-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> hpsa</span></span>
<span id="cb10-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> hpsa_primary_care</span></span>
<span id="cb10-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bqcensus</span></span>
<span id="cb10-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-13">      Census Bureau mapping of FIPS codes to county and state names</span>
<span id="cb10-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bigquery-public-data</span></span>
<span id="cb10-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> census_utility</span></span>
<span id="cb10-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> fips</span></span>
<span id="cb10-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> fips_codes_all</span></span>
<span id="cb10-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bqjhu</span></span>
<span id="cb10-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-21">      Daily COVID case and death statistics by county </span>
<span id="cb10-22">      from the Johns Hopkins University CSSE</span>
<span id="cb10-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bigquery-public-data</span></span>
<span id="cb10-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> covid19_jhu_csse</span></span>
<span id="cb10-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actual</span></span>
<span id="cb10-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> summary    </span></span>
<span id="cb10-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bqpred</span></span>
<span id="cb10-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Forecasted case and death statistics</span></span>
<span id="cb10-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bigquery-public-data</span></span>
<span id="cb10-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> covid19_public_forecasts</span></span>
<span id="cb10-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pred</span></span>
<span id="cb10-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> county_28d_historical   </span></span>
<span id="cb10-35"></span>
<span id="cb10-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">models</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actual</span></span>
<span id="cb10-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-39">      Actual COVID cases and deaths by county</span>
<span id="cb10-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;basetest</span></span>
<span id="cb10-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> id</span></span>
<span id="cb10-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unique</span></span>
<span id="cb10-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null</span></span>
<span id="cb10-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relationships</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ref('fips')</span></span>
<span id="cb10-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">field</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> prediction</span></span>
<span id="cb10-51"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-52">      Predicted COVID cases and deaths by county</span>
<span id="cb10-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">*basetest</span></span>
<span id="cb10-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> hpsa</span></span>
<span id="cb10-55"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-56">      Counties designated as healthcare shortage areas</span>
<span id="cb10-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-58"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-60"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unique</span></span>
<span id="cb10-61"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null</span></span>
<span id="cb10-62"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relationships</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-63"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ref('fips')</span></span>
<span id="cb10-64"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">field</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-65"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> fips</span></span>
<span id="cb10-66"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-67">      Mapping of county and state names from FIPS codes</span>
<span id="cb10-68"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-69"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-70"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-71"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unique</span></span>
<span id="cb10-72"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null </span></span>
<span id="cb10-73"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> model_monitor_staging</span></span>
<span id="cb10-74"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-75">      Staging table to combine different data sources</span>
<span id="cb10-76"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> model_monitor</span></span>
<span id="cb10-77"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-78">      Final model monitoring table with one row per county x observed day</span>
<span id="cb10-79"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-80"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> id</span></span>
<span id="cb10-81"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-82"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unique</span></span>
<span id="cb10-83"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null</span></span>
<span id="cb10-84"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ind_county_hpsa</span></span>
<span id="cb10-85"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-86"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null</span></span>
<span id="cb10-87"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accepted_values</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-88"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">values</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb10-89"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb10-90"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> prop_county_hpsa</span></span>
<span id="cb10-91"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-92"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbt_utils.not_null_where</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-93"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ind_county_hpsa = 1"</span></span></code></pre></div>
</div>
<p>Instead, developers may also define custom tests as SQL <code>SELECT</code> statements which returns only records that fail the test. Like data models, tests may also use Jinja and macros. This allows us to abstract some of our data validation tests to target all variables with a specific naming convention (and, thus, performance contract) at any arbitrary point in the pipeline.</p>
<p>For example, in the <code>model_monitor</code> data model shown in the last section, we explicitly cast all variables that start with <code>n</code> to be integers. However, before we do this, we should probably ensure that these fields are truly “integer-like”; otherwise, if we are casting values that have unexpected fractional components, we are simply masking inaccurate data.</p>
<p>The following test checks whether the <code>n</code> variables in the <code>model_monitor_staging</code> table (before casting) are sufficiently “integer like”. It first retrieves all fields in this tables, next subsets all field names only to those with <code>n</code> prefixes, and finally uses Jinja to create a SQL script with separate <code>WHERE</code> conditions to check if the absolute difference between each <code>n</code> variable and its value after being cast to an integer is ever greater than 0.01 (which would imply a violation.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb11-1">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_column_names( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor_staging'</span>) ) %}</span>
<span id="cb11-2">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^n_.*'</span>) %}</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>   </span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor_staging'</span>) }}</span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb11-7">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_n %} <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>({{c}} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>({{c}} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> int64)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb11-8">   {% endfor %}</span>
<span id="cb11-9">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FALSE</span></span></code></pre></div>
</div>
<p>We can apply the same trick to testing more conditions on the final table. For example, the following test checks whether every <code>prop</code> variable is truly bounded between 0 and 1 (by returning any times where this is <em>not</em> the case.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb12-1">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_column_names( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>) ) %}</span>
<span id="cb12-2">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^prop_.*'</span>) %}</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>   </span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>) }}</span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb12-7">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_n %} ({{c}} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> {{c}} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb12-8">   {% endfor %}</span>
<span id="cb12-9">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb12-10">   </span></code></pre></div>
</div>
<p>Finally, we may also use tests to ensure our naming conventions are upheld. The following script once again calls the <code>INFORMATION_SCHEMA</code> table (as did our <code>get_column_names()</code> macro) to obtain a table with one record for each column name in the final table. It next uses the <code>regexp_extract()</code> SQL function with capturing groups to create separate columns (<code>l1</code>, <code>l2</code>, <code>l3</code>) for each underscore-delimited section of the naming. Finally, the <code>WHERE</code> conditions filter the output for any stubs that do not match the convention.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> cols <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> (</span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb13-3">  column_name, </span>
<span id="cb13-4">  regexp_extract(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lower</span>(column_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[a-z]+'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> l1,</span>
<span id="cb13-5">  regexp_extract(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lower</span>(column_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[a-z]+_([a-z]+)'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> l2,</span>
<span id="cb13-6">  regexp_extract(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lower</span>(column_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[a-z]+_[a-z]+_([a-z]+)'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> l3</span>
<span id="cb13-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb13-8">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>).<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">database</span> }}.</span>
<span id="cb13-9">    {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>).<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">schema</span> }}.</span>
<span id="cb13-10">      INFORMATION_SCHEMA.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COLUMNS</span></span>
<span id="cb13-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{{ ref('</span>model_monitor<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">').identifier }}'</span></span>
<span id="cb13-12">)</span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb13-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> cols </span>
<span id="cb13-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> </span>
<span id="cb13-17">  l1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nm'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prop'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pct'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ind'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb13-18">  l2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'county'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'case'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hosp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'death'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb13-19">  l3 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hpsa'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'actl'</span>)</span></code></pre></div>
</div>
<p>We could further extend the script above and impose a <em>hierarchy</em> on our controlled vocabulary by adding additional conditions to the <code>WHERE</code> clause. For example, since the <code>HPSA</code> stub only makes sense as a suffix to <code>COUNTY</code> (e.g.&nbsp;there’s no such thing as a health professional shortage area <em>case</em> or <em>death</em>), we could add the additional condition <code>or (l3 = 'hpsa' and not l2 = 'county')</code>.</p>
<p>Similarly, we can query the <code>INFORMATION_SCHEMA</code> to validate that each column has its implied data type.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> cols_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> (</span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">distinct</span> </span>
<span id="cb14-3">  regexp_extract(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lower</span>(column_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[a-z]+'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> stub,</span>
<span id="cb14-4">  data_type</span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb14-6">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>).<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">database</span> }}.</span>
<span id="cb14-7">    {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>).<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">schema</span> }}.</span>
<span id="cb14-8">      INFORMATION_SCHEMA.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COLUMNS</span></span>
<span id="cb14-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{{ ref('</span>model_monitor<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">').identifier }}'</span></span>
<span id="cb14-10">)</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> </span>
<span id="cb14-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> cols_type</span>
<span id="cb14-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> </span>
<span id="cb14-15">    (stub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nm'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> data_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STRING'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb14-16">    (stub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ind'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> data_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'INT64'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb14-17">    (stub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prop'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pct'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> data_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FLOAT64'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span></span>
<span id="cb14-18">    (stub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dt'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> data_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DATE'</span>)</span></code></pre></div>
</div>
<p>As with our <code>model_monitor.sql</code> data model, the beauty of these tests is that they have abstracted away the column names themselves. So, they will continue to test all of the correct pieces of intent regardless of whether columns are added or removed from the table. Like macros, these could also be put into a package so that the same tests could be applied to all tables in a database.</p>
<p>The code for these tests, and a few more similar examples, are located in the <a href="https://github.com/emilyriederer/dbt-convo-covid/tree/main/tests"><code>tests/</code> directory</a> of the repository. They can be run on the command line with the <code>dbt test</code> command.</p>
</section>
<section id="sample-output" class="level2">
<h2 class="anchored" data-anchor-id="sample-output">Sample Output</h2>
<p>To conclude, I show a few top rows of output from the final model monitoring table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> </span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> dbt_emily.model_monitor</span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">limit</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 3%">
<col style="width: 3%">
<col style="width: 6%">
<col style="width: 2%">
<col style="width: 4%">
<col style="width: 2%">
<col style="width: 3%">
<col style="width: 3%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 5%">
<col style="width: 4%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">cd_county</th>
<th style="text-align: left;">dt_county</th>
<th style="text-align: left;">id</th>
<th style="text-align: left;">cd_state</th>
<th style="text-align: left;">nm_county</th>
<th style="text-align: left;">nm_state</th>
<th style="text-align: right;">n_case_actl</th>
<th style="text-align: right;">n_death_actl</th>
<th style="text-align: right;">n_case_pred_07</th>
<th style="text-align: right;">n_hosp_pred_07</th>
<th style="text-align: right;">n_death_pred_07</th>
<th style="text-align: right;">n_case_pred_14</th>
<th style="text-align: right;">n_hosp_pred_14</th>
<th style="text-align: right;">n_death_pred_14</th>
<th style="text-align: right;">n_case_pred_21</th>
<th style="text-align: right;">n_hosp_pred_21</th>
<th style="text-align: right;">n_death_pred_21</th>
<th style="text-align: right;">n_case_pred_28</th>
<th style="text-align: right;">n_hosp_pred_28</th>
<th style="text-align: right;">n_death_pred_28</th>
<th style="text-align: left;">dt_county_hpsa</th>
<th style="text-align: left;">prop_county_hpsa</th>
<th style="text-align: right;">ind_county_hpsa</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2021-08-15</td>
<td style="text-align: left;">2021-08-15 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">8025</td>
<td style="text-align: right;">114</td>
<td style="text-align: right;">1900</td>
<td style="text-align: right;">1355</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">1634</td>
<td style="text-align: right;">1537</td>
<td style="text-align: right;">9</td>
<td style="text-align: right;">1426</td>
<td style="text-align: right;">1561</td>
<td style="text-align: right;">9</td>
<td style="text-align: right;">1260</td>
<td style="text-align: right;">1492</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2021-01-02</td>
<td style="text-align: left;">2021-01-02 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">4268</td>
<td style="text-align: right;">50</td>
<td style="text-align: right;">2323</td>
<td style="text-align: right;">2215</td>
<td style="text-align: right;">29</td>
<td style="text-align: right;">1768</td>
<td style="text-align: right;">1942</td>
<td style="text-align: right;">26</td>
<td style="text-align: right;">1434</td>
<td style="text-align: right;">1625</td>
<td style="text-align: right;">22</td>
<td style="text-align: right;">1214</td>
<td style="text-align: right;">1333</td>
<td style="text-align: right;">18</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2021-06-07</td>
<td style="text-align: left;">2021-06-07 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">7206</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">758</td>
<td style="text-align: right;">514</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">483</td>
<td style="text-align: right;">466</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">308</td>
<td style="text-align: right;">425</td>
<td style="text-align: right;">12</td>
<td style="text-align: right;">196</td>
<td style="text-align: right;">385</td>
<td style="text-align: right;">10</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2020-11-24</td>
<td style="text-align: left;">2020-11-24 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">2661</td>
<td style="text-align: right;">39</td>
<td style="text-align: right;">2668</td>
<td style="text-align: right;">1253</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">2939</td>
<td style="text-align: right;">1375</td>
<td style="text-align: right;">15</td>
<td style="text-align: right;">3200</td>
<td style="text-align: right;">1510</td>
<td style="text-align: right;">17</td>
<td style="text-align: right;">3461</td>
<td style="text-align: right;">1652</td>
<td style="text-align: right;">18</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2021-08-22</td>
<td style="text-align: left;">2021-08-22 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">8311</td>
<td style="text-align: right;">115</td>
<td style="text-align: right;">1833</td>
<td style="text-align: right;">2429</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">1680</td>
<td style="text-align: right;">2740</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">1561</td>
<td style="text-align: right;">2871</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">1461</td>
<td style="text-align: right;">2877</td>
<td style="text-align: right;">14</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="bonus---analysis-prep-with-jinja-templates" class="level2">
<h2 class="anchored" data-anchor-id="bonus---analysis-prep-with-jinja-templates">Bonus - Analysis Prep with Jinja Templates</h2>
<p>Although this post primarily focuses on uses of <code>dbt</code> to help data producers apply controlled vocabularies, dbt also provides an interesting framework for transitioning projects to data consumers with the use of their <a href="https://docs.getdbt.com/docs/building-a-dbt-project/analyses">Analyses</a> feature. Analyses are additional SQL script templates that are not sent to the database to produce tables or views.Instead, running <code>dbt compile</code> simply renders these scripts for use in analyses or BI tools.</p>
<p>For example of an “analysis”, and as another example of templating in action, the following script uses our published table to compute the percent difference between actual observations and each prediction.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb16-2"></span>
<span id="cb16-3">  {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> var(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lags'</span>) %}</span>
<span id="cb16-4">    {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'case'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'death'</span>] %}</span>
<span id="cb16-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb16-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_{{m}}_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb16-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_{{m}}_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_{{m}}_pred_{{l}}) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_{{m}}_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb16-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_{{m}}_pred_{{l}} ,  </span>
<span id="cb16-9">    {% endfor %}</span>
<span id="cb16-10">  {% endfor %}</span>
<span id="cb16-11">  </span>
<span id="cb16-12">  mm.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb16-13">  </span>
<span id="cb16-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> mm</span></code></pre></div>
</div>
<p>It compiles to:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb17-2">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_case_pred_07) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_case_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_case_pred_07 ,  </span>
<span id="cb17-6">    </span>
<span id="cb17-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_death_pred_07) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_death_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-10">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_death_pred_07 ,  </span>
<span id="cb17-11">    </span>
<span id="cb17-12">  </span>
<span id="cb17-13">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_case_pred_14) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_case_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_case_pred_14 ,  </span>
<span id="cb17-17">    </span>
<span id="cb17-18">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_death_pred_14) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_death_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_death_pred_14 ,  </span>
<span id="cb17-22">    </span>
<span id="cb17-23">  </span>
<span id="cb17-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_case_pred_21) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_case_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-27">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_case_pred_21 ,  </span>
<span id="cb17-28">    </span>
<span id="cb17-29">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_death_pred_21) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_death_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-32">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_death_pred_21 ,  </span>
<span id="cb17-33">    </span>
<span id="cb17-34">  </span>
<span id="cb17-35">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_case_pred_28) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_case_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-38">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_case_pred_28 ,  </span>
<span id="cb17-39">    </span>
<span id="cb17-40">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_death_pred_28) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_death_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-43">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_death_pred_28 ,  </span>
<span id="cb17-44">    </span>
<span id="cb17-45">  </span>
<span id="cb17-46">  </span>
<span id="cb17-47">  mm.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb17-48">  </span>
<span id="cb17-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> `sonorous<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wharf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">302611</span>`.`dbt_emily`.`model_monitor` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> mm</span></code></pre></div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Note that, in many cases, the distinction between a data producer and consumer is transient and somewhat arbitrary. In many cases, the same person can be both. Here, I use the terms mostly to differentiate the <em>goal</em> of a specific step of work. By “data producer”, I mean someone engaged in the act of wrangling source data into a form suitable for analysis; by “data consumer”, I mean someone actually using that wrangled data for reporting, analysis, visualization, modeling, etc.↩︎</p></li>
<li id="fn2"><p>As one <em>example</em> – not a prescription for how all such vocabularies should work – one might define that all counts start with <code>N_</code> and are non-negative integers; all identified start with <code>ID_</code> and are non-null↩︎</p></li>
<li id="fn3"><p><code>dbt</code> has adapters for most major databases and engines including Amazon Redshift, Snowflake, and Apache Spark. An up-to-date list is available <a href="https://docs.getdbt.com/docs/available-adapters/">here</a>↩︎</p></li>
<li id="fn4"><p>Some but not all databases natively support local variables, but <code>dbt</code>’s approach works equally well with those that do not↩︎</p></li>
<li id="fn5"><p>One excellent feature of this project is the impressive amount of onboarding and documentation materials↩︎</p></li>
<li id="fn6"><p>In fact, many COVID models were unduly criticized because their purpose was not strictly to have the most accurate forecast possible.↩︎</p></li>
<li id="fn7"><p>Technically, this table should be static, so the same information could be included with <code>dbt</code>’s <a href="https://docs.getdbt.com/docs/building-a-dbt-project/seeds">Seeds</a> feature↩︎</p></li>
<li id="fn8"><p>For another exploration of using Jinja templating to generate SQL, check out this nice <a href="https://multithreaded.stitchfix.com/blog/2017/07/06/one-weird-trick/">blog post</a> from Stitch Fix↩︎</p></li>
<li id="fn9"><p>Ordinarily, we would want to be careful setting null values to 0. We would not want to lie and imply the existence of missing data to nominally uphold a contract. However, this is the correct approach here. Our indicator variables in this case come from tables which only contain the <code>1</code> or “presence” values (e.g.&nbsp;the <code>hpsa</code> relation which provides <code>ind_county_hpsa</code> only has records for counties which are shortage areas) so this is a safe approach.↩︎</p></li>
<li id="fn10"><p>In fact, this could also be a macro, as I introduce before, and shipped in a package to apply across all data models in an analytical database. To make the narrative of this example easier to follow, I leave it as a standard query model.↩︎</p></li>
<li id="fn11"><p>An automatically created table containing metadata such as field names and types for each table in a database↩︎</p></li>
<li id="fn12"><p>For those interested in the nitty gritty details, we must loop here because Jinja does not allow the more compact python list comprehensions. Additionally, Jinja only allows the python <code>append</code> method in display brackets <code>{{}}</code> so the <code>or ''</code> is a trick to silence the output, per <a href="http://svn.python.org/projects/external/Jinja-2.1.1/docs/_build/html/faq.html#isn-t-it-a-terrible-idea-to-put-logic-into-templates">this site</a>.↩︎</p></li>
<li id="fn13"><p>Note that if you have installed dbt previously, this solution might not work for you. The python <code>re</code> library for regular expressions was not enabled inside dbt’s Jinja until the recent release of <a href="https://github.com/fishtown-analytics/dbt/releases/tag/v0.19.0">v0.19.0</a> ↩︎</p></li>
<li id="fn14"><p>The add-on package <code>dbt-utils</code> contains many more common tests such as <code>unique_combination</code>, <code>not_null_where</code>, etc.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>data</category>
  <category>sql</category>
  <category>dbt</category>
  <guid>https://emilyriederer.com/post/convo-dbt/</guid>
  <pubDate>Sat, 06 Feb 2021 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/convo-dbt/featured.png" medium="image" type="image/png" height="61" width="144"/>
</item>
</channel>
</rss>
