<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Emily Riederer</title>
<link>https://emilyriederer.com/#category=rstats</link>
<atom:link href="https://emilyriederer.com/index-rstats.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Sat, 16 Aug 2025 05:00:00 GMT</lastBuildDate>
<item>
  <title>MLOrbs?: MLOps in the database with orbital and dbt</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/orbital-mlops/</link>
  <description><![CDATA[ 





<p>So, you build a great predictive model. <em>Now what</em>?</p>
<p><a href="https://mlops.community/">MLOps</a> is hard. Deploying a model involves different tools, skills, and risks than model development. This dooms some data science projects to die on their creator’s hard drive.</p>
<p>Tools like <code>dbt</code> and <code>SQLMesh</code> entered the scene to solve a similar problem for data analysts. These tools offer an opinionatee frameowrk for organizing multiple related SQL scripts into fully tested, orchestrated, and version conotrolled projects. Data analysts can deliver end-to-end pipelines by applying their existing business context, SQL experience, and database modeling<sup>1</sup> acumen into existing infrastructure, resulting in the rise of “analytics engineering”.</p>
<p>So what is the <code>dbt</code> for data scientists doing MLOps? It turns out, it <em>might</em> just be… <code>dbt</code>! (Enter caveats galore).</p>
<p>Posit’s <a href="https://posit.co/blog/introducing-orbital-for-scikit-learn-pipelines/">recently announced</a> <code>orbital</code> project<sup>2</sup> translates feature enginering and model scoring code training in <code>scikit-learn</code> pipelines (python) and <code>tidymodels</code> workflows into raw SQL code. Similar to <code>dbt</code>, this has the potential to help data scientist’s deploy their own models batch scoring models using existing tools (R, python, SQL) an infrastructure (analytical database) by creating a new table or view in their data warehouse (or pointing <code>duckdb</code> against their data lake!) Coupled with <code>dbt</code>, the combination unlocks baseline “good enough” MLOps practices at no-to-low cost and zero additional infrastructure.</p>
<p>In this post, I explore a workflow for using <code>orbital</code> and <code>dbt</code> for zero-infrastructure deployment of batch models inside of a <code>dbt</code> pipeline. We’ll discuss:</p>
<ul>
<li>what makes MLOps hard</li>
<li>when database/<code>dbt</code>-based deployment might help</li>
<li>a reference implementation and workflow for <code>dbt</code> + <code>orbital</code><sup>3</sup></li>
<li>how preexisting <code>dbt</code> + <code>orbital</code> features address common MLOps pain points</li>
<li>limitations and caveats to the above approach</li>
</ul>
<p>Along the way, we’ll walk through this <a href="https://github.com/emilyriederer/orbital-exploration/tree/main/dbt_orb_demo">demo implementation of a churn prediction model</a> (wow, what a cliche). The demo is fully self-contained with open data and a <code>duckdb</code> backend if you want to pull it down and play along!</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
R and python compatibility
</div>
</div>
<div class="callout-body-container callout-body">
<p>My example in this post uses the <code>orbital</code> python package to translate a <code>scikit-learn</code> pipline to SQL. However, there is also an <code>orbital</code> R package that can translate <code>tidymodels</code>. This post is more about the <em>workflow</em> of preparing and consuming <code>orbital</code> output in <code>dbt</code>, so it’s mostly useful for either language.</p>
</div>
</div>
<section id="mlops-challenges" class="level2">
<h2 class="anchored" data-anchor-id="mlops-challenges">MLOps Challenges</h2>
<p>Predictive modeling requires nuanced, detailed thinking; MLOps requires systems thinking. Success requires an unlikely combination of skills including a deep understanding of the business problem, the modeling workflow, and engineering principles. Some key challenges include:<sup>4</sup></p>
<ul>
<li>Data management &amp; testing
<ul>
<li>Pre-modeling (not exactly MLOps) – test source data upstream of the initial query for better visibility into quality errors or concept drift</li>
<li>Scoring time – preventing scoring on features ranges not seen in training when this poses inordinate risk</li>
</ul></li>
<li>Recreating the development / evaluation environment
<ul>
<li>Feature transformations – ensuring feature availability in prod (no leakage!) and same transformation logic as dev</li>
<li>Environment management – controling package versions and dependencies for scoring code</li>
<li>Versioning – tracking changes to the model over time</li>
</ul></li>
<li>Serving relevance
<ul>
<li>Access – controlling access to intended consumers and delivering to platform they can use</li>
<li>Reliability – ensuring predictions are retrievable on-demand</li>
</ul></li>
<li>Reproducibility / Observability
<ul>
<li>Snapshotting – ability to store past predictions for auditability and performance monitoring</li>
<li>Testing – inserting tests at relevant points in the pipeline, providing observability and automated error handling</li>
<li>Logging – ensuring general system observability of performance, errors, retries, and latency</li>
</ul></li>
</ul>
<p>These technical challenges are exacerbated by cultural factors. In small companies, data teams may be small (or even a data team-of-one) and lack bandwidth for model deployment, engineering-focused skillsets, access to enterprise-grade tools, or stakeholders who would know how to consume model predictions published in bespoke environments. In large companies, modelers may not be allowed access to production systems required for deployment, so handoffs often require prioritization and context sharing across multiple teams.</p>
</section>
<section id="deploying-to-the-database" class="level2">
<h2 class="anchored" data-anchor-id="deploying-to-the-database">Deploying to the database</h2>
<p>For the right use cases, publishing predictions back into an analytical warehouse can be an attractive proposition. This approach is best suited for offline batch scoring, such as models that:</p>
<ul>
<li>drive bulk actions in downstrean CRMs, e.g.&nbsp;marketing segments to drive targeted emails<sup>5</sup></li>
<li>inform human decision-making, e.g.&nbsp;individual predictions that rollup into quarterly sales forecast dashboard</li>
<li>are reincorporated in downstream analysis similar to raw data, e.g.&nbsp;model validation and backtesting, publish a set of propensity scores back into a clinical database</li>
</ul>
<p>In such cases, there are many advantages of having model predictions in the database:</p>
<ul>
<li><strong>Fast &amp; accurate deployment</strong>: SQL-based deployment means you can deploy your data against exactly the same data is was trained on, reducing the risk of feature drift between dev and prod. Similarly, it reduced ongoing headaches of dependency management since SQL is generally a stable language<sup>6</sup> and does not depend on external packages.</li>
<li><strong>Data management tools</strong>: Features, scores – at the end of the day <em>its all just data flow</em>. Having predictions in the database unlocks the ability to leverage on other features integrated in your database like access controls, data quality checks, scheduled updates, incremental loads, and snapshots.</li>
<li><strong>Integration</strong>: Many modern data stacks have their analytical data warehouse connected to many other business-critical systems like dashboards and CRMs (e.g.&nbsp;MailChimp) or are easy to integrate via numerous reverse ETL solutions. Serving predictions to a warehouse is a great first step to syncing them <em>beyond</em> the warehouse in the platforms where they can drive actions like customer contacts.</li>
<li><strong>Development language agnosticism</strong>: For R users tired of the “we don’t put R in production” conversations, SQL provides a generic abstraction layer to “hand off” a model object regardless of how it was developed</li>
</ul>
<p>Conversely, this solution is poorly suited for real-time models where models are scored for single observations on the fly. I share a few more thoughts on when this solution is not well-suited in the final section of this post, Section&nbsp;4.</p>
</section>
<section id="orbital-dbt-pattern" class="level2">
<h2 class="anchored" data-anchor-id="orbital-dbt-pattern"><code>orbital</code> + <code>dbt</code> Pattern</h2>
<p>To demonstrate how an <code>orbital</code> + <code>dbt</code> pattern could work, I’ll walk through <a href="https://github.com/emilyriederer/orbital-exploration/tree/main/dbt_orb_demo">this example project</a>, using <a href="https://github.com/IBM/telco-customer-churn-on-icp4d/blob/master/data/Telco-Customer-Churn.csv">IBM’s telcom churn dataset</a>. The project mostly is mostly structured like a standard <code>dbt</code> project with most of the model training and <code>orbital</code> code in <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/model_dev/train_and_convert.ipynb">this additional notebook</a>.</p>
<p>Churn prediction might be a good candidate for batch scoring. Each month, accounts reaching their resubscription date could be scored and published to a database. Scores might then be used analytical use cases like monitoring or revenue forecasting and operational use cases like ingesting segments into a CRM to email targeted retention offers.</p>
<p>We’ll work up to this final pipeline:</p>
<p><img src="https://emilyriederer.com/post/orbital-mlops/full.png" class="img-fluid"></p>
<p>The point of this exercise is to think about the <code>orbital</code> and <code>dbt</code> architecture, so the model we deploy will be quite uninventive. Pull down some features, one-hot encode, fit a random forest, and do it all in a (<em>gasp</em>) Jupyter notebook. (Please dont’ do this.)</p>
<section id="sec-design" class="level3">
<h3 class="anchored" data-anchor-id="sec-design">Key Features and Design Choices</h3>
<p>If you want the TLDR, I’ll briefly explain the key design choices for this pipeline:</p>
<ul>
<li>Initial Data Preparation
<ul>
<li>Set up <code>dbt test</code>s to test sources before joining your feature table. This can better catch dropout from failed joins, newly emerging encoded categories, etc. Consider what additional filters you want to put in downstream tables (Better to “alert and allow” and “block until fixed”?)</li>
<li>Prepare feature separately (for normalization) but join different features in database to take advantage of database processing</li>
<li>Consider adding random number in training table for reproducible test/train split (this has to be linked to hash or something about the entities your randomizing to ensure reproducibility without regard to ordering of data samples)</li>
</ul></li>
<li>Feature Engineering
<ul>
<li>Create separate <code>scikit-learn</code> pipelines and/or <code>tidymodels</code> workflows for the feature engineering and training steps so you can render these as separate queries. This can enable better data testing and make queries more efficient so <code>orbital</code> does not repeat the feature transformation logic</li>
<li>Use test-driven development to update <code>dbt</code> data tests as you develop. For example, encoding a categorical? Immediately add an upstream test to check for previously unseen values.</li>
</ul></li>
<li>Preparing <code>orbital</code> SQL (supported by <code>sqlglot</code>)
<ul>
<li>Add back your identifier column to the query so predictions are joinable</li>
<li>Add a model version field into the query for better context to users</li>
<li>Change placeholder table to a <code>dbt</code> <code>ref()</code></li>
<li>Rename columns to remove <code>.</code>s so you do not have to always quote in queries</li>
<li>Output nicely formatted version for readability</li>
</ul></li>
<li>Deploying as a model
<ul>
<li>Consider carefully whether to make a table, view, or macro depending on your specific database, query latency, and desire to score bespoke populations</li>
</ul></li>
<li>Observability, logging, and error handling
<ul>
<li>Use <code>dbt snapshots</code> to save timestamped past predictions and feature values if these can change over time. This improves auditability and future analysis</li>
<li>Execute tests to <code>--store-failures</code> to detect changes in your data that might require model retraining or additional error handling</li>
<li>Check out <code>dbt</code> packages like <a href="https://hub.getdbt.com/elementary-data/elementary/latest/">elementary</a> to log more aspects of the model run process</li>
</ul></li>
</ul>
</section>
<section id="set-up" class="level3">
<h3 class="anchored" data-anchor-id="set-up">Set-Up</h3>
<p>The sample IBM data is provided as “one big table”, so I <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/setup/prep-seeds.py">break things up</a> to look a bit more like normalized database data representing subscription information, billing information, demographics, and churn targets. I also add a few columns to simulate different months, censor data I want to pretend is in the future, and add a few data errors for fun.</p>
<p>Here’s a preview of the resulting tables, connected by a <code>customer_id</code> primary key:</p>
<div id="ace4cd8c" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev.duckdb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> con:</span>
<span id="cb1-5"></span>
<span id="cb1-6">    df_serv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'serv'</span>).pl()</span>
<span id="cb1-7">    df_bill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill'</span>).pl()</span>
<span id="cb1-8">    df_demo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo'</span>).pl()</span>
<span id="cb1-9">    df_chrn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chrn'</span>).pl()</span></code></pre></div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Services Enrolled</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Billing Information</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Demographics</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Churn</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div id="018c10f8" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df_serv.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 7043
Columns: 12
$ customer_id        &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ tenure             &lt;i32&gt; 1, 34, 2, 45, 2, 8, 22, 10, 28, 62
$ phone_service      &lt;str&gt; 'No', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'Yes'
$ multiple_lines     &lt;str&gt; 'No phone service', 'No', 'No', 'No phone service', 'No', 'Yes', 'Yes', 'No phone service', 'Yes', 'No'
$ internet_service   &lt;str&gt; 'DSL', 'DSL', 'DSL', 'DSL', 'Fiber optic', 'Fiber optic', 'Fiber optic', 'DSL', 'Fiber optic', 'DSL'
$ online_security    &lt;str&gt; 'No', 'Yes', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'No', 'Yes'
$ online_backup      &lt;str&gt; 'Yes', 'No', 'Yes', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes'
$ device_protection  &lt;str&gt; 'No', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No', 'No', 'Yes', 'No'
$ tech_support       &lt;str&gt; 'No', 'No', 'No', 'Yes', 'No', 'No', 'No', 'No', 'Yes', 'No'
$ streaming_tv       &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'Yes', 'Yes', 'No', 'Yes', 'No'
$ streaming_movies   &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes', 'No'
$ dt_renewal        &lt;date&gt; 2025-07-01, 2025-07-01, 2025-07-01, 2025-07-01, 2025-07-01, 2025-07-01, 2025-08-01, 2025-07-01, 2025-07-01, 2025-07-01
</code></pre>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div id="c3c97fd5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df_bill.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 7043
Columns: 6
$ customer_id       &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ contract          &lt;str&gt; 'Month-to-month', 'One year', 'Month-to-month', 'One year', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'One year'
$ paperless_billing &lt;str&gt; 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No'
$ payment_method    &lt;str&gt; 'Electronic check', 'Mailed check', 'Mailed check', 'Bank transfer (automatic)', 'Electronic check', 'Electronic check', 'Credit card (automatic)', 'Mailed check', 'Electronic check', 'Bank transfer (automatic)'
$ monthly_charges   &lt;f64&gt; 29.85, 56.95, 53.85, 42.3, 70.7, 99.65, 89.1, 29.75, 104.8, 56.15
$ total_charges     &lt;f64&gt; 29.85, 1889.5, 108.15, 1840.75, 151.65, 820.5, 1949.4, 301.9, 3046.05, 3487.95
</code></pre>
</div>
</div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="795b373c" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df_demo.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 7043
Columns: 5
$ customer_id    &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ gender         &lt;str&gt; 'Female', 'Male', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female', 'Female', 'Male'
$ senior_citizen &lt;i32&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
$ partner        &lt;str&gt; 'Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'Yes', 'No'
$ dependents     &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes'
</code></pre>
</div>
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div id="d80ba20a" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df_chrn.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 7043
Columns: 2
$ customer_id &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ churn       &lt;str&gt; 'No', 'No', 'Yes', 'No', 'Yes', 'Yes', 'No', 'No', 'Yes', 'No'
</code></pre>
</div>
</div>
</div>
</div>
</div>
<p>Ultimately, these are saved as <code>seeds</code> in the dbt project as a lightweight way to ingest small CSVs; in reality, they would be my <code>sources</code> flowing into my data warehouse from other production sources.</p>
</section>
<section id="features-training" class="level3">
<h3 class="anchored" data-anchor-id="features-training">Features &amp; Training</h3>
<p>Feature preparation and training are the heart of where <code>orbital</code> fits into our pipelines. I recommend doing these steps one-at-a-time and explain them similarly. However, since the code is closely coupled, I’ll provide it at once for reference. The combination of feature engineering and model training steps look like this:</p>
<div id="0cbc36d3" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Pipeline to orbital</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build pipeline(s)</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## feature pipeline does OneHotEncoding on all string columns (all are low/known cardinality)</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## orbital can create some very verbose variable names (for uniqueness) so we clean those up some</span></span>
<span id="cb10-5">cols_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.select( cs.string() ).columns</span>
<span id="cb10-6">onho_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'oh'</span>, OneHotEncoder(sparse_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), cols_str)</span>
<span id="cb10-7">ppl_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([</span>
<span id="cb10-8">  (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encoder"</span>, ColumnTransformer([onho_enc], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passthrough'</span>))</span>
<span id="cb10-9">]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polars"</span>)</span>
<span id="cb10-10">X_tran <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ppl_feat.fit_transform(X, y)</span>
<span id="cb10-11">X_tran.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [c.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'('</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">')'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> X_tran.columns]</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## training pipeline fits actual random forest model</span></span>
<span id="cb10-14">ppl_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([</span>
<span id="cb10-15">  (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prep"</span>, ColumnTransformer([], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passthrough'</span>)),</span>
<span id="cb10-16">  (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pred"</span>, RandomForestClassifier(max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_estimators<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb10-17">])</span>
<span id="cb10-18">ppl_pred.fit(X_tran, y)</span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to orbital</span></span>
<span id="cb10-21"></span>
<span id="cb10-22">tbl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TBL_REF"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># placeholder replaced in cleaning</span></span>
<span id="cb10-23"></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## creating mapping of source data types to orbital types </span></span>
<span id="cb10-25">type_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb10-26">    pl.String:orbital.types.StringColumnType(),</span>
<span id="cb10-27">    pl.Int32:orbital.types.Int32ColumnType(),</span>
<span id="cb10-28">    pl.Float64:orbital.types.DoubleColumnType()</span>
<span id="cb10-29">}</span>
<span id="cb10-30">dict_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {e: type_map.get(t) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> e, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(X.columns, X.dtypes)}</span>
<span id="cb10-31">dict_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {e: type_map.get(t) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> e, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(X_tran.columns, X_tran.dtypes)}</span>
<span id="cb10-32"></span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## features</span></span>
<span id="cb10-34">orb_ppl_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orbital.parse_pipeline(ppl_feat, features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dict_feat)</span>
<span id="cb10-35">sql_raw_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orbital.export_sql(tbl, orb_ppl_feat, dialect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duckdb"</span>)</span>
<span id="cb10-36"></span>
<span id="cb10-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## scoring</span></span>
<span id="cb10-38">orb_ppl_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orbital.parse_pipeline(ppl_pred, features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dict_pred)</span>
<span id="cb10-39">sql_raw_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orbital.export_sql(tbl, orb_ppl_pred, dialect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duckdb"</span>)</span></code></pre></div>
</details>
</div>
<section id="features" class="level4">
<h4 class="anchored" data-anchor-id="features">Features</h4>
<p>Feature prep is the first use case for integrating <code>orbital</code> code in our <code>dbt</code> pipeline. Ultimately, we want to be sure our production features are identical to our development features. To do this, we make three design choices:</p>
<ul>
<li>Prepare raw features in the database (pre-joining) to take advantage of database-grade computational power and have preprocessing “published” to fuel different model experimentation
<ul>
<li>Adding a <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/models/churn_model/raw_feat.sql">model <code>raw_feat</code></a> to my dbt project that simply pre-joins relevant sources</li>
</ul></li>
<li>Make separate <code>scikit-learn</code> pipelines and <code>orbital</code> SQL output for feature and training steps for separate testing and faster scoring (Otherwise, <code>orbital</code>-generated SQL sometimes reproduces feature transformation logic at <em>every use</em> of the feature versus doing it once upfront. Depending one your database’s optimizer, it may or may not be smart enough to reorder this at runtime.)
<ul>
<li>In python, fit the <code>ppl_feat</code> pipeline (<a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/model_dev/train_and_convert.ipynb">cell 4</a>) which only fits the feature transformation steps</li>
<li>Retrieve the resulting SQL code from <code>orbital</code> and clean it up (discussed below)</li>
<li>Deploy it by writing the SQL back to the <code>models/</code> folder as a <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/models/churn_model/prep_feat.sql">model <code>prep_feat</code></a></li>
</ul></li>
<li>Noting the assumptions we are making about our data while engineering features and pushing those tests upstream to the source in the database
<ul>
<li>For example, one-hot encoding assumes the categories won’t change. So, since we are one-hot encoding the <code>internet_service</code> field from source, we can update our <code>schema.yml</code> file to <a href="https://github.com/emilyriederer/orbital-exploration/blob/b63cf4732cc8a440821ed96339bdb1655e9b9bb5/dbt_orb_demo/seeds/schema.yml#L33">add an <code>accepted_values</code> data test for that field</a> to warn us if our model is beginning to see data is was not prepared to handle<sup>7</sup>. Subsequent data models could, in theory, route these cases away from our scoring table and into a separate logging table for separate handling.</li>
</ul></li>
</ul>
<p>This way, we can deploy our exact features to the database separately from our final model for additional data validation. We can also run our dbt tests before consuming the results to ensure the assumptions that went into feature creation still hold.</p>
<p>Again, because we are using <code>dbt</code>, we can take advtange of related tools. Using the VS Code extension, we can examine our database’s DAG so far and see that our data test was correctly placed on the source:</p>
<p><img src="https://emilyriederer.com/post/orbital-mlops/source-test.png" class="img-fluid"></p>
</section>
<section id="training" class="level4">
<h4 class="anchored" data-anchor-id="training">Training</h4>
<p>Model training follows similarly. We create another sci-kit-learn pipline <code>ppl_pred</code> and train it (<a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/model_dev/train_and_convert.ipynb">cell 4</a>). This time, we just use the preprocessed data that was <code>fit_transform</code>ed in the prior step. Alternatively, we could re-retrieve our newly prepared features from the database.</p>
<p>In theory, this is where we’d also do a lot of model evaluation and iteration where being <em>outside</em> of the database in a joy. I don’t do this since getting a good model is not my goal.</p>
</section>
</section>
<section id="sql-cleanup" class="level3">
<h3 class="anchored" data-anchor-id="sql-cleanup">SQL Cleanup</h3>
<p>While <code>orbital</code> does a lot of heavy lifting, the SQL it produces is not perfect:</p>
<ul>
<li>It does not <code>SELECT</code> any metadata or identifier columns, rendering your predictions impossible to join to other data sources. Inserting this column requires care because sometimes the upstream data is being queried within the main query and other times it is queried in a CTE</li>
<li>Its hard to get <code>orbital</code> to query from a <code>ref()</code> that plays nice with <code>dbt</code>’s Jinja because <code>orbital</code> is rigorous about quoting table and column names. So, it’s easier to put a placeholder table name and edit it in post-processing.</li>
<li>It uses somewhat long and bulky variable names that reflect <code>scikit-learn</code> internals, including <code>.</code>s in column names which can reduce readability and requires quoting since <code>.</code> usually means something different in SQL</li>
<li>It includes positive predictions, negative predictions, and labels which may be excessive. I’ve never wanted anything more than the positive predictions</li>
<li>It’s not formatted which shouldn’t matter but will wrankle anyone who has ever worked with SQL</li>
</ul>
<p>To mitigate these multiple issues, <code>sqlglot</code> makes it easy to further parse the query. <code>sqlglot</code> is a package that allows you to turn any SQL script into an AST for ease of programatic modification. I defined a <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/model_dev/clean_sql.py">helper function</a> with <code>sqlglot</code> to fix all of the above.</p>
<div id="48c78f73" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Cleaning function definition</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlglot</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlglot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> parse_one, exp </span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> clean_sql(sql_raw: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, </span>
<span id="cb11-5">              tbl_ref: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, </span>
<span id="cb11-6">              model_version: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb11-7">              col_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, </span>
<span id="cb11-8">              cols_renm: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output_probability.1'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred'</span>, </span>
<span id="cb11-9">                                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output_probability.0'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>, </span>
<span id="cb11-10">                                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output_label'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>},</span>
<span id="cb11-11">              ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb11-12"></span>
<span id="cb11-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Opinionated clean-up of SQL returned by orbital</span></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function executes the following transformations:</span></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Rename desired columns such as the prediction column (per result of cols_renm)</span></span>
<span id="cb11-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Remove unwanted variables (those being "renamed" to "0")</span></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Add back ID variable for joining predictions to other datasets </span></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Fix table reference from default TBL_REF to a specific dbt model reference</span></span>
<span id="cb11-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Reformats SQL for improved readability</span></span>
<span id="cb11-21"></span>
<span id="cb11-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    sql_raw: SQL string provided by `orbital`</span></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tbl_ref: Name of dbt model to be referenced in query's FROM clause</span></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    model_version: Version number of model to be added as own column. Defaults to None to add no column</span></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    col_id: Name of the column representing the unique identifier of entities to be predicted</span></span>
<span id="cb11-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cols_renm: Dictionary of {default_name: desired_name} to rename fields</span></span>
<span id="cb11-29"></span>
<span id="cb11-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb11-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb11-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    str</span></span>
<span id="cb11-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A formatted and updated SQL query</span></span>
<span id="cb11-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-35"></span>
<span id="cb11-36"></span>
<span id="cb11-37">    ast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse_one(sql_raw)</span>
<span id="cb11-38">    </span>
<span id="cb11-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ast.expressions:</span>
<span id="cb11-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rename prediction column</span></span>
<span id="cb11-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cols_renm.get(e.alias) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>:</span>
<span id="cb11-42">            e.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(arg_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'this'</span>,value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb11-43">            e.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(arg_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alias'</span>,value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb11-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> e.alias <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_renm.keys():</span>
<span id="cb11-45">            e.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(arg_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alias'</span>,value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cols_renm.get(e.alias))</span>
<span id="cb11-46">    </span>
<span id="cb11-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add back a variable for reference (typically like an ID for joining to other tables)</span></span>
<span id="cb11-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is tricky because sometimes orbital uses CTEs and other times it doesn't;</span></span>
<span id="cb11-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generally, we need to get the identifier inside the CTE if it exists</span></span>
<span id="cb11-50">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp.Column(this<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exp.to_identifier(col_id))</span>
<span id="cb11-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ast.find(exp.CTE) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb11-52">        cte_select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.find(exp.CTE).this</span>
<span id="cb11-53">        cte_select.expressions.append(col)</span>
<span id="cb11-54">    ast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.select(col_id)</span>
<span id="cb11-55"></span>
<span id="cb11-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add model version to outer query if desired</span></span>
<span id="cb11-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> model_version <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb11-58"></span>
<span id="cb11-59">        col_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp.Alias(</span>
<span id="cb11-60">            this<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exp.Literal.string(model_version), </span>
<span id="cb11-61">            alias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_version"</span>)</span>
<span id="cb11-62">        ast.find(exp.Select).expressions.append(col_version)</span>
<span id="cb11-63">    </span>
<span id="cb11-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pretty print</span></span>
<span id="cb11-65">    sql_fmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlglot.transpile(ast.sql(), </span>
<span id="cb11-66">                                write<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duckdb"</span>, </span>
<span id="cb11-67">                                identify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb11-68">                                pretty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-69">    </span>
<span id="cb11-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change out table to dbt reference</span></span>
<span id="cb11-71">    ref_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">{{{{</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ref('</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tbl_ref<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">')</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">}}}}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-72">    sql_fnl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sql_fmt.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"TBL_REF"'</span>, ref_str) </span>
<span id="cb11-73">  </span>
<span id="cb11-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sql_fnl</span></code></pre></div>
</details>
</div>
<p>I run the SQL generated from both <code>ppl_feat</code> and <code>ppl_rafo</code> through this function before writing them to <code>models/churn_model/prep_feat.sql</code> and <code>models/churn_model/pred_churn.sql</code> in my <a href="https://github.com/emilyriederer/orbital-exploration/tree/main/dbt_orb_demo/models/churn_model"><code>dbt</code> <code>models/</code> directory</a>.</p>
<p>This establishes our core model deployment pipeline:</p>
<p><img src="https://emilyriederer.com/post/orbital-mlops/core-pipe.png" class="img-fluid"></p>
</section>
<section id="scoring-preserving-and-activating-predictions" class="level3">
<h3 class="anchored" data-anchor-id="scoring-preserving-and-activating-predictions">Scoring, Preserving, and Activating Predictions</h3>
<p>We now have a table in our database that has our churn model predictions! Here is where we can begin to utilize the full benefit of the data management tools that <code>dbt</code> has built in.</p>
<p>Before scoring, we can run our <code>dbt test</code> to ensure that our features are stable and valid.</p>
<p>For scoring, depending on our use case we can set the table materialization to be a table (rebuilt on a schedule) or a view (generated on the fly for a specific population).</p>
<p>For archiving past scores, we can update our <a href="https://github.com/emilyriederer/orbital-exploration/blob/b63cf4732cc8a440821ed96339bdb1655e9b9bb5/dbt_orb_demo/dbt_project.yml#L35">dbt-project.yml to include snapshotting</a> our predictions table. This means even if we publish our tables as a view, we could schedule a call to <code>dbt snapshot</code> on a regular basis to record a timestamped record of what our scores were at any given point in time. This could be useful for model monitoring or auditiability. For example, if we are using our churn model to segment a marketing campaign, we might need these scores later to determine who got what treatment in the campaign.</p>
<p>For staging analysis, we can use <code>dbt</code> <code>analyses</code> to <a href="https://github.com/emilyriederer/orbital-exploration/blob/main/dbt_orb_demo/analyses/churn_model_perf.sql">render the scripts</a> that might be needed to conduct model monitoring (e.g.&nbsp;merging past scores with observed targets.)</p>
<p>We can see examples of these different artifacts branching off of our DAG:</p>
<p><img src="https://emilyriederer.com/post/orbital-mlops/artifacts.png" class="img-fluid"></p>
</section>
<section id="datamart-preview" class="level3">
<h3 class="anchored" data-anchor-id="datamart-preview">Datamart Preview</h3>
<p>Below, we can tour the resulting datasets:</p>
<div id="4315c981" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev.duckdb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> con:</span>
<span id="cb12-5"></span>
<span id="cb12-6">    df_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'raw_feat'</span>).pl()</span>
<span id="cb12-7">    df_prep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prep_feat'</span>).pl()</span>
<span id="cb12-8">    df_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred_churn'</span>).pl()</span>
<span id="cb12-9">    df_snap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main_snapshots.pred_churn_snapshot'</span>).pl()</span>
<span id="cb12-10">    df_fail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main_audit.accepted_values_serv_internet_service__DSL__Fiber_optic__No'</span>).pl()</span></code></pre></div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Raw Training Data</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Prepared Features</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Predictions</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Snapshots</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-5-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-5" aria-controls="tabset-2-5" aria-selected="false">Failures</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div id="fad7bf70" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df_feat.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6944
Columns: 21
$ customer_id       &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ cat_train_test    &lt;str&gt; 'Train', 'Train', 'Train', 'Train', 'Train', 'Train', 'Train', 'Train', 'Train', 'Train'
$ tenure            &lt;i32&gt; 1, 34, 2, 45, 2, 8, 22, 10, 28, 62
$ phone_service     &lt;str&gt; 'No', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'Yes'
$ multiple_lines    &lt;str&gt; 'No phone service', 'No', 'No', 'No phone service', 'No', 'Yes', 'Yes', 'No phone service', 'Yes', 'No'
$ internet_service  &lt;str&gt; 'DSL', 'DSL', 'DSL', 'DSL', 'Fiber optic', 'Fiber optic', 'Fiber optic', 'DSL', 'Fiber optic', 'DSL'
$ online_security   &lt;str&gt; 'No', 'Yes', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'No', 'Yes'
$ online_backup     &lt;str&gt; 'Yes', 'No', 'Yes', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes'
$ device_protection &lt;str&gt; 'No', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No', 'No', 'Yes', 'No'
$ tech_support      &lt;str&gt; 'No', 'No', 'No', 'Yes', 'No', 'No', 'No', 'No', 'Yes', 'No'
$ streaming_tv      &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'Yes', 'Yes', 'No', 'Yes', 'No'
$ streaming_movies  &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes', 'No'
$ gender            &lt;str&gt; 'Female', 'Male', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female', 'Female', 'Male'
$ senior_citizen    &lt;i32&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
$ partner           &lt;str&gt; 'Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'Yes', 'No'
$ dependents        &lt;str&gt; 'No', 'No', 'No', 'No', 'No', 'No', 'Yes', 'No', 'No', 'Yes'
$ contract          &lt;str&gt; 'Month-to-month', 'One year', 'Month-to-month', 'One year', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'Month-to-month', 'One year'
$ paperless_billing &lt;str&gt; 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No'
$ payment_method    &lt;str&gt; 'Electronic check', 'Mailed check', 'Mailed check', 'Bank transfer (automatic)', 'Electronic check', 'Electronic check', 'Credit card (automatic)', 'Mailed check', 'Electronic check', 'Bank transfer (automatic)'
$ monthly_charges   &lt;f64&gt; 29.85, 56.95, 53.85, 42.3, 70.7, 99.65, 89.1, 29.75, 104.8, 56.15
$ total_charges     &lt;f64&gt; 29.85, 1889.5, 108.15, 1840.75, 151.65, 820.5, 1949.4, 301.9, 3046.05, 3487.95
</code></pre>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div id="3783234a" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df_prep.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6944
Columns: 47
$ oh__phone_service_No                       &lt;f64&gt; 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0
$ oh__phone_service_Yes                      &lt;f64&gt; 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0
$ oh__multiple_lines_No                      &lt;f64&gt; 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0
$ oh__multiple_lines_No_phone_service        &lt;f64&gt; 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0
$ oh__multiple_lines_Yes                     &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__internet_service_DSL                   &lt;f64&gt; 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0
$ oh__internet_service_Fiber_optic           &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__internet_service_No                    &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__online_security_No                     &lt;f64&gt; 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__online_security_No_internet_service    &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__online_security_Yes                    &lt;f64&gt; 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0
$ oh__online_backup_No                       &lt;f64&gt; 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0
$ oh__online_backup_No_internet_service      &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__online_backup_Yes                      &lt;f64&gt; 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0
$ oh__device_protection_No                   &lt;f64&gt; 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0
$ oh__device_protection_No_internet_service  &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__device_protection_Yes                  &lt;f64&gt; 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0
$ oh__tech_support_No                        &lt;f64&gt; 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0
$ oh__tech_support_No_internet_service       &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__tech_support_Yes                       &lt;f64&gt; 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0
$ oh__streaming_tv_No                        &lt;f64&gt; 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0
$ oh__streaming_tv_No_internet_service       &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__streaming_tv_Yes                       &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__streaming_movies_No                    &lt;f64&gt; 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0
$ oh__streaming_movies_No_internet_service   &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__streaming_movies_Yes                   &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0
$ oh__gender_Female                          &lt;f64&gt; 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0
$ oh__gender_Male                            &lt;f64&gt; 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0
$ oh__partner_No                             &lt;f64&gt; 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0
$ oh__partner_Yes                            &lt;f64&gt; 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0
$ oh__dependents_No                          &lt;f64&gt; 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0
$ oh__dependents_Yes                         &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0
$ oh__contract_Month_to_month                &lt;f64&gt; 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0
$ oh__contract_One_year                      &lt;f64&gt; 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0
$ oh__contract_Two_year                      &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ oh__paperless_billing_No                   &lt;f64&gt; 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0
$ oh__paperless_billing_Yes                  &lt;f64&gt; 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0
$ oh__payment_method_Bank_transfer_automatic &lt;f64&gt; 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0
$ oh__payment_method_Credit_card_automatic   &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0
$ oh__payment_method_Electronic_check        &lt;f64&gt; 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0
$ oh__payment_method_Mailed_check            &lt;f64&gt; 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0
$ remainder__tenure                          &lt;f64&gt; 1.0, 34.0, 2.0, 45.0, 2.0, 8.0, 22.0, 10.0, 28.0, 62.0
$ remainder__senior_citizen                  &lt;f64&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
$ remainder__monthly_charges                 &lt;f64&gt; 29.85, 56.95, 53.85, 42.3, 70.7, 99.65, 89.1, 29.75, 104.8, 56.15
$ remainder__total_charges                   &lt;f64&gt; 29.85, 1889.5, 108.15, 1840.75, 151.65, 820.5, 1949.4, 301.9, 3046.05, 3487.95
$ customer_id                                &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ model_version                              &lt;str&gt; '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0'
</code></pre>
</div>
</div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div id="95bd4553" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df_pred.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6944
Columns: 3
$ pred          &lt;f64&gt; 0.4350639304611832, 0.14068829294410534, 0.34994459204608575, 0.10898763570003211, 0.5811184463091195, 0.5483232741244137, 0.4043196897255257, 0.311830934981117, 0.3962726652389392, 0.1372128768125549
$ customer_id   &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ model_version &lt;str&gt; '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0'
</code></pre>
</div>
</div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<p>Score versioned and timestamped predictions from snapshots for auditability.</p>
<div id="9ad523d9" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">df_snap.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6944
Columns: 7
$ pred                    &lt;f64&gt; 0.4350639304611832, 0.14068829294410534, 0.34994459204608575, 0.10898763570003211, 0.5811184463091195, 0.5483232741244137, 0.4043196897255257, 0.311830934981117, 0.3962726652389392, 0.1372128768125549
$ customer_id             &lt;str&gt; '7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU', '9305-CDSKC', '1452-KIOVK', '6713-OKOMC', '7892-POOKP', '6388-TABGU'
$ model_version           &lt;str&gt; '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0', '1.0'
$ dbt_scd_id              &lt;str&gt; 'c4671964ba707c90a41d74f6f2ef75b7', '7dc40efa71bcee4795c7f54b3b5bc783', 'b05d4425f5d07106f1f2f2e782461f44', '3b919e27eb23ba54e200462af172e7da', 'eb6117ba3156a771b0e02e5e7bc644ab', 'ddae31e6abdabdd771ea4bbd1072fe55', 'aa7fe49fcbb5a937b44f7ac589b3ff34', 'da7eb2655934862105e8782e40ca5eb5', '882f945d0e265290e5976d4c8d04679e', '72f44f68e12a53baaf1d9ddd2469a616'
$ dbt_updated_at &lt;datetime[μs]&gt; 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000
$ dbt_valid_from &lt;datetime[μs]&gt; 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000, 2025-08-15 19:22:45.830000
$ dbt_valid_to   &lt;datetime[μs]&gt; 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00, 9999-12-31 00:00:00
</code></pre>
</div>
</div>
</div>
<div id="tabset-2-5" class="tab-pane" aria-labelledby="tabset-2-5-tab">
<p>What happens when the <code>internet_service</code> field is recoded in production data from “Fiber optic” to “Fiber” after training? If we are checking for <code>accepted_values</code>, we capture that change in our failures table before scoring on bad data!</p>
<div id="ad60aa36" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">df_fail.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1
Columns: 2
$ value_field &lt;str&gt; 'Fiber'
$ n_records   &lt;i64&gt; 48
</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="dreaming-bigger" class="level3">
<h3 class="anchored" data-anchor-id="dreaming-bigger">Dreaming bigger</h3>
<p>This demo shows just <code>orbital</code> + <code>dbt</code>, but that’s just the beginning. Treating the whole MLOps process just like data processing means you can benefit from a wide range of integrated tools and capabilities, e.g.:</p>
<ul>
<li>data ingestion
<ul>
<li>retrieve training data for APIs with <code>dlt</code></li>
<li>ingest features from flatfiles on blob sources via the <code>dbt</code> <a href="https://hub.getdbt.com/dbt-labs/dbt_external_tables/latest/">external-tables</a> package</li>
</ul></li>
<li>better testing with dbt packages such as <a href="https://hub.getdbt.com/metaplane/dbt_expectations/latest/"><code>dbt-expectatons</code></a> (from Great Expectations)</li>
<li>logging and observability
<ul>
<li>snapshot features table as well as predictions table</li>
<li>use <code>dbt</code> packages like <a href="https://hub.getdbt.com/elementary-data/elementary/latest/">elementary</a> to write more run metadata to your warehouse</li>
</ul></li>
<li>orchestration with <code>Dagster</code>
<ul>
<li>unfurl your local <code>dbt</code> DAG into a broader pipeline</li>
<li>trigger more model-adjacent tasks from refitting, monitoring, etc.</li>
</ul></li>
<li>documentions with <code>dbt docs</code> (which can be <a href="https://github.com/emilyriederer/dbt_duckdb_quarto">enhanced with Quarto</a>)</li>
<li>reverse ETL with tools like HighTouch or Census to easily sync analytical data models into production systems like CRMs</li>
</ul>
</section>
</section>
<section id="sec-limitations" class="level2">
<h2 class="anchored" data-anchor-id="sec-limitations">Limitations</h2>
<p>While I see a lot of promise in model deployment to the database, it’s currently not without it’s limitations. Tobias Macey of the excellent <a href="https://www.dataengineeringpodcast.com/">Data Engineering Podcast</a> always ends his show by asking his guests (mostly tool developers): “When is <thing> not the right solution?” I’ll conclude by answering the same.</thing></p>
<p>There are many things I would consider if using <code>orbital</code> today for business use cases versus hobby projects:</p>
<ul>
<li><strong>Use Case</strong>: ML in Database only makes sense for batch predictions. <code>orbital</code> is not the right solution if there is a chance you’ll want realtime predictions</li>
<li><strong>Scale</strong>: SQL is generally good at optimizing large-scale data processing jobs. However, extremely large ensemble models may experience slower runtimes. If such a model was to be run at extreme scale, one would need to consider the relative latency<sup>8</sup> and cost<sup>9</sup> of this versus other solutions</li>
<li><strong>Algorithms</strong>: Right now <code>orbital</code> is mostly limited to <code>scikit-learn</code> models and select feature engineering steps (or <code>tidymodels</code> in R). This can be a challenge if you want to use other common algorithms. I’ve figured out some workarounds for <a href="../..\post/orbital-xgb"><code>xgboost</code></a> but at some point, the amount of hacking around the periphery reduces the “same code in dev and prod” benefits</li>
<li><strong>Precision</strong>: <code>orbital</code> uses <code>sklearn-onnx</code> which can create some issues when <a href="https://onnx.ai/sklearn-onnx/auto_tutorial/plot_ebegin_float_double.html">floating point precision</a>. It is easily tested how critical this is for your use case, but you may find corner cases where it is difficult to precisely recreate your local predictions – particularly for tree-based models where tiny perturbations send an observation down a different path.</li>
<li><strong>Bugs</strong>: <code>orbital</code> still has some bugs it’s working out and seems to still be building out its testing infrastructure. For example, at the time of writing this demo, I started out trying to use the <code>TargetEncoder()</code> which <a href="https://github.com/posit-dev/orbital/issues/62">failed unexpectedly</a> so I switched to the <code>OneHotEncoder()</code>. That’s fine for a demo, but I wouldn’t be so cavelier about letting tool limitations shape my modeling choices in real life.</li>
<li><strong>Governance</strong>: Similar to the downsides of <code>dbt</code>, the risk of lowering the barriers to entry to deploying a new data model or machine learning model is that it will be done carelessly or prolificly. As the demo above shows, a rigorous approach can add many data artifacts to your datamart and could risk causing bloat if done casually. Having the right controls to determine who should be allowed to deploy models of what materiality is key.</li>
</ul>
<p>The good news is, most of these downsides are fully testable. You can quickly and pretty robustly dual-validated <code>orbital</code>’s logic and cross-check prediction speed and accuracy from python and SQL environments. So, if the idea sounds intriguing, take it for a spin! There aren’t too many “unknown unknowns”. These packages are under active development and improving by the day. I am excited to continue following the progress and experimenting with this project.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This post is cursed because “data modeling” and “predictive modeling” are completely different things, one involving data pipelines and the other involve machine learning. Both happen to be relevant here.↩︎</p></li>
<li id="fn2"><p>I say project versus package because <code>orbital</code> is really a “concept” with parallel but programmatically unrelated R and python implementations; the R project has been around for a but, but the python version is recently released .↩︎</p></li>
<li id="fn3"><p>Just want a few concrete ideas for stitching these tools together without the wind-up? Jump to Section&nbsp;3.1.↩︎</p></li>
<li id="fn4"><p>This list is, of course, non-comprehensive and coincidentally cherry-picked towards the problems which I’ll claim <code>orbital</code> might address. For a thoughtful and comprehensive take on MLOps, check out <a href="https://arxiv.org/abs/2209.09125">this excellent survey</a> by <a href="https://www.sh-reya.com/">Shreya Shankar</a> who, coincidentally enough, made MLOps the focus on her Stanford PhD in… Databases!↩︎</p></li>
<li id="fn5"><p>In my dual life volunteering on downballot campaigns, I also thing this pattern would be very effective to publish partisanship and turnout scores back to BigQuery, the beating heart of campaign data infrastructure.↩︎</p></li>
<li id="fn6"><p>Within a given database. SQL is a loosely enforced spec leading to an absurd amount of arbitrary uniqueness on top of ANSI. But, happily, so long as you aren’t switching databases, this does not matter.↩︎</p></li>
<li id="fn7"><p>If you run <code>dbt test</code> or <code>dbt test --store-failures</code>, you can find two such failure cases.↩︎</p></li>
<li id="fn8"><p>Or mitigate it through off-hours scheduling and materializing as a table versus a view↩︎</p></li>
<li id="fn9"><p>Comparing cost of database compute versus egress/ingress of pulling data from database to execute somewhere else↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>python</category>
  <category>dbt</category>
  <category>sql</category>
  <category>data</category>
  <category>ml</category>
  <guid>https://emilyriederer.com/post/orbital-mlops/</guid>
  <pubDate>Sat, 16 Aug 2025 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/orbital-mlops/featured.png" medium="image" type="image/png" height="135" width="144"/>
</item>
<item>
  <title>How Quarto embed fixes data science storytelling</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/quarto-comms/</link>
  <description><![CDATA[ 





<p>Data science stakeholder communication is hard. The typical explanation of this is to parody data scientists as “too technical” to communicate with their audiences. But I’ve always found it unsatisfying to believe that “being technical” makes it too challenging to connect with the 0.1% of the population so similar to ourselves that we all happen to work in the same organization.</p>
<p>Instead, I believe communication is rarely taught intentionally and, worse, is modeled poorly by educational communication which has different goals. This leads to an “explain all the things” mindset that is enabled by literate programming tools like notebooks. It’s said that “writing is thinking”, and literate programming excels at capturing our stream of conscience. However, our stream of conscience does not excel at succinct retrospective explanations of our work’s impact.</p>
<p>Data scientist do not have a communication problem. They have a problem in ordering their story for impact and engagement, driven by their background, context, and tools.</p>
<p>Fortunately, Quarto’s new <code>embed</code> feature bridges the gap between reproducible research and resonate story-telling. This simple feature allows us to cross-reference chunk output (tables, plots, text, or anything else) between documents. The ability to import reproducible results can completely change our writing workflow. It separates the tasks of analysis from summarization and changes our mindset to one of explaning “all the things” to curating the most persuasive evidence for our plaintxt arguments.</p>
<p>In this post, I discuss some of the reasons why I think data science communication goes wrong, why changing story orer helps, and how Quarto <code>embed</code>s can help us have reproducible results and a compelling story at the same time.</p>
<p><em>This topic has been on my mind for a while, and I was recently motivated to get this post over the finish line while talking to Dr.&nbsp;Lucy D’Agostino McGowan and Dr.&nbsp;Ellie Murray on their <a href="https://casualinfer.libsyn.com/optimizing-data-workflows-with-emily-riederer-season-6-episode-8">Casual Inference</a> podcast. Thanks to them for the energy and inspiration!</em></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This post assumes you know about the basics of <a href="https://quarto.org/">Quarto</a>.</p>
<p>TLDR: Quarto is a tool for rendering documents, PDFs, blogs, websites, and more from markdown and embedded code chunks. Thus, it supports literate programming, reproducible research, and much more (including this blog).</p>
</div>
</div>
<section id="why-data-science-communication-is-hard" class="level2">
<h2 class="anchored" data-anchor-id="why-data-science-communication-is-hard">Why data science communication is hard</h2>
<p>The deck is stacked against good communication of data science outcomes. Most of our experience with communication comes from education where it serves fundamentally different purposes. Educational communication tends to be linear and step-by-step, but professional communication should often lead with the key takeaway.</p>
<section id="communication-in-education" class="level3">
<h3 class="anchored" data-anchor-id="communication-in-education">Communication in education</h3>
<p>The majority of technical communication consumed and produced by early career professionals happened during their education. However, academic<sup>1</sup> communication has a fundamentally different goal, so it does not provide an effective model.</p>
<p>Academic communcation leans towards exhaustive knowledge sharing of all the details – either because the target audience needs to know them or the audience needs to know that the communicator knows them.</p>
<p>When students are communicating (completing problemsets or assignments), they have the goal of proving their mastery. Their audience (professors, TAs) can be assumed to have deeper knowledge of the topic than the presenter, and communication is intended to demonstrate comprehensiveness of knowledge – or at least to “show their work” for partial credit.</p>
<p>When students are consuming communication (from an instructor or textbook), they experience communication with the goal of exhaustive knowledge transfer. Instructors or textbooks aim to make the audience know what they know and to be able to execute that information independently.</p>
</section>
<section id="communication-in-industry" class="level3">
<h3 class="anchored" data-anchor-id="communication-in-industry">Communication in industry</h3>
<p>These are decidedly not the objective of professional communication. We are given a job <em>because</em> we are judged to have the mastery of a topic <em>specifically that no one else has the time, energy, or desire to think about in enough detail</em>. The goal is not to show what you know (or, how much work you did along the way) or to get the audience to your intimacy of understanding.<sup>2</sup></p>
<p>Instead, the goal is to be an effective abstraction layer between the minute details and what is actually needed to <em>act</em>. Communication is an act of curating the minimal spanning set of relevant facts, context, and supporting evidence or caveats.<sup>3</sup></p>
</section>
<section id="story-structuring" class="level3">
<h3 class="anchored" data-anchor-id="story-structuring">Story structuring</h3>
<p>Roughly speaking, this means we are used to talking about data science work in the <em>procedural</em> order:</p>
<pre><code>1. I wondered...
2. I prepared my data...
3. I ran this analysis...
4. This gave me another question...
5. That {did/not} work...
6. So finally I ended up with this...
7. I learned...</code></pre>
<p>However, for effective communication, it may be more useful to structure our work with <em>progressive disclosure</em>:</p>
<pre><code>1. I wondered...
7. I ultimately found...
6. This is based on trying this...
(3-5). We also considered other options...
2. And this is all based on this data, details, etc.</code></pre>
<p>In short, we want to tell the story of why others should <em>care</em> about our results – not the story of how we got the result.<sup>4</sup> Then, it helps turn a presentation or written document into a “conversation” where they can selectively partake of the details instead of waiting for the main point to be revealed as in a murder mystery.</p>
</section>
</section>
<section id="communicating-and-the-data-science-workflow" class="level2">
<h2 class="anchored" data-anchor-id="communicating-and-the-data-science-workflow">Communicating and the data science workflow</h2>
<p>Moving between story structures isn’t just a matter of changing our mindset. Organizational pressures and tooling also bias us towards poor communication practices. I’ve always loved the phrase “writing is thinking”, but the corrolary is that your writing cannot be clearer than the amount of time you have take to think and synthesize what actually mattered from your own work.</p>
<p>Timeline pressures push us towards more procedural stories. The story <em>you yourself know</em> about your work is the linear one that you just experienced – what you tried, why, and what happened next. If you need to communicate before you can synthesize and restructure, you will be caught flat-footed sharing anything but a procedural story. It’s likely better to begin drafting your final communication from a clean slate but tempting to reuse what exists.</p>
<p>What’s more, even the best tools don’t set us up for success. I’ve long been a fan of literate programming tools like R Markdown and Quarto. I used to believe that these allowed me to effectively document while developing. This is true for documenting my raw stream of conscience for my own future reference or other colleagues. However, notebooks narratives are by definition in the procedural order.</p>
<p>This mindset is further embed as we think about working reproducibly and structuring our work into DAGs that can be rerun end-to-end. If I want to create a final manuscript that is fully reproducible with plots and tables generated dynamically (no copy pasting!), literate programming may feel like it is constraining me towards running things in order. (This isn’t entirely true, as I’ve written about before with <a href="post/rmarkdown-driven-development">R Markdown Driven Development</a>.)</p>
</section>
<section id="using-quarto-embeds-to-improve-your-workflow" class="level2">
<h2 class="anchored" data-anchor-id="using-quarto-embeds-to-improve-your-workflow">Using Quarto <code>embed</code>s to improve your workflow</h2>
<p>So, we need to structure our stories differently for effective communication, but neither our timelines or tooling is conducive to it? That’s where the <a href="https://quarto.org/docs/authoring/notebook-embed.html">Quarto <code>embed</code> feature</a> comes into the picture.</p>
<section id="quarto-embed-overview" class="level3">
<h3 class="anchored" data-anchor-id="quarto-embed-overview">Quarto <code>embed</code> overview</h3>
<p>The <code>embed</code> shortcode lets us reference the output of another <code>.qmd</code> or <code>ipynb</code> Quarto document in a different Quarto file. This requires two steps:</p>
<p>First, in the original notebook we <code>label</code> the top of the chunk whose output we wish to target, e.g.&nbsp;in our notebook <code>analysis.ipynb</code>:<sup>5</sup></p>
<pre><code>#| label: my-calc

1+1</code></pre>
<p>Then in our main document we can pull in the output (and optionally the code) of that calculation, e.g.&nbsp;in a final Quarto document <code>final-writeup.qmd</code> we could add:</p>
<pre><code>{{&lt; embed analysis.ipynb#my-calc &gt;}}</code></pre>
<p>This works with any sort of cell output including raw <code>print()</code> statement output, plots, tables, etc.</p>
</section>
<section id="usage-patterns" class="level3">
<h3 class="anchored" data-anchor-id="usage-patterns">Usage patterns</h3>
<p>Why are embeds a game-changer for data science communication? <strong>Because writing is thinking and storytelling is curation.</strong> Embeds can help us switch our mindset away from “showing our work” and towards providing persuasive evidence that supports our narrative.</p>
<p>The workflow I recommend is:</p>
<ul>
<li>Still use good practices to modularizes steps like data pulls, separate modules for reusable functions, etc.</li>
<li>Do the analysis and last-mile transformation you would do in a Jupyter notebook, leaving the commentary that you would along the way</li>
<li>After you’re done, think about what is important. What does your audience need to see and in what order?</li>
<li>Then take a step back and write your actual story in a Quarto notebook</li>
<li>Selectively embed compelling evidence at the right points in your narrative</li>
</ul>
<p>This is illustrated in the figure below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/quarto-comms/featured.png" class="img-fluid figure-img"></p>
<figcaption>Content embedding workflow illustration</figcaption>
</figure>
</div>
<p>This simple shortcode unblocks us from critical storytelling and workflow challenges:</p>
<ul>
<li>We can generate content in rerunnable linear notebooks</li>
<li>We can start writing from a blank slate to ensure that we are focused on <em>substance</em> and not just sheer volume of content</li>
<li>We can then <em>selectively curate</em> output worthy of inclusion in a final document</li>
<li>We can insert these in the order that makes sense <em>for the story</em> versus for generation</li>
<li>This can exist without deleting or modifying our notebooks that capture the full thought process</li>
<li>As a bonus, our final document need not be a gnarly <code>.ipynb</code> but a plaintext <code>.qmd</code> to make version control, editing, and collaborating with noncoding contributors easier</li>
</ul>
<p>It’s not just code output that can be imported either. Perhaps you already wrote up an introduction framed as an experimental design or a proposal? Other full markdown files can similarly be inclued with the <a href="https://quarto.org/docs/authoring/includes.html"><code>includes</code> shortcode</a>. (<code>includes</code> adds the <em>unrendered text</em> of another <code>.qmd</code> file, including any code chunks to be executed, to your main <code>.qmd</code>; whereas, for <code>embeds</code>, we are referencing the <em>output</em> of another file without rerendering.)</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>This does not mean you should just cram all your analysis into your notebook and not worry about code quality, organization, or commentary!</p>
<p>The goal here is to have two good results for two different audiences without the overhead or reproducibility risks of maintaining them separately.</p>
</div>
</div>
</section>
<section id="demo" class="level3">
<h3 class="anchored" data-anchor-id="demo">Demo</h3>
<p>To give a quick demo, I’ll made <a href="post/quarto-comms/raw-analysis.html">a separate notebook</a> that just pulls some data from an API, cleans it up, and makes a few aggregations and plots. But suppose I doubt you’re interested in any of that. If you’ve read this long, you seem to trust me to do some amount of data stuff correctly.</p>
<p>So instead, I just put the following line in the <code>.qmd</code> file that is creating this post:</p>
<pre><code>{{&lt; embed raw-analysis.ipynb#tbl-pit-eo &gt;}}</code></pre>
<p>That produces this:</p>
<div class="quarto-embed-nb-cell">
<div id="tbl-pit-eo" class="cell anchored" data-execution_count="10">
<div class="cell-output cell-output-display">
<div>



<meta charset="utf-8">


<div id="bjovyrnhbw" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>
#bjovyrnhbw table {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
        }

#bjovyrnhbw thead, tbody, tfoot, tr, td, th { border-style: none !important; }
 tr { background-color: transparent !important; }
#bjovyrnhbw p { margin: 0 !important; padding: 0 !important; }
 #bjovyrnhbw .gt_table { display: table !important; border-collapse: collapse !important; line-height: normal !important; margin-left: auto !important; margin-right: auto !important; color: #333333 !important; font-size: 16px !important; font-weight: normal !important; font-style: normal !important; background-color: #FFFFFF !important; width: auto !important; border-top-style: solid !important; border-top-width: 2px !important; border-top-color: #A8A8A8 !important; border-right-style: none !important; border-right-width: 2px !important; border-right-color: #D3D3D3 !important; border-bottom-style: solid !important; border-bottom-width: 2px !important; border-bottom-color: #A8A8A8 !important; border-left-style: none !important; border-left-width: 2px !important; border-left-color: #D3D3D3 !important; }
 #bjovyrnhbw .gt_caption { padding-top: 4px !important; padding-bottom: 4px !important; }
 #bjovyrnhbw .gt_title { color: #333333 !important; font-size: 125% !important; font-weight: initial !important; padding-top: 4px !important; padding-bottom: 4px !important; padding-left: 5px !important; padding-right: 5px !important; border-bottom-color: #FFFFFF !important; border-bottom-width: 0 !important; }
 #bjovyrnhbw .gt_subtitle { color: #333333 !important; font-size: 85% !important; font-weight: initial !important; padding-top: 3px !important; padding-bottom: 5px !important; padding-left: 5px !important; padding-right: 5px !important; border-top-color: #FFFFFF !important; border-top-width: 0 !important; }
 #bjovyrnhbw .gt_heading { background-color: #FFFFFF !important; text-align: center !important; border-bottom-color: #FFFFFF !important; border-left-style: none !important; border-left-width: 1px !important; border-left-color: #D3D3D3 !important; border-right-style: none !important; border-right-width: 1px !important; border-right-color: #D3D3D3 !important; }
 #bjovyrnhbw .gt_bottom_border { border-bottom-style: solid !important; border-bottom-width: 2px !important; border-bottom-color: #D3D3D3 !important; }
 #bjovyrnhbw .gt_col_headings { border-top-style: solid !important; border-top-width: 2px !important; border-top-color: #D3D3D3 !important; border-bottom-style: solid !important; border-bottom-width: 2px !important; border-bottom-color: #D3D3D3 !important; border-left-style: none !important; border-left-width: 1px !important; border-left-color: #D3D3D3 !important; border-right-style: none !important; border-right-width: 1px !important; border-right-color: #D3D3D3 !important; }
 #bjovyrnhbw .gt_col_heading { color: #333333 !important; background-color: #FFFFFF !important; font-size: 100% !important; font-weight: normal !important; text-transform: inherit !important; border-left-style: none !important; border-left-width: 1px !important; border-left-color: #D3D3D3 !important; border-right-style: none !important; border-right-width: 1px !important; border-right-color: #D3D3D3 !important; vertical-align: bottom !important; padding-top: 5px !important; padding-bottom: 5px !important; padding-left: 5px !important; padding-right: 5px !important; overflow-x: hidden !important; }
 #bjovyrnhbw .gt_column_spanner_outer { color: #333333 !important; background-color: #FFFFFF !important; font-size: 100% !important; font-weight: normal !important; text-transform: inherit !important; padding-top: 0 !important; padding-bottom: 0 !important; padding-left: 4px !important; padding-right: 4px !important; }
 #bjovyrnhbw .gt_column_spanner_outer:first-child { padding-left: 0 !important; }
 #bjovyrnhbw .gt_column_spanner_outer:last-child { padding-right: 0 !important; }
 #bjovyrnhbw .gt_column_spanner { border-bottom-style: solid !important; border-bottom-width: 2px !important; border-bottom-color: #D3D3D3 !important; vertical-align: bottom !important; padding-top: 5px !important; padding-bottom: 5px !important; overflow-x: hidden !important; display: inline-block !important; width: 100% !important; }
 #bjovyrnhbw .gt_spanner_row { border-bottom-style: hidden !important; }
 #bjovyrnhbw .gt_group_heading { padding-top: 8px !important; padding-bottom: 8px !important; padding-left: 5px !important; padding-right: 5px !important; color: #333333 !important; background-color: #FFFFFF !important; font-size: 100% !important; font-weight: initial !important; text-transform: inherit !important; border-top-style: solid !important; border-top-width: 2px !important; border-top-color: #D3D3D3 !important; border-bottom-style: solid !important; border-bottom-width: 2px !important; border-bottom-color: #D3D3D3 !important; border-left-style: none !important; border-left-width: 1px !important; border-left-color: #D3D3D3 !important; border-right-style: none !important; border-right-width: 1px !important; border-right-color: #D3D3D3 !important; vertical-align: middle !important; text-align: left !important; }
 #bjovyrnhbw .gt_empty_group_heading { padding: 0.5px !important; color: #333333 !important; background-color: #FFFFFF !important; font-size: 100% !important; font-weight: initial !important; border-top-style: solid !important; border-top-width: 2px !important; border-top-color: #D3D3D3 !important; border-bottom-style: solid !important; border-bottom-width: 2px !important; border-bottom-color: #D3D3D3 !important; vertical-align: middle !important; }
 #bjovyrnhbw .gt_from_md> :first-child { margin-top: 0 !important; }
 #bjovyrnhbw .gt_from_md> :last-child { margin-bottom: 0 !important; }
 #bjovyrnhbw .gt_row { padding-top: 8px !important; padding-bottom: 8px !important; padding-left: 5px !important; padding-right: 5px !important; margin: 10px !important; border-top-style: solid !important; border-top-width: 1px !important; border-top-color: #D3D3D3 !important; border-left-style: none !important; border-left-width: 1px !important; border-left-color: #D3D3D3 !important; border-right-style: none !important; border-right-width: 1px !important; border-right-color: #D3D3D3 !important; vertical-align: middle !important; overflow-x: hidden !important; }
 #bjovyrnhbw .gt_stub { color: #333333 !important; background-color: #FFFFFF !important; font-size: 100% !important; font-weight: initial !important; text-transform: inherit !important; border-right-style: solid !important; border-right-width: 2px !important; border-right-color: #D3D3D3 !important; padding-left: 5px !important; padding-right: 5px !important; }
 #bjovyrnhbw .gt_stub_row_group { color: #333333 !important; background-color: #FFFFFF !important; font-size: 100% !important; font-weight: initial !important; text-transform: inherit !important; border-right-style: solid !important; border-right-width: 2px !important; border-right-color: #D3D3D3 !important; padding-left: 5px !important; padding-right: 5px !important; vertical-align: top !important; }
 #bjovyrnhbw .gt_row_group_first td { border-top-width: 2px !important; }
 #bjovyrnhbw .gt_row_group_first th { border-top-width: 2px !important; }
 #bjovyrnhbw .gt_striped { background-color: rgba(128,128,128,0.05) !important; }
 #bjovyrnhbw .gt_table_body { border-top-style: solid !important; border-top-width: 2px !important; border-top-color: #D3D3D3 !important; border-bottom-style: solid !important; border-bottom-width: 2px !important; border-bottom-color: #D3D3D3 !important; }
 #bjovyrnhbw .gt_sourcenotes { color: #333333 !important; background-color: #FFFFFF !important; border-bottom-style: none !important; border-bottom-width: 2px !important; border-bottom-color: #D3D3D3 !important; border-left-style: none !important; border-left-width: 2px !important; border-left-color: #D3D3D3 !important; border-right-style: none !important; border-right-width: 2px !important; border-right-color: #D3D3D3 !important; }
 #bjovyrnhbw .gt_sourcenote { font-size: 90% !important; padding-top: 4px !important; padding-bottom: 4px !important; padding-left: 5px !important; padding-right: 5px !important; text-align: left !important; }
 #bjovyrnhbw .gt_left { text-align: left !important; }
 #bjovyrnhbw .gt_center { text-align: center !important; }
 #bjovyrnhbw .gt_right { text-align: right !important; font-variant-numeric: tabular-nums !important; }
 #bjovyrnhbw .gt_font_normal { font-weight: normal !important; }
 #bjovyrnhbw .gt_font_bold { font-weight: bold !important; }
 #bjovyrnhbw .gt_font_italic { font-style: italic !important; }
 #bjovyrnhbw .gt_super { font-size: 65% !important; }
 #bjovyrnhbw .gt_footnote_marks { font-size: 75% !important; vertical-align: 0.4em !important; position: initial !important; }
 #bjovyrnhbw .gt_asterisk { font-size: 100% !important; vertical-align: 0 !important; }
 
</style>

<table class="gt_table table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<thead>
<tr class="header gt_heading">
<th colspan="3" class="gt_heading gt_title gt_font_normal">Executive Orders Issued by Term</th>
</tr>
<tr class="odd gt_heading">
<th colspan="3" class="gt_heading gt_subtitle gt_font_normal gt_bottom_border">Normalized for first 184 days in office (12.6% of term)</th>
</tr>
<tr class="header gt_col_headings gt_spanner_row">
<th rowspan="2" id="term_label" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" scope="col">Term</th>
<th colspan="2" id="Count" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><span class="gt_column_spanner">Count</span></th>
</tr>
<tr class="odd gt_col_headings">
<th id="n_ttl_pit" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" scope="col">Point in time</th>
<th id="n_ttl" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" scope="col">Full term</th>
</tr>
</thead>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_center">(2005) Bush</td>
<td class="gt_row gt_center">13</td>
<td class="gt_row gt_center">118</td>
</tr>
<tr class="even">
<td class="gt_row gt_center gt_striped">(2009) Obama</td>
<td class="gt_row gt_center gt_striped">22</td>
<td class="gt_row gt_center gt_striped">148</td>
</tr>
<tr class="odd">
<td class="gt_row gt_center">(2013) Obama</td>
<td class="gt_row gt_center">14</td>
<td class="gt_row gt_center">130</td>
</tr>
<tr class="even">
<td class="gt_row gt_center gt_striped">(2017) Trump</td>
<td class="gt_row gt_center gt_striped">42</td>
<td class="gt_row gt_center gt_striped">220</td>
</tr>
<tr class="odd">
<td class="gt_row gt_center">(2021) Biden</td>
<td class="gt_row gt_center">52</td>
<td class="gt_row gt_center">162</td>
</tr>
<tr class="even">
<td class="gt_row gt_center gt_striped">(2025) Trump</td>
<td class="gt_row gt_center gt_striped">174</td>
<td class="gt_row gt_center gt_striped">-</td>
</tr>
</tbody>
</table>


</div>
        


            
</div>
</div>
</div>
<a class="quarto-notebook-link" id="nblink-1" href="raw-analysis-preview.html#cell-tbl-pit-eo">Source: Demo Notebook</a></div>
<p>Perhaps I thought it was better to show you a simple table first. But, then I want to show you a more complex plot. You don’t have to see that in my original notebook I actually made the plot first. (Actually, I made <em>two</em> plots, but only one seemed important to show.) So, I write:</p>
<pre><code>{{&lt; embed raw-analysis.ipynb#fig-cum-eo &gt;}}</code></pre>
<p>That produces this:</p>
<div class="quarto-embed-nb-cell">
<div id="cell-fig-cum-eo" class="cell" data-execution_count="9">
<div class="cell-output cell-output-display">
<div id="fig-cum-eo" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cum-eo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://emilyriederer.com/post/quarto-comms/index_files/figure-html/raw-analysis-fig-cum-eo-output-1.png" id="fig-cum-eo" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-cum-eo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1
</figcaption>
</figure>
</div>
</div>
</div>
<a class="quarto-notebook-link" id="nblink-2" href="raw-analysis-preview.html#cell-fig-cum-eo">Source: Demo Notebook</a></div>
<p>If I had done a particularly good job of summarizing my thoughts immediately after seeing this plot, I might have already written them in a markdown cell over there. Embeds technically also work to embed markdown cells, so the following line you see is embedded from my other notebook also:</p>
<div class="quarto-embed-nb-cell">
<p>I have some thoughts…</p>
<a class="quarto-notebook-link" id="nblink-3" href="raw-analysis-preview.html#cell-txt-md">Source: Demo Notebook</a></div>
<p>However, I don’t advocate for embedding text. I think using a final <code>qmd</code> file as a single, self-contained spot to document your analysis has a lot of benefits.</p>
<p>And then I could go on to add my relevant thoughts and analysis of specific to that plot. But, in this case, another part of professional communication is staying on topic.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Caveat, here I mostly am reflecting on US undergraduate education in STEM-related disciplines. And, yet, even narrowly scoped this is certainly a very sweeping generalization.↩︎</p></li>
<li id="fn2"><p>The aphorism “You don’t pay the plumber for banging on the pipes. You pay them for knowing where to bang.” really sums up what it means to be a professional. Similarly, you don’t hire them to tell you about why they are banging where.↩︎</p></li>
<li id="fn3"><p>Personally, my professional communication became a lot better only after I grew senior enough to be on the <em>receiving</em> end of a lot of communication. At the beginning of my career, I wondered: “Didn’t my more senior audiences get to those roles because they were smart? Didn’t they want all the details?” But we must considered the audience’s context – not just their background knowledge but also their environment. Considering your executive audience as people who have thought about 7 different topics at 20 minute intervals before talking to you today frames a whole different set of constraints. My overall philosophy for communication over time has shifted more towards “How to be kind to burned out brains” than “How to get other people excited by all the cool stuff I did”.↩︎</p></li>
<li id="fn4"><p>I once coached an analyst who kept writing stories in this order. Responding to my feedback, they asked “But aren’t we supposed to tell a story?” This made me realize how overloaded and perhaps misleading the phrase “data storytelling” has become. Yes, we are telling the story <em>from the data</em> and not <em>about analyzing the data</em>. The analyst is not the main character!↩︎</p></li>
<li id="fn5"><p>FWIW, I find Quarto can get confused if we don’t put the blank line after the label line.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>workflow</category>
  <category>rstats</category>
  <category>python</category>
  <category>quarto</category>
  <category>rmarkdown</category>
  <guid>https://emilyriederer.com/post/quarto-comms/</guid>
  <pubDate>Sun, 27 Jul 2025 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/quarto-comms/featured.png" medium="image" type="image/png" height="97" width="144"/>
</item>
<item>
  <title>Python Rgonomics - 2025 Update</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/py-rgo-2025/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/py-rgo-2025/featured.jpg" class="img-fluid figure-img"></p>
<figcaption>Photo credit to the inimitable <a href="https://allisonhorst.com/">Allison Horst</a></figcaption>
</figure>
</div>
<p>About a year ago, I wrote the <a href="post/py-rgo">original version of Python Rgonomics</a> to help fellow former R users who were entering into the world of python. The general point of the article was that new python tooling (e.g.&nbsp;<code>polars</code> versus <code>pandas</code>) has evolved to a point where there are tools that remain truly performant and pythonic while still having a more similar user experience for those coming from the R world. I also discussed this at <a href="talk/python-rgnomics">posit::conf(2025)</a>.</p>
<p>Ironically, the thesis held so true that it condemned my first 2024 post on the topic. 2024 saw the release of a few game-changing tools that further streamline and simplify the python workflow. This post provides an updated set of recommendations. Specifically, it highlights:</p>
<ul>
<li><strong>Consolidating installation and environment management tooling</strong>: Previously, I recommended <code>pyenv</code> for instaling python versions and <code>pdm</code> for project and environment management. Then, last year saw the release of <a href="https://docs.astral.sh/uv/">Astral’s excellent <code>uv</code></a> which nicely consolidates this functionality into a single highly performant tool.</li>
<li><strong>Considering multiple IDE options</strong>: In addition to <code>VS Code</code>, I submit Posit PBC’s <a href="https://positron.posit.co/"><code>Positron</code></a> for consideration depending on comfort, needs, and use cases. Both are backed by the open-source Code OSS with different layers of flexibility or customization. Positron is mostly interoperable with VS Code extensions, but provides a bit more of a “batteries included” opinionated design for the data analyst persona that may not want to navigate through the customization afforded by VS Code.</li>
</ul>
<p>It is important to have a stable stack and not always jump to the next bright, shiny object; however, as I’ve watched these projects evolve throughout 2024, I feel confident to say they are not just a flash in the pan.</p>
<p><code>uv</code> is supported by the Charlie Marsh’s Astral, which formerly made <code>ruff</code> to consolidate a number of code quality tools. Astral’s commitment to open source, the careful design, and the incredible performance becnhmarks of <code>uv</code> speak for itself. Similarly, Positron is backed by the reliable Posit PBC (formerly RStudio) as an open source extension of Code OSS (which is also the open-source skeleton for Microsoft’s VS Code).</p>
<p>The rest of this post is reproduced in full with relevant updates so it reads end-to-end instead of referencing the changes from old to new recommendations.</p>
<section id="now-lets-get-started" class="level2">
<h2 class="anchored" data-anchor-id="now-lets-get-started">Now let’s get started</h2>
<p>The “expert-novice” duality is an uncomfortable part of switching between languages like R and python. Learning a new language is easily enough done; programming 101 concepts like truth tables and control flow translate seamlessly. But ergonomics of a language do not. The tips and tricks we learn to be hyper productive in a primary language are comfortable, familiar, elegant, and effective. They just <em>feel</em> good. Working in a new language, developers often face a choice between forcing their favored workflows into a new tool where they may not “fit”, writing technically correct yet plodding code to get the job done, or approaching a new language as a true beginner to learn it’s “feel” from the ground up.</p>
<p>Fortunately, some of these higher-level paradigms have begun to bleed across languages, enriching previously isolated tribes with the and enabling developers to take their advanced skillsets with them across languages. For any R users who aim to upskill in python in 2024, recent tools and versions of old favorites have made strides in converging the R and python data science stacks. In this post, I will overview some recommended tools that are both truly pythonic while capturing the comfort and familiarity of some favorite R packages of the <code>tidyverse</code> variety.<sup>1</sup></p>
</section>
<section id="what-this-post-is-not" class="level2">
<h2 class="anchored" data-anchor-id="what-this-post-is-not">What this post is not</h2>
<p>Just to be clear:</p>
<ul>
<li>This is not a post about why python is better than R so R users should switch all their work to python</li>
<li>This is not a post about why R is better than python so R semantics and conventions should be forced into python</li>
<li>This is not a post about why python <em>users</em> are better than R users so R users need coddling</li>
<li>This is not a post about why R <em>users</em> are better than python users and have superior tastes for their toolkit</li>
<li>This is not a post about why these python tools are the only good tools and others are bad tools</li>
</ul>
<p>If you told me you liked the New York’s Museum of Metropolitan Art, I might say that you might also like Chicago’s Art Institute. That doesn’t mean you should only go to the museum in Chicago or that you should never go to the Louvre in Paris. That’s not how recommendations (by human or recsys) work. This is an “opinionated” post in the sense that “I like this” and not opinionated in the sense that “you must do this”.</p>
</section>
<section id="on-picking-tools" class="level2">
<h2 class="anchored" data-anchor-id="on-picking-tools">On picking tools</h2>
<p>The tools I highlight below tend to have two competing features:</p>
<ul>
<li>They have aspects of their workflow and ergonomics that should feel very comfortable to users of favored R tools</li>
<li>They should be independently accepted, successful, and well-maintained python projects with the true pythonic spirit</li>
</ul>
<p>The former is important because otherwise there’s nothing tailored about these recommendations; the latter is important so users actually engage with the python language and community instead of dabbling around in its more peripheral edges. In short, these two principles <em>exclude</em> tools that are direct ports between languages with that as their sole or main benefit.<sup>2</sup></p>
<p>For example, <code>siuba</code> and <code>plotnine</code> were written with the direct intent of mirroring R syntax. They have seen some success and adoption, but more niche tools come with liabilities. With smaller user-bases, they tend to lack in the pace of development, community support, prior art, StackOverflow questions, blog posts, conference talks, discussions, others to collaborate with, cache in a portfolio, etc. Instead of enjoying the ergonomics of an old language or embracing the challenge of learning a new one, ports can sometimes force developers to invest energy into a “secret third thing” of learning tools that isolate them from both communities and facing inevitable snags by themselves.</p>
<p>When in Rome, do as the Romans do – but if you’re coming from the U.S. that doesn’t mean you can’t bring a universal adapter that can help charge your devices in European outlets.</p>
</section>
<section id="the-stack" class="level2">
<h2 class="anchored" data-anchor-id="the-stack">The stack</h2>
<p>WIth that preamble out of the way, below are a few recommendations for the most ergonomic tools for getting set up, conducting core data analysis, and communication results.</p>
<p>To preview these recommendations:</p>
<p><strong>Set Up</strong></p>
<ul>
<li>Installation: <a href="https://docs.astral.sh/uv/"><code>uv</code></a></li>
<li>IDE:
<ul>
<li><a href="https://code.visualstudio.com/docs/languages/python">VS Code</a>, or</li>
<li><a href="https://positron.posit.co/">Positron</a></li>
</ul></li>
</ul>
<p><strong>Analysis</strong></p>
<ul>
<li>Wrangling: <a href="https://pola.rs/"><code>polars</code></a></li>
<li>Visualization: <a href="https://seaborn.pydata.org/"><code>seaborn</code></a></li>
</ul>
<p><strong>Communication</strong></p>
<ul>
<li>Tables: <a href="https://posit-dev.github.io/great-tables/articles/intro.html">Great Tables</a></li>
<li>Notebooks: <a href="https://quarto.org/">Quarto</a></li>
</ul>
<p><strong>Miscellaneous</strong></p>
<ul>
<li>Environment Management: <a href="https://docs.astral.sh/uv/"><code>uv</code></a></li>
<li>Code Quality: <a href="https://docs.astral.sh/ruff/"><code>ruff</code></a></li>
</ul>
<section id="for-setting-up" class="level3">
<h3 class="anchored" data-anchor-id="for-setting-up">For setting up</h3>
<p>The first hurdle is often getting started – both in terms of installing the tools you’ll need and getting into a comfortable IDE to run them.</p>
<ul>
<li><strong>Installation</strong>: R keeps installation simple; there’s one way to do it so you do and it’s done<sup>3</sup>. But before python converts can <code>print("hello world")</code>, they face a range of options (system Python, Python installer UI, Anaconda, Miniconda, etc.) each with its own kinks. These decisions are made harder in Python since projects tend to have stronger dependencies of the language, requiring one to switch between versions. Fortunately, <code>uv</code> now makes this task easy with <a href="https://docs.astral.sh/uv/concepts/python-versions/#installing-a-python-version">many different commands for</a>:
<ul>
<li>Installing one or more specific versions: <code>uv python install &lt;version, constraints, etc.&gt;</code></li>
<li>Listing all available installations: <code>uv python list</code></li>
<li>Returning path of python executables: <code>uv python find</code></li>
<li>Spinning up a quick REPL with a <a href="https://valatka.dev/2025/01/12/on-killer-uv-feature.html">temporary python version</a> and packages: e.g.&nbsp;<code>uv run --python 3.12 --with pandas python</code></li>
</ul></li>
<li><strong>Integrated Development Environment</strong>: Once R is install, R users are typically off to the races with the intuitive RStudio IDE which helps them get immediately hands-on with the REPL. With the UI divided into quadrants, users can write an R script, run it to see results in the console, conceptualize what the program “knows” with the variable explorer, and navigate files through a file explorer. Once again, python is not lacking in IDE options, but users are confronted with yet another decision point before they even get started. Pycharm, Sublime, Spyder, Eclipse, Atom, Neovim, oh my! For python, I’d recommend either VS Code or Positron, which are both extensions of Code OSS.
<ul>
<li><a href="https://code.visualstudio.com/docs/languages/python">VS Code</a> is an industry standard tool for software development. This means it has a rich set of features for coding, debugging, navigating large projects, etc. It’s rich extension ecosystem also means that most major tools (e.g.&nbsp;Quarto, git, linters and stylers, etc.) have nice add-ons so, like RStudio, you can customize your platform to perform many side-tasks in plaintext or with the support of extra UI components.<sup>4</sup></li>
<li><a href="https://positron.posit.co/">Positron</a> is a newer entrant from Posit PBC (formerly RStudio). It streamlines the offerings of VS Code to center the features most useful for data analysis. Positron may feel easier to go from zero-to-one. It does a great job finding and consistently using the right versions of R, python, Quarto, etc. and prioritizes many of the IDE elements that make RStudio wonderful for working with data (e.g.&nbsp;object preview pane). Additionally, <em>most</em> VS Code extensions will work in Positron; however, Positron cannot use extensions <a href="https://mastodon.social/@emilyriederer/112853049023389552">that rely on Microsoft’s PyLance</a> meaning some realtime linting and error detection tools like ErrorLens do not work out-of-the-box. Ultimately, your comfort navigating VS Code and your mix of dev versus data work may determine which is best for you.</li>
</ul></li>
</ul>
</section>
<section id="for-data-analysis" class="level3">
<h3 class="anchored" data-anchor-id="for-data-analysis">For data analysis</h3>
<p>As data practitioners know, we’ll spend most of our time on cleaning and wrangling. As such, R users may struggle particularly to abandon their favorite tools for exploratory data analysis like <code>dplyr</code> and <code>ggplot2</code>. Fans of those packages often appreciate how their functional paradigm helps achieve a “flow state”. Precise syntax may differ, but new developments in the python wrangling stack provide increasingly close analogs to some of these beloved Rgonomics.</p>
<ul>
<li><strong>Data Wrangling</strong>: (<a href="post/py-rgo-polars">See my separate post on <code>polars</code></a>)Although <code>pandas</code> is undoubtedly the best-known wrangling tool in the python space, I believe the growing <a href="https://pola.rs/"><code>polars</code></a> project offers the best experience for a transitioning developer (along with other nice-to-have benefits like being dependency free and blazingly fast). <code>polars</code> may feel more natural and less error-prone to R users for may reasons:
<ul>
<li>it has more internal consistent (and similar to <code>dplyr</code>) syntax such as <code>select</code>, <code>filter</code>, etc. and has demonstrated that the project values a clean API (e.g.&nbsp;recently renaming <code>groupby</code> to <code>group_by</code>)</li>
<li>it does not rely on the distinction between columns and indexes which can feel unintuitive and introduces a new set of concepts to learn</li>
<li>it consistently returns copies of dataframes (while <code>pandas</code> sometimes alters in-place) so code is more idempotent and avoids a whole class of failure modes for new users</li>
<li>it enables many of the same “advanced” wrangling workflows in <code>dplyr</code> with high-level, semantic code like making the transformation of multiple variables at once fast with <a href="https://docs.pola.rs/py-polars/html/reference/selectors.html">column selectors</a>, concisely expressing <a href="https://docs.pola.rs/user-guide/expressions/window/">window functions</a>, and working with nested data (or what <code>dplyr</code> calls “list columns”) with <a href="https://docs.pola.rs/user-guide/expressions/lists/">lists</a> and <a href="https://docs.pola.rs/user-guide/expressions/structs/">structs</a></li>
<li>supporting users working with increasingly large data. Similar to <code>dplyr</code>’s many backends (e.g.&nbsp;<code>dbplyr</code>), <code>polars</code> can be used to write lazily-evaluated, optimized transformations and it’s syntax is reminiscent of <code>pyspark</code> should users ever need to switch between</li>
</ul></li>
<li><strong>Visualization</strong>: Even some of R’s critics will acknowledge the strength of <code>ggplot2</code> for visualization, both in terms of it’s intuitive and incremental API and the stunning graphics it can produce. <a href="https://seaborn.pydata.org/tutorial/objects_interface"><code>seaborn</code>’s object interface</a> seems to strike a great balance between offering a similar workflow (which <a href="https://seaborn.pydata.org/whatsnew/v0.12.0.html">cites <code>ggplot2</code> as an inspiration</a>) while bringing all the benefits of using an industry-standard tool</li>
</ul>
</section>
<section id="for-communication" class="level3">
<h3 class="anchored" data-anchor-id="for-communication">For communication</h3>
<p>Historically, one possible dividing line between R and python has been framed as “python is good at working with computers, R is good at working with people”. While that is partially inspired by reductive takes that R is not production-grade, it is not without truth that the R’s academic roots spurred it to overinvest in a rich “communication stack” and translating analytical outputs into human-readable, publishable outputs. Here, too, the gaps have begun to close.</p>
<ul>
<li><strong>Tables</strong>: R has no shortage of packages for creating nicely formatted tables, an area that has historically lacked a bit in python both in workflow and outcomes. Barring strong competition from the native python space, the one “port” I am bullish about is the recently announced <a href="https://posit-dev.github.io/great-tables/articles/intro.html">Great Tables</a> package. This is a pythonic clone of R’s <code>gt</code> package. I’m more comfortable recommending this since it’s maintained by the same developer as the R version (to support long-term feature parity), backed by an institution not just an individual (to ensure it’s not a short-lived hobby project), and the design feels like it does a good job balancing R inspiration with pythonic practices</li>
<li><strong>Computational notebooks</strong>: Jupyter Notebooks are widely used, widely critiqued parts of many python workflows. While the ability to mix markdown and code chunks. However, notebooks can introduce new types of bugs for the uninitiated; for example, they are hard to version control and easy to execute in the wrong environment. For those coming from the world of R Markdown, plaintext computational notebooks like <a href="https://quarto.org/">Quarto</a> may provide a more transparent development experience. While Quarto allows users to write in <code>.qmd</code> files which are more like their <code>.rmd</code> predecessors, its renderer can also handle Jupyter notebooks to enable collaboration across team members with different preferences</li>
</ul>
</section>
<section id="miscellaneous" class="level3">
<h3 class="anchored" data-anchor-id="miscellaneous">Miscellaneous</h3>
<p>A few more tools may be helpful and familiar to <em>some</em> R users who tend towards the more “developer” versus “analyst” side of the spectrum. These, in my mind, have even more varied pros and cons, but I’ll leave them for consideration:</p>
<ul>
<li><strong>Environment Management</strong>: There’s a truly overwhelming number of ways<sup>5</sup> to manage project-level dependencies in python. As a consequence, there’s also a lot of outdated advice weighing pros and cons of feature sets that have since evolved. Here again, <code>uv</code> takes the cake as a swiss army knife tool. It features fast installation, auto-updating of the <code>pyproject.toml</code> and <code>uv.lock</code> files (so you don’t need to remember to <code>pip freeze</code>), separate trakcing of primary dependencies from the fully resolved environment (so you can cleanly and completely remove dependencies-of-dependencies you no longer need), and so much more. <code>uv</code> can operate as a drop in replacement for <code>pip</code> and generate a <code>requirements.txt</code> if needed for compatability; however, given it’s explosive popularity and ergonomic design, I doubt you’ll have trouble convincing collaborators to adopt the same.</li>
<li><strong>Developer Tools</strong>: <a href="https://docs.astral.sh/ruff/"><code>ruff</code></a> (another Astral project) provides a range of linting and styling options (think R’s <code>lintr</code> and <code>styler</code>) and provides a one-stop-shop over what can be an overwhelming number of atomic tools in this space (<code>isort</code>, <code>black</code>, <code>flake8</code>, etc.). <code>ruff</code> is super fast, has a nice VS Code extension, and, while this class of tools is generally considered more advanced, I think linters can be a fantastic “coach” for new users about best practices</li>
</ul>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Of course, languages have their own subcultures too. The <code>tidyverse</code> and <code>data.table</code> parts of the R world tend to favor different semantics and ergonomics. This post caters more to the former.↩︎</p></li>
<li id="fn2"><p>There is no doubt a place for language ports, especially for earlier stage project where no native language-specific standard exists. For example, I like Karandeep Singh’s lab work on <a href="https://github.com/TidierOrg/Tidier.jl">a tidyverse for Julia</a> and maintain my own <a href="https://github.com/emilyriederer/dbtplyr"><code>dbtplyr</code></a> package to port <code>dplyr</code>’s select helpers to <code>dbt</code>↩︎</p></li>
<li id="fn3"><p>However, to highlight some advances here, Posit’s newer <a href="https://github.com/r-lib/rig"><code>rig</code></a> project seems to be inspired by python install management tools and offers a convenient CLI for managing multiple version of R↩︎</p></li>
<li id="fn4"><p> If anything, the one challenge of VS Code is the sheer number of set up options, but to start out, you can see these excellent tutorials from Rami Krispin on recommended <a href="https://github.com/RamiKrispin/vscode-python">python</a> and <a href="https://github.com/RamiKrispin/vscode-r">R</a> configurations ↩︎</p></li>
<li id="fn5"><p><code>pdm</code>, <code>virtualenv</code>, <code>conda</code>, <code>piptools</code>, <code>pipenv</code>, <code>poetry</code>, and that doesn’t even scratch the surface↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>python</category>
  <guid>https://emilyriederer.com/post/py-rgo-2025/</guid>
  <pubDate>Sun, 26 Jan 2025 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/py-rgo-2025/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Python Rgonomics</title>
  <link>https://emilyriederer.com/talk/python-rgonomics/</link>
  <description><![CDATA[ 




<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> <a href="https://www.youtube.com/watch?v=ILxK92HDtvU&amp;list=PL9HYL-VRX0oSFkdF4fJeY63eGDvgofcbn">Video</a> </span><br>
<span><i class="bi bi-pencil"></i> <a href="../..\post/py-rgo/">Post - Python Rgonomics</a> </span><br>
<span><i class="bi bi-pencil"></i> <a href="../..\post/py-rgo-polars/">Post - Advanced <code>polars</code> versus <code>dplyr</code></a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Tooling changes quickly. Since this talk occured, Astral’s <code>uv</code> project has come out as a very strong contender to replace <code>pyenv</code>, <code>pdm</code>, and more of the devtools part of a python stack.</p>
</div>
</div>
<p>Data science languages are increasingly interoperable with advances like Arrow, Quarto, and Posit Connect. But data scientists are not. Learning the basic syntax of a new language is easy, but relearning the ergonomics that help us be hyperproductive is hard. In this talk, I will explore the influential ergonomics of R’s tidyverse. Next, I will recommend a curated stack that mirrors these ergonomics while also being genuinely truly pythonic. In particular, we will explore packages (polars, seaborn objects, greattables), frameworks (Shiny, Quarto), dev tools (pyenv, ruff, and pdm), and IDEs (VS Code extensions). The audience should leave feeling inspired to try python while benefiting from their current knowledge and expertise.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="slides" style="width:100%; aspect-ratio:16/11;">
<embed src="slides.pdf#zoom=Fit" width="100%" height="100%">
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/ILxK92HDtvU" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</div>



 ]]></description>
  <category>workflow</category>
  <category>python</category>
  <category>rstats</category>
  <guid>https://emilyriederer.com/talk/python-rgonomics/</guid>
  <pubDate>Thu, 15 Aug 2024 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/python-rgonomics/featured.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Base Python Rgonomic Patterns</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/py-rgo-base/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/py-rgo-base/featured.jpg" class="img-fluid figure-img"></p>
<figcaption>Photo credit to <a href="https://unsplash.com/@davidclode">David Clode</a> on Unsplash</figcaption>
</figure>
</div>
<p>In the past few weeks, I’ve been writing about a <a href="../..\post/py-rgo">stack of tools</a> and <a href="../..\post/py-rgo-polars/">specific packages like <code>polars</code></a> that may help R users feel “at home” when working in python due to similiar ergonomics. However, one common snag in switching languages is ramping up on common “recipes” for higher-level workflows (e.g.&nbsp;how to build a <code>sklearn</code> modeling pipeline) but missing a languages’s fundamentals that make writing glue code feel smooth (and dare I say pleasant?) It’s a maddening feeling to get code for a <em>complex</em> task to finish only to have the result wrapped in an object that you can’t suss out how to save or manipulate.</p>
<p>This post goes back to the basics. We’ll briefly reflect on a few aspects of usability that have led to the success of many workflow packages in R. Then, I’ll demonstrate a grab bag of coding patterns in python that make it feel more elegant to connect bits of code into a coherent workflow.</p>
<p>We’ll look at the kind of functionality that you didn’t know to miss until it was gone, you may not be quite sure what to search to figure out how to get it back, <em>and</em> you wonder if it’s even reasonable to hope there’s an analog<sup>1</sup>. This won’t be anything groundbreaking – just some nuts and bolts. Specifically: helper functions for data and time manipulation, advanced string interpolation, list comprehensions for more functional programming, and object serialization.</p>
<section id="what-other-r-ergonomics-do-we-enjoy" class="level2">
<h2 class="anchored" data-anchor-id="what-other-r-ergonomics-do-we-enjoy">What other R ergonomics do we enjoy?</h2>
<p>R’s passionate user and developer community has invested a lot in building tools that smooth over rough edges and provide slick, concise APIs to rote tasks. Sepcifically, a number of packages are devoted to:</p>
<ul>
<li><strong>Utility functions</strong>: Things that make it easier to “automate the boring stuff” like <code>fs</code> for naviating file systems or <code>lubridate</code> for more semantic date wrangling</li>
<li><strong>Formatting functions</strong>: Things that help us make things look nice for users like <code>cli</code> and <code>glue</code> to improve human readability of terminal output and string interpolation</li>
<li><strong>Efficiency functions</strong>: Things that help us write efficient workflows like <code>purrr</code> which provides a concise, typesafe interface for iteration</li>
</ul>
<p>All of these capabilities are things we <em>could</em> somewhat trivially write ourselves, but we don’t <em>want</em> to and we don’t <em>need</em> to. Fortunately, we don’t need to in python either.</p>
</section>
<section id="wrangling-things-date-manipulation" class="level2">
<h2 class="anchored" data-anchor-id="wrangling-things-date-manipulation">Wrangling Things (Date Manipulation)</h2>
<p>I don’t know a data person who loves dates. In the R world, many enjoy <code>lubridate</code>’s wide range of helper functions for cleaning, formatting, and computing on dates.</p>
<p>Python’s <code>datetime</code> module is similarly effective. We can easily create and manage dates in <code>date</code> or <code>datetime</code> classes which make them easy to work with.</p>
<div id="ea34065a" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb1-3">today <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.today()</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(today)</span>
<span id="cb1-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(today)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2024-01-20</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>datetime.date</code></pre>
</div>
</div>
<p>Two of the most important functions are <code>strftime()</code> and <code>strptime()</code>.</p>
<p><code>strftime()</code> <em>formats</em> dates into strings. It accepts both a date and the desired string format. Below, we demonstrate by commiting the cardinal sin of writing a date in non-ISO8601.</p>
<div id="ca22a3a1" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">today_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.strftime(today, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%m/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/%Y'</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(today_str)</span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(today_str)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>01/20/2024</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>str</code></pre>
</div>
</div>
<p><code>strptime()</code> does the opposite and turns a string encoding a date into an actual date. It can try to guess the format, or we can be nice and provide it guidance.</p>
<div id="2fe33487" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">someday_dtm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.strptime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-01-01'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(someday_dtm)</span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(someday_dtm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-01-01 00:00:00</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>datetime.datetime</code></pre>
</div>
</div>
<p>Date math is also relatively easy with <code>datetime</code>. For example, you can see we calculate the date difference simply by… taking the difference! From the resulting delta object, we can access the <code>days</code> attribute.</p>
<div id="324e084a" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">n_days_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ( today <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> someday_dtm.date() )</span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(n_days_diff)</span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(n_days_diff)</span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(n_days_diff.days)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>384 days, 0:00:00</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>int</code></pre>
</div>
</div>
</section>
<section id="formatting-things-f-strings" class="level2">
<h2 class="anchored" data-anchor-id="formatting-things-f-strings">Formatting Things (f-strings)</h2>
<p>R’s <code>glue</code> is beloved for it’s ability to easily combine variables and texts into complex strings without a lot of ugly, nested <code>paste()</code> functions.</p>
<p>python has a number of ways of doing this, but the most readable is the newest: f-strings. Simply put an <code>f</code> before the string and put any variable names to be interpolated in <code>{</code>curly braces<code>}</code>.</p>
<div id="bd04d21e" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Emily"</span></span>
<span id="cb13-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This blog post is written by </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>This blog post is written by Emily</code></pre>
</div>
</div>
<p>f-strings also support formatting with formats specified after a colon. Below, we format a long float to round to 2 digits.</p>
<div id="95ac64aa" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">proportion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.123456789</span></span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The proportion is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>proportion<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The proportion is 0.12</code></pre>
</div>
</div>
<p>Any python expression – not just a single variable – can go in curly braces. So, we can instead format that propotion as a percent.</p>
<div id="7aa11b90" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">proportion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.123456789</span></span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The proportion is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>proportion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The proportion is 12.3%</code></pre>
</div>
</div>
<p>Despite the slickness of f-strings, sometimes other string interpolation approaches can be useful. For example, if all the variables I want to interpolate are in a dictionary (as often will happen, for example, with REST API responses), the string <code>format()</code> method is a nice alternative. It allows us to pass in the dictionary, “unpacking” the argument with <code>**</code><sup>2</sup></p>
<div id="a11f7294" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb19-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dog_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Squeak'</span>,</span>
<span id="cb19-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dog_type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chihuahua'</span></span>
<span id="cb19-4">}</span>
<span id="cb19-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{dog_name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{dog_type}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>result))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Squeak is a Chihuahua</code></pre>
</div>
</div>
<section id="application-generating-file-names" class="level3">
<h3 class="anchored" data-anchor-id="application-generating-file-names">Application: Generating File Names</h3>
<p>Combining what we’ve discussed about <code>datetime</code> and f-strings, here’s a pattern I use frequently. If I am logging results from a run of some script, I might save the results in a file suffixed with the run timestamp. We can generate this easily.</p>
<div id="5c40ec95" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">dt_stub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y%m</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_%H%M%S'</span>)</span>
<span id="cb21-2">file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dt_stub<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv"</span></span>
<span id="cb21-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(file_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>output-20240120_071517.csv</code></pre>
</div>
</div>
</section>
</section>
<section id="repeating-things-iteration-functional-programming" class="level2">
<h2 class="anchored" data-anchor-id="repeating-things-iteration-functional-programming">Repeating Things (Iteration / Functional Programming)</h2>
<p>Thanks in part to a modern-day fiction that <code>for</code> loops in R are inefficient, R users have gravitated towards concise mapping functions for iteration. These can include the <code>*apply()</code> family<sup>3</sup>, <code>purrr</code>’s <code>map_*()</code> functions, or the parallelized version of either.</p>
<p>Python too has a nice pattern for arbitrary iteration in list comprehensions. For any iterable, we can use a list comprehension to make a list of outputs by processing a list of inputs, with optional conditional and default expressions.</p>
<p>Here are some trivial examples:</p>
<div id="2d5c5705" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb23-2">[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>[2, 3, 4]</code></pre>
</div>
</div>
<div id="c606ec83" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>[2, 4]</code></pre>
</div>
</div>
<div id="d9ee13a4" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>[2, 2, 4]</code></pre>
</div>
</div>
<p>There are also closer analogs to <code>purrr</code> like python’s <code>map()</code> function. <code>map()</code> takes a function and an iterable object and applies the function to each element. Like with <code>purrr</code>, functions can be anonymous (as defined in python with lambda functions) or named. List comprehensions are popular for their concise syntax, but there are many different thoughts on the matter as expressed in <a href="https://stackoverflow.com/questions/1247486/list-comprehension-vs-map">this StackOverflow post</a>.</p>
<div id="4647a4b9" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add_one(i): </span>
<span id="cb29-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># these are the same</span></span>
<span id="cb29-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> i: i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, l))</span>
<span id="cb29-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(add_one, l))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>[2, 3, 4]</code></pre>
</div>
</div>
<section id="application-simulation" class="level3">
<h3 class="anchored" data-anchor-id="application-simulation">Application: Simulation</h3>
<p>As a (slightly) more realistic(ish) example, let’s consider how list comprehensions might help us conduct a numerical simulation or sensitivity analysis.</p>
<p>Suppose we want to simulate 100 draws from a Bernoulli distribution with different success probabilites and see how close our empirically calculated rate is to the true rate.</p>
<p>We can define the probabilites we want to simulate in a list and use a list comprehension to run the simulations.</p>
<div id="fc8f8b46" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb31-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> rnd</span>
<span id="cb31-3"></span>
<span id="cb31-4">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>]</span>
<span id="cb31-5">coin_flips <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ np.mean(np.random.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, p, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> probs ]</span>
<span id="cb31-6">coin_flips</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>[0.05, 0.3, 0.48, 0.77, 0.87]</code></pre>
</div>
</div>
<p>Alternatively, instead of returning a list of the same length, our resulting list could include whatever we want – like a list of lists! If we wanted to keep the raw simulation results, we could. The following code returns a list of 5 lists - one with the raw simulation results.</p>
<div id="12787135" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">coin_flips <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(np.random.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, p, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> probs ]</span>
<span id="cb33-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb33-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  coin_flips has </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(coin_flips)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> elements</span></span>
<span id="cb33-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  Each element is itself a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(coin_flips[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  Each element is of length </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(coin_flips[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  """</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
  coin_flips has 5 elements
  Each element is itself a &lt;class 'list'&gt;
  Each element is of length 100
  </code></pre>
</div>
</div>
<p>If one wished, they could then put these into a <code>polars</code> dataframe and pivot those list-of-lists (going from a 5-row dataset to a 500-row dataset)to conduct whatever sort of analysis with want with all the replicates.</p>
<div id="3d34880e" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb35-2"></span>
<span id="cb35-3">df_flips <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prob'</span>: probs, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flip'</span>: coin_flips})</span>
<span id="cb35-4">df_flips.explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flip'</span>).glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 500
Columns: 2
$ prob &lt;f64&gt; 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1
$ flip &lt;i32&gt; 0, 0, 0, 0, 1, 0, 1, 1, 0, 0
</code></pre>
</div>
</div>
<p>We’ll return to list comprehensions in the next section.</p>
</section>
</section>
<section id="faking-things-data-generation" class="level2">
<h2 class="anchored" data-anchor-id="faking-things-data-generation">Faking Things (Data Generation)</h2>
<p>Creating simple miniature datasets is often useful in analysis. When working with a new packages, it’s an important part of learning, developing, debugging, and eventually unit testing. We can easily run our code on a simplified data object where the desired outcome is easy to determine to sanity-check our work, or we can use fake data to confirm our understanding of how a program will handle edge cases (like the diversity of ways different programs <a href="../..\post/nulls-polyglot/">handle null values</a>). Simple datasets can also be used and spines and scaffolds for more complex data wrangling tasks (e.g.&nbsp;joining event data onto a date spine).</p>
<p>In R, <code>data.frame()</code> and <code>expand.grid()</code> are go-to functions, coupled with vector generators like <code>rep()</code> and <code>seq()</code>. Python has many similar options.</p>
<section id="fake-datasets" class="level3">
<h3 class="anchored" data-anchor-id="fake-datasets">Fake Datasets</h3>
<p>For the simplest of datasets, we can manually write a few entries as with <code>data.frame()</code> in R. Here, we define series in a named dictionary where each dictionary key turns into a column name.</p>
<div id="dfa6b79a" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb37-2"></span>
<span id="cb37-3">pl.DataFrame({</span>
<span id="cb37-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb37-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'z'</span>]</span>
<span id="cb37-6">})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>str</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>"x"</td>
</tr>
<tr class="even">
<td>2</td>
<td>"y"</td>
</tr>
<tr class="odd">
<td>3</td>
<td>"z"</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>If we need longer datasets, we can use helper functions in packages like <code>numpy</code> to generate the series. Methods like <code>arange</code> and <code>linspace</code> work similarly to R’s <code>seq()</code>.</p>
<div id="e27be38e" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb38-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb38-3"></span>
<span id="cb38-4">pl.DataFrame({</span>
<span id="cb38-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>: np.arange(stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb38-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>: np.linspace(start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb38-7">})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
</tr>
<tr class="odd">
<th>i32</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>9.0</td>
</tr>
<tr class="even">
<td>1</td>
<td>16.5</td>
</tr>
<tr class="odd">
<td>2</td>
<td>24.0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>If we need groups in our sample data, we can use <code>np.repeat()</code> which works like R’s <code>rep(each = TRUE)</code>.</p>
<div id="a86edf0b" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">pl.DataFrame({</span>
<span id="cb39-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>: np.repeat(np.arange(stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb39-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>: np.linspace(start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb39-4">})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (6, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
</tr>
<tr class="odd">
<th>i32</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>3.0</td>
</tr>
<tr class="even">
<td>0</td>
<td>7.8</td>
</tr>
<tr class="odd">
<td>1</td>
<td>12.6</td>
</tr>
<tr class="even">
<td>1</td>
<td>17.4</td>
</tr>
<tr class="odd">
<td>2</td>
<td>22.2</td>
</tr>
<tr class="even">
<td>2</td>
<td>27.0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Alternatively, for more control and succinct typing, we can created a nested dataset in <code>polars</code> and explode it out.</p>
<div id="6ecf467f" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">(</span>
<span id="cb40-2">  pl.DataFrame({</span>
<span id="cb40-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb40-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a b c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d e f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g h i"</span>]</span>
<span id="cb40-5">  })</span>
<span id="cb40-6">  .with_columns(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>))</span>
<span id="cb40-7">  .explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb40-8">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (9, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>str</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>"a"</td>
</tr>
<tr class="even">
<td>1</td>
<td>"b"</td>
</tr>
<tr class="odd">
<td>1</td>
<td>"c"</td>
</tr>
<tr class="even">
<td>2</td>
<td>"d"</td>
</tr>
<tr class="odd">
<td>2</td>
<td>"e"</td>
</tr>
<tr class="even">
<td>2</td>
<td>"f"</td>
</tr>
<tr class="odd">
<td>3</td>
<td>"g"</td>
</tr>
<tr class="even">
<td>3</td>
<td>"h"</td>
</tr>
<tr class="odd">
<td>3</td>
<td>"i"</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Similarly, we could use what we’ve learned about <code>polars</code> list columns <em>and</em> list comprehensions.</p>
<div id="10f32c48" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb41-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> a]</span>
<span id="cb41-3">pl.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>:a,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>:b}).explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (9, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>2</td>
</tr>
<tr class="odd">
<td>1</td>
<td>3</td>
</tr>
<tr class="even">
<td>2</td>
<td>2</td>
</tr>
<tr class="odd">
<td>2</td>
<td>4</td>
</tr>
<tr class="even">
<td>2</td>
<td>6</td>
</tr>
<tr class="odd">
<td>3</td>
<td>3</td>
</tr>
<tr class="even">
<td>3</td>
<td>6</td>
</tr>
<tr class="odd">
<td>3</td>
<td>9</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>In fact, multidimensional list comprehensions can be used to mimic R’s <code>expand.grid()</code> function.</p>
<div id="f6c2c31c" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">pl.DataFrame(</span>
<span id="cb42-2">  [(x, y) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)],</span>
<span id="cb42-3">  schema <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>]</span>
<span id="cb42-4">  )</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (9, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">x</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td>0</td>
<td>2</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>2</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0</td>
</tr>
<tr class="even">
<td>2</td>
<td>1</td>
</tr>
<tr class="odd">
<td>2</td>
<td>2</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</section>
<section id="built-in-data" class="level3">
<h3 class="anchored" data-anchor-id="built-in-data">Built-In Data</h3>
<p>R has a number of canonical datasets like <code>iris</code> built in to the core language. This can be easy to quickly grab for experimentation<sup>4</sup>. While base python doesn’t include such capabilities, many of the exact same or similar datasets can be found in <code>seaborn</code>.</p>
<p><code>seaborn.get_dataset_names()</code> provides the list of available options. Below, we load the Palmers Penguins data and, if you wish, convert it from <code>pandas</code> to <code>polars</code>.</p>
<div id="62759986" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb43-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb43-3"></span>
<span id="cb43-4">df_pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'penguins'</span>)</span>
<span id="cb43-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.from_pandas(df_pd)</span>
<span id="cb43-6">df.glimpse()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 344
Columns: 7
$ species           &lt;str&gt; 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie'
$ island            &lt;str&gt; 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen'
$ bill_length_mm    &lt;f64&gt; 39.1, 39.5, 40.3, None, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0
$ bill_depth_mm     &lt;f64&gt; 18.7, 17.4, 18.0, None, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2
$ flipper_length_mm &lt;f64&gt; 181.0, 186.0, 195.0, None, 193.0, 190.0, 181.0, 195.0, 193.0, 190.0
$ body_mass_g       &lt;f64&gt; 3750.0, 3800.0, 3250.0, None, 3450.0, 3650.0, 3625.0, 4675.0, 3475.0, 4250.0
$ sex               &lt;str&gt; 'Male', 'Female', 'Female', None, 'Female', 'Male', 'Female', 'Male', None, None
</code></pre>
</div>
</div>
</section>
</section>
<section id="saving-things-object-serialization" class="level2">
<h2 class="anchored" data-anchor-id="saving-things-object-serialization">Saving Things (Object Serialization)</h2>
<p>Sometimes, it can be useful to save <em>objects</em> as they existed in RAM in an active programming environment. R users may have experienced this if they’ve used <code>.rds</code>, <code>.rda</code>, or <code>.Rdata</code> files to save individual variables or their entire environment. These objects can often be faster to reload than plaintext and can better preserve information that may be lost in other formats (e.g.&nbsp;storing a dataframe in a way that preserves its datatypes versus writing to a CSV file<sup>5</sup> or storing a complex object that can’t be easily reduced to plaintext like a model with training data, hyperparameters, learned tree splits or weights or whatnot for future predictions.) This is called object serializaton<sup>6</sup></p>
<p>Python has comparable capabilities in the <a href="https://docs.python.org/3/library/pickle.html"><code>pickle</code> module</a>. There aren’t really style points here, so I’ve not much to add beyond “this exists” and “read the documentation”. But, at a high level, it looks something like this:</p>
<div id="c0799a02" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to write a pickle</span></span>
<span id="cb45-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my-obj.pickle'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> handle:</span>
<span id="cb45-3">    pickle.dump(my_object, handle, protocol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.HIGHEST_PROTOCOL)</span>
<span id="cb45-4"></span>
<span id="cb45-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to read a pickle</span></span>
<span id="cb45-6">my_object <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my-obj.pickle'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>))</span></code></pre></div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I defined this odd scope to help limit the infinite number of workflow topics that could be included like “how to write a function” or “how to source code from another script”↩︎</p></li>
<li id="fn2"><p>This is called “**kwargs” and works a bit like <code>do.call()</code> in base R. You can read more about it <a href="https://www.digitalocean.com/community/tutorials/how-to-use-args-and-kwargs-in-python-3">here</a>.↩︎</p></li>
<li id="fn3"><p>Speaking of non-ergonomic things in R, the <code>*apply()</code> family is notoriously diverse in its number and order of arguments↩︎</p></li>
<li id="fn4"><p>Particularly if you want to set wildly unrealistic expectations for the efficacy of k-means clustering, but I digress↩︎</p></li>
<li id="fn5"><p>And yes, you can and should use Parquet and then my example falls apart – but that’s not the point!↩︎</p></li>
<li id="fn6"><p>And, if you want to go incredibly deep here, check out <a href="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/">this awesome post</a> by Danielle Navarro.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>python</category>
  <category>tutorial</category>
  <guid>https://emilyriederer.com/post/py-rgo-base/</guid>
  <pubDate>Sat, 20 Jan 2024 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/py-rgo-base/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>polars’ Rgonomic Patterns</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/py-rgo-polars/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/py-rgo-polars/featured.jpg" class="img-fluid figure-img"></p>
<figcaption>Photo credit to <a href="https://unsplash.com/@hansjurgen007">Hans-Jurgen Mager</a> on Unsplash</figcaption>
</figure>
</div>
<p>A few weeks ago, I shared some <a href="../..\post/py-rgo/">recommended modern python tools and libraries</a> that I believe have the most similar ergonomics for R (specifically <code>tidyverse</code>) converts. This post expands on that one with a focus on the <code>polars</code> library.</p>
<p>At the surface level, all data wrangling libraries have roughly the same functionality. Operations like selecting existing columns and making new ones, subsetting and ordering rows, and summarzing results is tablestakes.</p>
<p>However, no one falls in love with a specific library because it has the best <code>select()</code> or <code>filter()</code> function the world has ever seen. It’s the ability to easily do more complex transformations that differentiate a package expert versus novice, and the learning curve for everything that happens <em>after</em> the “Getting Started” guide ends is what can leave experts at one tool feeling so disempowered when working with another.</p>
<p>This deeper sense of intuition and fluency – when your technical brain knows intuitively how to translate in code what your analytical brain wants to see in the data – is what I aim to capture in the term “ergonomics”. In this post, I briefly discuss the surface-level comparison but spend most of the time exploring the deeper similarities in the functionality and workflows enabled by <code>polars</code> and <code>dplyr</code>.</p>
<section id="what-are-dplyrs-ergonomics" class="level2">
<h2 class="anchored" data-anchor-id="what-are-dplyrs-ergonomics">What are <code>dplyr</code>’s ergonomics?</h2>
<p>To claim <code>polars</code> has a similar aesthetic and user experience as <code>dplyr</code>, we first have to consider what the heart of <code>dplyr</code>‘s ergonomics actually is. The explicit design philosophy is described in the developers’ writings on <a href="https://design.tidyverse.org/unifying.html">tidy design principles</a>, but I’ll blend those official intended principles with my personal definitions based on the lived user experience.</p>
<ul>
<li>Consistent:
<ul>
<li>Function names are highly consistent (e.g.&nbsp;snake case verbs) with dependable inputs and outputs (mostly dataframe-in dataframe-out) to increase intuition, reduce mistakes, and eliminate surprises</li>
<li>Metaphors extend throughout the codebase. For example <code>group_by()</code> + <code>summarize()</code> or <code>group_by()</code> + <code>mutate()</code> do what one might expect (aggregation versus a window function) instead of requiring users to remember arbitrary command-specific syntax</li>
<li>Always returns a new dataframe versus modifying in-place so code is more idempotent<sup>1</sup> and less error prone</li>
</ul></li>
<li>Composable:
<ul>
<li>Functions exist at a “sweet spot” level of abstraction. We have the right primitive building blocks that users have full control to do anything they want to do with a dataframe but almost never have to write brute-force glue code. These building blocks can be layered however one choose to conduct</li>
<li>Conistency of return types leads to composability since dataframe-in dataframe-out allows for chaining</li>
</ul></li>
<li>Human-Centered:
<ul>
<li>Packages hit a comfortable level of abstraction somewhere between fully procedural (e.g.&nbsp;manually looping over array indexes without a dataframe abstraction) and fully declarative (e.g.&nbsp;SQL-style languages where you “request” the output but aspects like the order of operations may become unclear). Writing code is essentially articulating the steps of an analysis</li>
<li>This focus on code as recipe writing leads to the creation of useful optional functions and helpers (like my favorite – column selectors)</li>
<li>User’s rarely need to break the fourth wall of this abstraction-layer (versus thinking about things like indexes in <code>pandas</code>)</li>
</ul></li>
</ul>
<p>TLDR? We’ll say <code>dplyr</code>’s ergonomics allow users to express complex transformation precisely, concisely, and expressively.</p>
<p>So, with that, we will import <code>polars</code> and get started!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span></code></pre></div>
</div>
<p>This document was made with <code>polars</code> version <code>0.20.4</code>.</p>
</section>
<section id="basic-functionality" class="level2">
<h2 class="anchored" data-anchor-id="basic-functionality">Basic Functionality</h2>
<p>The similarities between <code>polars</code> and <code>dplyr</code>’s top-level API are already well-explored in many posts, including those by <a href="https://blog.tidy-intelligence.com/posts/dplyr-vs-polars/">Tidy Intelligence</a> and <a href="https://robertmitchellv.com/blog/2022-07-r-python-side-by-side/r-python-side-by-side.html">Robert Mitchell</a>.</p>
<p>We will only do the briefest of recaps of the core data wrangling functions of each and how they can be composed in order to make the latter half of the piece make sense. We will meet these functions again in-context when discussing <code>dplyr</code> and <code>polar</code>’s more advanced workflows.</p>
<section id="main-verbs" class="level3">
<h3 class="anchored" data-anchor-id="main-verbs">Main Verbs</h3>
<p><code>dplyr</code> and <code>polars</code> offer the same foundational functionality for manipulating dataframes. Their APIs for these operations are substantially similar.</p>
<p>For a single dataset:</p>
<ul>
<li>Column selection: <code>select()</code> -&gt; <code>select()</code> + <code>drop()</code></li>
<li>Creating or altering columns: <code>mutate()</code> -&gt; <code>with_columns()</code></li>
<li>Subsetting rows: <code>filter()</code> -&gt; <code>filter()</code></li>
<li>Ordering rows: <code>arrange()</code> -&gt; <code>sort()</code></li>
<li>Computing group-level summary metrics: <code>group_by()</code> + <code>summarize()</code> -&gt; <code>group_by()</code> + <code>agg()</code></li>
</ul>
<p>For multiple datasets:</p>
<ul>
<li>Merging on a shared key: <code>*_join()</code> -&gt; <code>join(strategy = '*')</code></li>
<li>Stacking datasets of the same structure: <code>union()</code> -&gt; <code>concat()</code></li>
<li>Transforming rows and columns: <code>pivot_{longer/wider}()</code><sup>2</sup> -&gt; <code>pivot()</code></li>
</ul>
</section>
<section id="main-verb-design" class="level3">
<h3 class="anchored" data-anchor-id="main-verb-design">Main Verb Design</h3>
<p>Beyond the similarity in naming, <code>dplyr</code> and <code>polars</code> top-level functions are substantially similar in their deeper design choices which impact the ergonomics of use:</p>
<ul>
<li>Referencing columns: Both make it easy to concisely references columns in a dataset without the repeated and redundant references to said dataset (as sometimes occurs in base R or python’s <code>pandas</code>). dplyr does this through nonstandard evaluation wherein a dataframe’s coumns can be reference directly within a data transformation function as if they were top-level variables; in <code>polars</code>, column names are wrapped in <code>pl.col()</code></li>
<li>Optional argument: Both tend to have a wide array of nice-to-have optional arguments. For example the joining capabilities in both libraries offer optional join validation<sup>3</sup> and column renaming by appended suffix</li>
<li>Consistent dataframe-in -&gt; dataframe-out design: <code>dplyr</code> functions take a dataframe as their first argument and return a dataframe. Similarly, <code>polars</code> methods are called on a dataframe and return a dataframe which enables the chaining workflow discussed next</li>
</ul>
</section>
<section id="chaining-piping" class="level3">
<h3 class="anchored" data-anchor-id="chaining-piping">Chaining (Piping)</h3>
<p>These methods are applied to <code>polars</code> dataframes by <em>chaining</em> which should feel very familiar to R <code>dplyr</code> fans.</p>
<p>In <code>dplyr</code> and the broad <code>tidyverse</code>, most functions take a dataframe as their first argument and return a dataframe, enabling the piping of functions. This makes it easy to write more human-readable scripts where functions are written in the order of execution and whitespace can easily be added between lines. The following lines would all be equivalent.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transformation2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transformation1</span>(df))</span>
<span id="cb2-2"></span>
<span id="cb2-3">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transformation1</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transformation2</span>()</span>
<span id="cb2-4"></span>
<span id="cb2-5">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transformation1</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transformation2</span>()</span></code></pre></div>
</div>
<p>Similarly, <code>polars</code>’s main transfomration methods offer a consistent dataframe-in dataframe-out design which allows <em>method chaining</em>. Here, we similarly can write commands in order where the <code>.</code> beginning the next method call serves the same purpose as R’s pipe. And for python broadly, to achieve the same affordance for whitespace, we can wrap the entire command in parentheses.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">(</span>
<span id="cb3-2">  df</span>
<span id="cb3-3">  .transformation1()</span>
<span id="cb3-4">  .transformation2()</span>
<span id="cb3-5">)</span></code></pre></div>
</div>
<p>One could even say that <code>polars</code> dedication to chaining goes even deeper than <code>dplyr</code>. In <code>dplyr</code>, while core dataframe-level functions are piped, functions on specific columns are still often written in a nested fashion<sup>4</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(a)))</span></code></pre></div>
</div>
<p>In contrast, most of <code>polars</code> column-level transformation methods also make it ergonomic to keep the same literate left-to-right chaining within column-level definitions with the same benefits to readability as for dataframe-level operations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df.with_columns(z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>).f().g())</span></code></pre></div>
</div>
</section>
</section>
<section id="advanced-wrangling" class="level2">
<h2 class="anchored" data-anchor-id="advanced-wrangling">Advanced Wrangling</h2>
<p>Beyond the surface-level similarity, <code>polars</code> supports some of the more complex ergonomics that <code>dplyr</code> users may enjoy. This includes functionality like:</p>
<ul>
<li>expressive and explicit syntax for transformations across multiple rows</li>
<li>concise helpers to identify subsets of columns and apply transformations</li>
<li>consistent syntax for window functions within data transformation operations</li>
<li>the ability to work with nested data structures</li>
</ul>
<p>Below, we will examine some of this functionality with a trusty fake dataframe.<sup>5</sup> As with <code>pandas</code>, you can make a quick dataframe in <code>polars</code> by passing a dictionary to <code>pl.DataFrame()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl </span>
<span id="cb6-2"></span>
<span id="cb6-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb6-4">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], </span>
<span id="cb6-5">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]})</span>
<span id="cb6-6">df.head()</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 3)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>3</td>
<td>7</td>
</tr>
<tr class="even">
<td>1</td>
<td>4</td>
<td>8</td>
</tr>
<tr class="odd">
<td>2</td>
<td>5</td>
<td>9</td>
</tr>
<tr class="even">
<td>2</td>
<td>6</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<section id="explicit-api-for-row-wise-operations" class="level3">
<h3 class="anchored" data-anchor-id="explicit-api-for-row-wise-operations">Explicit API for row-wise operations</h3>
<p>While row-wise operations are relatively easy to write ad-hoc, it can still be nice semantically to have readable and stylistically consistent code for such transformations.</p>
<p><code>dplyr</code>’s <a href="https://dplyr.tidyverse.org/articles/rowwise.html"><code>rowwise()</code></a> eliminates ambiguity in whether subsequent functions should be applied element-wise or collectively. Similiarly, <code>polars</code> has explicit <code>*_horizontal()</code> functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df.with_columns(</span>
<span id="cb7-2">  b_plus_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.sum_horizontal(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>), pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)) </span>
<span id="cb7-3">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 4)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
<th data-quarto-table-cell-role="th">b_plus_c</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>3</td>
<td>7</td>
<td>10</td>
</tr>
<tr class="even">
<td>1</td>
<td>4</td>
<td>8</td>
<td>12</td>
</tr>
<tr class="odd">
<td>2</td>
<td>5</td>
<td>9</td>
<td>14</td>
</tr>
<tr class="even">
<td>2</td>
<td>6</td>
<td>0</td>
<td>6</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</section>
<section id="column-selectors" class="level3">
<h3 class="anchored" data-anchor-id="column-selectors">Column Selectors</h3>
<p><code>dplyr</code>’s <a href="https://dplyr.tidyverse.org/reference/select.html">column selectors</a> dynamically determine a set of columns based on pattern-matching their names (e.g.&nbsp;<code>starts_with()</code>, <code>ends_with()</code>), data types, or other features. I’ve previously <a href="../..\post/column-name-contracts/">written</a> and <a href="../..\talk/col-names-contract/">spoken</a> at length about how transformative this functionality can be when paired with</p>
<p><code>polars</code> has a similar set of <a href="https://docs.pola.rs/py-polars/html/reference/selectors.html">column selectors</a>. We’ll import them and see a few examples.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars.selectors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cs</span></code></pre></div>
</div>
<p>To make things more interesting, we’ll also turn one of our columns into a different data type.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.with_columns(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>).cast(pl.Utf8))</span></code></pre></div>
</div>
<section id="in-select" class="level4">
<h4 class="anchored" data-anchor-id="in-select">In <code>select</code></h4>
<p>We can select columns based on name or data type and use one or more conditions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df.select(cs.starts_with(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> cs.string())</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">a</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>str</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>3</td>
<td>"1"</td>
</tr>
<tr class="even">
<td>4</td>
<td>"1"</td>
</tr>
<tr class="odd">
<td>5</td>
<td>"2"</td>
</tr>
<tr class="even">
<td>6</td>
<td>"2"</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Negative conditions also work.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">df.select(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>cs.string())</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>3</td>
<td>7</td>
</tr>
<tr class="even">
<td>4</td>
<td>8</td>
</tr>
<tr class="odd">
<td>5</td>
<td>9</td>
</tr>
<tr class="even">
<td>6</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</section>
<section id="in-with_columns" class="level4">
<h4 class="anchored" data-anchor-id="in-with_columns">In <code>with_columns</code></h4>
<p>Column selectors can play multiple rows in the transformation context.</p>
<p>The same transformation can be applied to multiple columns. Below, we find all integer variables, call a method to add 1 to each, and use the <code>name.suffix()</code> method to dynamically generate descriptive column names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df.with_columns(</span>
<span id="cb12-2">  cs.integer().add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).name.suffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_plus1"</span>)</span>
<span id="cb12-3">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 5)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
<th data-quarto-table-cell-role="th">b_plus1</th>
<th data-quarto-table-cell-role="th">c_plus1</th>
</tr>
<tr class="odd">
<th>str</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"1"</td>
<td>3</td>
<td>7</td>
<td>4</td>
<td>8</td>
</tr>
<tr class="even">
<td>"1"</td>
<td>4</td>
<td>8</td>
<td>5</td>
<td>9</td>
</tr>
<tr class="odd">
<td>"2"</td>
<td>5</td>
<td>9</td>
<td>6</td>
<td>10</td>
</tr>
<tr class="even">
<td>"2"</td>
<td>6</td>
<td>0</td>
<td>7</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>We can also use selected variables within transformations, like the rowwise sums that we just saw earlier.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df.with_columns(</span>
<span id="cb13-2">  row_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.sum_horizontal(cs.integer())</span>
<span id="cb13-3">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 4)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
<th data-quarto-table-cell-role="th">row_total</th>
</tr>
<tr class="odd">
<th>str</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"1"</td>
<td>3</td>
<td>7</td>
<td>10</td>
</tr>
<tr class="even">
<td>"1"</td>
<td>4</td>
<td>8</td>
<td>12</td>
</tr>
<tr class="odd">
<td>"2"</td>
<td>5</td>
<td>9</td>
<td>14</td>
</tr>
<tr class="even">
<td>"2"</td>
<td>6</td>
<td>0</td>
<td>6</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</section>
<section id="in-group_by-and-agg" class="level4">
<h4 class="anchored" data-anchor-id="in-group_by-and-agg">In <code>group_by</code> and <code>agg</code></h4>
<p>Column selectors can also be passed as inputs anywhere else that one or more columns is accepted, as with data aggregation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df.group_by(cs.string()).agg(cs.integer().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (2, 3)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
</tr>
<tr class="odd">
<th>str</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"1"</td>
<td>7</td>
<td>15</td>
</tr>
<tr class="even">
<td>"2"</td>
<td>11</td>
<td>9</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="consistent-api-for-window-functions" class="level3">
<h3 class="anchored" data-anchor-id="consistent-api-for-window-functions">Consistent API for Window Functions</h3>
<p>Window functions are another incredibly important tool in any data wrangling language but seem criminally undertaught in introductory analysis classes. Window functions allows you to apply aggregation <em>logic</em> over subgroups of data while preserving the original <em>grain</em> of the data (e.g.&nbsp;in a table of all customers and orders and a column for the max purchase account by customer).</p>
<p><code>dplyr</code> make window functions trivially easy with the <code>group_by()</code> + <code>mutate()</code> pattern, invoking users’ pre-existing understanding of how to write aggregation logic and how to invoke transformations that preserve a table’s grain.</p>
<p><code>polars</code> takes a slightly different but elegant approach. Similarly, it reuses the core <code>with_columns()</code> method for window functions. However, it uses a more SQL-reminiscent specification of the “window” in the column definition versus a separate grouping statement. This has the added advantage of allowing one to use multiple window functions with different windows in the same <code>with_columns()</code> call if you should so choose.</p>
<p>A simple window function tranformation can be done by calling <code>with_columns()</code>, chaining an aggregation method onto a column, and following with the <code>over()</code> method to define the window of interest.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df.with_columns(</span>
<span id="cb15-2">  min_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>().over(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb15-3">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 4)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
<th data-quarto-table-cell-role="th">min_b</th>
</tr>
<tr class="odd">
<th>str</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"1"</td>
<td>3</td>
<td>7</td>
<td>3</td>
</tr>
<tr class="even">
<td>"1"</td>
<td>4</td>
<td>8</td>
<td>3</td>
</tr>
<tr class="odd">
<td>"2"</td>
<td>5</td>
<td>9</td>
<td>5</td>
</tr>
<tr class="even">
<td>"2"</td>
<td>6</td>
<td>0</td>
<td>5</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>The chaining over and aggregate and <code>over()</code> can follow any other arbitrarily complex logic. Here, it follows a basic “case when”-type statement that creates an indicator for whether column b is null.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">df.with_columns(</span>
<span id="cb16-2">  n_b_odd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.when( (pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-3">              .then(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-4">              .otherwise(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-5">              .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().over(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb16-6">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 4)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
<th data-quarto-table-cell-role="th">n_b_odd</th>
</tr>
<tr class="odd">
<th>str</th>
<th>i64</th>
<th>i64</th>
<th>i32</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"1"</td>
<td>3</td>
<td>7</td>
<td>1</td>
</tr>
<tr class="even">
<td>"1"</td>
<td>4</td>
<td>8</td>
<td>1</td>
</tr>
<tr class="odd">
<td>"2"</td>
<td>5</td>
<td>9</td>
<td>1</td>
</tr>
<tr class="even">
<td>"2"</td>
<td>6</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</section>
<section id="list-columns-and-nested-frames" class="level3">
<h3 class="anchored" data-anchor-id="list-columns-and-nested-frames">List Columns and Nested Frames</h3>
<p>While the R <code>tidyverse</code>’s raison d’etre was originally around the design of heavily normalize <a href="https://vita.had.co.nz/papers/tidy-data.pdf">tidy data</a>, modern data and analysis sometimes benefits from more complex and hierarchical data structures. Sometimes data comes to us in nested forms, like from an API<sup>6</sup>, and other times nesting data can help us perform analysis more effectively<sup>7</sup> Recognizing these use cases, <code>tidyr</code> provides many capability for the creation and manipulation of <a href="https://tidyr.tidyverse.org/articles/nest.html">nested data</a> in which a single cell contains values from multiple columns or sometimes even a whoel miniature dataframe.</p>
<p><code>polars</code> makes these operations similarly easy with its own version of structs (list columns) and arrays (nested dataframes).</p>
<section id="list-columns-nested-frames" class="level4">
<h4 class="anchored" data-anchor-id="list-columns-nested-frames">List Columns &amp; Nested Frames</h4>
<p>List columns that contain multiple key-value pairs (e.g.&nbsp;column-value) in a single column can be created with <code>pl.struct()</code> similar to R’s <code>list()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df.with_columns(list_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.struct( cs.integer() ))</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 4)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
<th data-quarto-table-cell-role="th">list_col</th>
</tr>
<tr class="odd">
<th>str</th>
<th>i64</th>
<th>i64</th>
<th>struct[2]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"1"</td>
<td>3</td>
<td>7</td>
<td>{3,7}</td>
</tr>
<tr class="even">
<td>"1"</td>
<td>4</td>
<td>8</td>
<td>{4,8}</td>
</tr>
<tr class="odd">
<td>"2"</td>
<td>5</td>
<td>9</td>
<td>{5,9}</td>
</tr>
<tr class="even">
<td>"2"</td>
<td>6</td>
<td>0</td>
<td>{6,0}</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>These structs can be further be aggregated across rows into miniature datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">df.group_by(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>).agg(list_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.struct( cs.integer() ) )</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (2, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">list_col</th>
</tr>
<tr class="odd">
<th>str</th>
<th>list[struct[2]]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"2"</td>
<td>[{5,9}, {6,0}]</td>
</tr>
<tr class="even">
<td>"1"</td>
<td>[{3,7}, {4,8}]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>In fact, this could be a good use case for our column selectors! If we have many columns we want to keep unnested and many we want to next, it could be efficient to list out only the grouping variables and create our nested dataset by examining matches.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>]</span>
<span id="cb19-2">(df</span>
<span id="cb19-3">  .group_by(cs.by_name(cols))</span>
<span id="cb19-4">  .agg(list_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.struct(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>cs.by_name(cols)))</span>
<span id="cb19-5">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (2, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">list_col</th>
</tr>
<tr class="odd">
<th>str</th>
<th>list[struct[2]]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"2"</td>
<td>[{5,9}, {6,0}]</td>
</tr>
<tr class="even">
<td>"1"</td>
<td>[{3,7}, {4,8}]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</section>
<section id="undoing" class="level4">
<h4 class="anchored" data-anchor-id="undoing">Undoing</h4>
<p>Just as we constructed our nested data, we can denormalize it and return it to the original state in two steps. To see this, we can assign the nested structure above as <code>df_nested</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">df_nested <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.group_by(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>).agg(list_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.struct( cs.integer() ) )</span></code></pre></div>
</div>
<p>First <code>explode()</code> returns the table to the original grain, leaving use with a single struct in each row.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">df_nested.explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'list_col'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 2)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">list_col</th>
</tr>
<tr class="odd">
<th>str</th>
<th>struct[2]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"1"</td>
<td>{3,7}</td>
</tr>
<tr class="even">
<td>"1"</td>
<td>{4,8}</td>
</tr>
<tr class="odd">
<td>"2"</td>
<td>{5,9}</td>
</tr>
<tr class="even">
<td>"2"</td>
<td>{6,0}</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Then, <code>unnest()</code> unpacks each struct and turns each element back into a column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">df_nested.explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'list_col'</span>).unnest(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'list_col'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 3)</small>
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
</tr>
<tr class="odd">
<th>str</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"1"</td>
<td>3</td>
<td>7</td>
</tr>
<tr class="even">
<td>"1"</td>
<td>4</td>
<td>8</td>
</tr>
<tr class="odd">
<td>"2"</td>
<td>5</td>
<td>9</td>
</tr>
<tr class="even">
<td>"2"</td>
<td>6</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>


</section>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Meaning you can’t get the same result twice because if you rerun the same code the input has already been modified↩︎</p></li>
<li id="fn2"><p>Of the <code>tidyverse</code> funtions mentioned so far, this is the only one found in <code>tidyr</code> not <code>dplyr</code>↩︎</p></li>
<li id="fn3"><p>That is, validating an assumption that joins should have been one-to-one, one-to-many, etc.↩︎</p></li>
<li id="fn4"><p>However, this is more by convention. There’s not a strong reason why they would strictly need to be.↩︎</p></li>
<li id="fn5"><p>I recently ran a <a href="https://twitter.com/EmilyRiederer/status/1744707632886095998">Twitter poll</a> on whether people prefer real, canonical, or fake datasets for learning and teaching. Fake data wasn’t the winner, but a strategy I find personally fun and useful as the unit-test analog for learning.↩︎</p></li>
<li id="fn6"><p>For example, an API payload for a LinkedIn user might have nested data structures representing professional experience and educational experience↩︎</p></li>
<li id="fn7"><p>For example, training a model on different data subsets.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>python</category>
  <category>tutorial</category>
  <guid>https://emilyriederer.com/post/py-rgo-polars/</guid>
  <pubDate>Sat, 13 Jan 2024 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/py-rgo-polars/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Python Rgonomics</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/py-rgo/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/py-rgo/featured.jpg" class="img-fluid figure-img"></p>
<figcaption>Photo credit to the inimitable <a href="https://allisonhorst.com/">Allison Horst</a></figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Some advice in this post has gone stale regarding IDEs, installers, and environment management tools. Please see me <a href="post/py-rgo-2025">2025 update</a> for more recent thoughts following the release of <code>uv</code> and <code>Positron</code></p>
</div>
</div>
<p>Interoperability was a key theme in open-source data languages in 2023. Ongoing innovations in <a href="https://arrow.apache.org/">Arrow</a> (a language-agnostic in-memory standard for data storage), growing adoption of <a href="https://quarto.org/">Quarto</a> (the language-agnostic heir apparent to R Markdown), and even pandas creator Wes McKinney <a href="https://posit.co/blog/welcome-wes/">joining Posit</a> (the language-agnostic rebranding of RStudio) all illustrate the ongoing investment in breaking down barriers between different programming languages and paradigms.</p>
<p>Despite these advances in <em>technical</em> interoperability, individual developers will always face more friction than state-of-the-art tools when moving between languages. Learning a new language is easily enough done; programming 101 concepts like truth tables and control flow translate seamlessly. But ergonomics of a language do not. The tips and tricks we learn to be hyper productive in a primary language are comfortable, familiar, elegant, and effective. They just <em>feel</em> good. Working in a new language, developers often face a choice between forcing their favored workflows into a new tool where they may not “fit”, writing technically correct yet plodding code to get the job done, or approaching a new language as a true beginner to learn it’s “feel” from the ground up.</p>
<p>Fortunately, some of these higher-level paradigms have begun to bleed across languages, enriching previously isolated tribes with the and enabling developers to take their advanced skillsets with them across languages. For any R users who aim to upskill in python in 2024, recent tools and versions of old favorites have made strides in converging the R and python data science stacks. In this post, I will overview some recommended tools that are both truly pythonic while capturing the comfort and familiarity of some favorite R packages of the <code>tidyverse</code> variety.<sup>1</sup></p>
<section id="what-this-post-is-not" class="level2">
<h2 class="anchored" data-anchor-id="what-this-post-is-not">What this post is not</h2>
<p>Just to be clear:</p>
<ul>
<li>This is not a post about why python is better than R so R users should switch all their work to python</li>
<li>This is not a post about why R is better than python so R semantics and conventions should be forced into python</li>
<li>This is not a post about why python <em>users</em> are better than R users so R users need coddling</li>
<li>This is not a post about why R <em>users</em> are better than python users and have superior tastes for their toolkit</li>
<li>This is not a post about why these python tools are the only good tools and others are bad tools</li>
</ul>
<p>If you told me you liked the New York’s Museum of Metropolitan Art, I might say that you might also like Chicago’s Art Institute. That doesn’t mean you should only go to the museum in Chicago or that you should never go to the Louvre in Paris. That’s not how recommendations (by human or recsys) work. This is an “opinionated” post in the sense that “I like this” and not opinionated in the sense that “you must do this”.</p>
</section>
<section id="on-picking-tools" class="level2">
<h2 class="anchored" data-anchor-id="on-picking-tools">On picking tools</h2>
<p>The tools I highlight below tend to have two competing features:</p>
<ul>
<li>They have aspects of their workflow and ergonomics that should feel very comfortable to users of favored R tools</li>
<li>They should be independently accepted, successful, and well-maintained python projects with the true pythonic spirit</li>
</ul>
<p>The former is important because otherwise there’s nothing tailored about these recommendations; the latter is important so users actually engage with the python language and community instead of dabbling around in its more peripheral edges. In short, these two principles <em>exclude</em> tools that are direct ports between languages with that as their sole or main benefit.<sup>2</sup></p>
<p>For example, <code>siuba</code> and <code>plotnine</code> were written with the direct intent of mirroring R syntax. They have seen some success and adoption, but more niche tools come with liabilities. With smaller user-bases, they tend to lack in the pace of development, community support, prior art, StackOverflow questions, blog posts, conference talks, discussions, others to collaborate with, cache in a portfolio, etc. Instead of enjoying the ergonomics of an old language or embracing the challenge of learning a new one, ports can sometimes force developers to invest energy into a “secret third thing” of learning tools that isolate them from both communities and facing inevitable snags by themselves.</p>
<p>When in Rome, do as the Romans do – but if you’re coming from the U.S. that doesn’t mean you can’t bring a universal adapter that can help charge your devices in European outlets.</p>
</section>
<section id="the-stack" class="level2">
<h2 class="anchored" data-anchor-id="the-stack">The stack</h2>
<p>WIth that preamble out of the way, below are a few recommendations for the most ergonomic tools for getting set up, conducting core data analysis, and communication results.</p>
<p>To preview these recommendations:</p>
<p><strong>Set Up</strong></p>
<ul>
<li>Installation: <a href="https://github.com/pyenv/pyenv"><code>pyenv</code></a></li>
<li>IDE: <a href="https://code.visualstudio.com/docs/languages/python">VS Code</a></li>
</ul>
<p><strong>Analysis</strong></p>
<ul>
<li>Wrangling: <a href="https://pola.rs/"><code>polars</code></a></li>
<li>Visualization: <a href="https://seaborn.pydata.org/"><code>seaborn</code></a></li>
</ul>
<p><strong>Communication</strong></p>
<ul>
<li>Tables: <a href="https://posit-dev.github.io/great-tables/articles/intro.html">Great Tables</a></li>
<li>Notebooks: <a href="https://quarto.org/">Quarto</a></li>
</ul>
<p><strong>Miscellaneous</strong></p>
<ul>
<li>Environment Management: <a href="https://pdm-project.org/latest/"><code>pdm</code></a></li>
<li>Code Quality: <a href="https://docs.astral.sh/ruff/"><code>ruff</code></a></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I don’t want this advice to set up users for a potential snag. If you are on Windows and install python with <code>pyenv-win</code>, Quarto (as of writing on v1.3) may struggle to find the correct executable. Better support for this is on the backlog, but if you run into this issue, checkout this <a href="https://github.com/quarto-dev/quarto-cli/issues/3500#issuecomment-1375334561">brilliant fix</a>.</p>
</div>
</div>
<section id="for-setting-up" class="level3">
<h3 class="anchored" data-anchor-id="for-setting-up">For setting up</h3>
<p>The first hurdle is often getting started – both in terms of installing the tools you’ll need and getting into a comfortable IDE to run them.</p>
<ul>
<li><strong>Installation</strong>: R keeps installation simple; there’s one way to do it* so you do and it’s done. But before python converts can <code>print("hello world")</code>, they face a range of options (system Python, Python installer UI, Anaconda, Miniconda, etc.) each with its own kinks. These decisions are made harder in Python since projects tend to have stronger dependencies of the language, requiring one to switch between versions. For both of these reasons, I favor the <a href="https://github.com/pyenv/pyenv"><code>pyenv</code></a> (or <code>pyenv-win</code> for those on Windows) for easily managing python installation(s) from the command line. While the installation process of <code>pyenv</code> may be <em>technically</em> different, it’s similar in that it “just works” with just a few commands. In fact, the workflow is <em>so slick</em> that things seem to have gone 180 degrees with <code>pyenv</code> inspiring <a href="https://github.com/r-lib/rig">similar project called <code>rig</code> to manage R installations</a>. This may sound intimidating, but the learning curve is actually quite shallow:
<ul>
<li><code>pyenv install --list</code>: To see what python versions are available to install</li>
<li><code>pyenv install &lt;version number&gt;</code>: To install a specific version</li>
<li><code>pyenv versions</code>: To see what python versions are installed on your system</li>
<li><code>pyenv global &lt;version number&gt;</code>: The set one python version as a global default</li>
<li><code>pyenv local &lt;version number&gt;</code>: The set a python version to be used within a specific directory/project</li>
</ul></li>
<li><strong>Integrated Development Environment</strong>: Once R is install, R users are typically off to the races with the intuitive RStudio IDE which helps them get immediately hands-on with the REPL. With the UI divided into quadrants, users can write an R script, run it to see results in the console, conceptualize what the program “knows” with the variable explorer, and navigate files through a file explorer. Once again, python is not lacking in IDE options, but users are confronted with yet another decision point before they even get started. Pycharm, Sublime, Spyder, Eclipse, Atom, Neovim, oh my! I find that <a href="https://code.visualstudio.com/docs/languages/python">VS Code</a> offers the best functionality. It’s rich extension ecosystem also means that most major tools (e.g.&nbsp;Quarto, git, linters and stylers, etc.) have nice add-ons so, like RStudio, you can customize your platform to perform many side-tasks in plaintext or with the support of extra UI components.<sup>3</sup></li>
</ul>
</section>
<section id="for-data-analysis" class="level3">
<h3 class="anchored" data-anchor-id="for-data-analysis">For data analysis</h3>
<p>As data practitioners know, we’ll spend most of our time on cleaning and wrangling. As such, R users may struggle particularly to abandon their favorite tools for exploratory data analysis like <code>dplyr</code> and <code>ggplot2</code>. Fans of those packages often appreciate how their functional paradigm helps achieve a “flow state”. Precise syntax may differ, but new developments in the python wrangling stack provide increasingly close analogs to some of these beloved Rgonomics.</p>
<ul>
<li><strong>Data Wrangling</strong>: Although <code>pandas</code> is undoubtedly the best-known wrangling tool in the python space, I believe the growing <a href="https://pola.rs/"><code>polars</code></a> project offers the best experience for a transitioning developer (along with other nice-to-have benefits like being dependency free and blazingly fast). <code>polars</code> may feel more natural and less error-prone to R users for may reasons:
<ul>
<li>it has more internal consistent (and similar to <code>dplyr</code>) syntax such as <code>select</code>, <code>filter</code>, etc. and has demonstrated that the project values a clean API (e.g.&nbsp;recently renaming <code>groupby</code> to <code>group_by</code>)</li>
<li>it does not rely on the distinction between columns and indexes which can feel unintuitive and introduces a new set of concepts to learn</li>
<li>it consistently returns copies of dataframes (while <code>pandas</code> sometimes alters in-place) so code is more idempotent and avoids a whole class of failure modes for new users</li>
<li>it enables many of the same “advanced” wrangling workflows in <code>dplyr</code> with high-level, semantic code like making the transformation of multiple variables at once fast with <a href="https://docs.pola.rs/py-polars/html/reference/selectors.html">column selectors</a>, concisely expressing <a href="https://docs.pola.rs/user-guide/expressions/window/">window functions</a>, and working with nested data (or what <code>dplyr</code> calls “list columns”) with <a href="https://docs.pola.rs/user-guide/expressions/lists/">lists</a> and <a href="https://docs.pola.rs/user-guide/expressions/structs/">structs</a></li>
<li>supporting users working with increasingly large data. Similar to <code>dplyr</code>’s many backends (e.g.&nbsp;<code>dbplyr</code>), <code>polars</code> can be used to write lazily-evaluated, optimized transformations and it’s syntax is reminiscent of <code>pyspark</code> should users ever need to switch between</li>
</ul></li>
<li><strong>Visualization</strong>: Even some of R’s critics will acknowledge the strength of <code>ggplot2</code> for visualization, both in terms of it’s intuitive and incremental API and the stunning graphics it can produce. <a href="https://seaborn.pydata.org/tutorial/objects_interface"><code>seaborn</code>’s object interface</a> seems to strike a great balance between offering a similar workflow (which <a href="https://seaborn.pydata.org/whatsnew/v0.12.0.html">cites <code>ggplot2</code> as an inspiration</a>) while bringing all the benefits of using an industry-standard tool</li>
</ul>
</section>
<section id="for-communication" class="level3">
<h3 class="anchored" data-anchor-id="for-communication">For communication</h3>
<p>Historically, one possible dividing line between R and python has been framed as “python is good at working with computers, R is good at working with people”. While that is partially inspired by reductive takes that R is not production-grade, it is not without truth that the R’s academic roots spurred it to overinvest in a rich “communication stack” and translating analytical outputs into human-readable, publishable outputs. Here, too, the gaps have begun to close.</p>
<ul>
<li><strong>Tables</strong>: R has no shortage of packages for creating nicely formatted tables, an area that has historically lacked a bit in python both in workflow and outcomes. Barring strong competition from the native python space, the one “port” I am bullish about is the recently announced <a href="https://posit-dev.github.io/great-tables/articles/intro.html">Great Tables</a> package. This is a pythonic clone of R’s <code>gt</code> package. I’m more comfortable recommending this since it’s maintained by the same developer as the R version (to support long-term feature parity), backed by an institution not just an individual (to ensure it’s not a short-lived hobby project), and the design feels like it does a good job balancing R inspiration with pythonic practices</li>
<li><strong>Computational notebooks</strong>: Jupyter Notebooks are widely used, widely critiqued parts of many python workflows. While the ability to mix markdown and code chunks. However, notebooks can introduce new types of bugs for the uninitiated; for example, they are hard to version control and easy to execute in the wrong environment. For those coming from the world of R Markdown, plaintext computational notebooks like <a href="https://quarto.org/">Quarto</a> may provide a more transparent development experience. While Quarto allows users to write in <code>.qmd</code> files which are more like their <code>.rmd</code> predecessors, its renderer can also handle Jupyter notebooks to enable collaboration across team members with different preferences</li>
</ul>
</section>
<section id="miscellaneous" class="level3">
<h3 class="anchored" data-anchor-id="miscellaneous">Miscellaneous</h3>
<p>A few more tools may be helpful and familiar to <em>some</em> R users who tend towards the more “developer” versus “analyst” side of the spectrum. These, in my mind, have even more varied pros and cons, but I’ll leave them for consideration:</p>
<ul>
<li><strong>Environment Management</strong>: Joining the python world means never having to settle on an environment management tool for installing packages. There’s a truly overwhelming number of ways to manage project-level dependencies (<code>virtualenv</code>, <code>conda</code>, <code>piptools</code>, <code>pipenv</code>, <code>poetry</code>, and that doesn’t even scratch the surface) with different pros and cons and phenomenal amount of ink/pixels have been spilled over litigating these trade-offs. Putting all that aside, lately, I’ve been favoring <a href="https://pdm-project.org/latest/"><code>pdm</code></a> because it prioritizes features I care most about (auto-updating <code>pyproject.toml</code>, isolating dependencies from dependencies-of-dependencies, active development and error handling, mostly just works pretty undramatically)</li>
<li><strong>Developer Tools</strong>: <a href="https://docs.astral.sh/ruff/"><code>ruff</code></a> provides a range of linting and styling options (think R’s <code>lintr</code> and <code>styler</code>) and provides a one-stop-shop over what can be an overwhelming number of atomic tools in this space (<code>isort</code>, <code>black</code>, <code>flake8</code>, etc.). <code>ruff</code> is super fast, has a nice VS Code extension, and, while this class of tools is generally considered more advanced, I think linters can be a fantastic “coach” for new users about best practices</li>
</ul>
</section>
</section>
<section id="more-to-come" class="level2">
<h2 class="anchored" data-anchor-id="more-to-come">More to come!</h2>
<p>Each recommendation here itself could be its own tutorial or post. In particular, I hope to showcase the Rgonomics of <code>polars</code>, <code>seaborn</code>, and <code>great_tables</code> in future posts.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Of course, languages have their own subcultures too. The <code>tidyverse</code> and <code>data.table</code> parts of the R world tend to favor different semantics and ergonomics. This post caters more to the former.↩︎</p></li>
<li id="fn2"><p>There is no doubt a place for language ports, especially for earlier stage project where no native language-specific standard exists. For example, I like Karandeep Singh’s lab work on <a href="https://github.com/TidierOrg/Tidier.jl">a tidyverse for Julia</a> and maintain my own <a href="https://github.com/emilyriederer/dbtplyr"><code>dbtplyr</code></a> package to port <code>dplyr</code>’s select helpers to <code>dbt</code>↩︎</p></li>
<li id="fn3"><p> If anything, the one challenge of VS Code is the sheer number of set up options, but to start out, you can see these excellent tutorials from Rami Krispin on recommended <a href="https://github.com/RamiKrispin/vscode-python">python</a> and <a href="https://github.com/RamiKrispin/vscode-r">R</a> configurations ↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>python</category>
  <guid>https://emilyriederer.com/post/py-rgo/</guid>
  <pubDate>Sat, 30 Dec 2023 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/py-rgo/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Operationalizing Column-Name Contracts with dbtplyr</title>
  <link>https://emilyriederer.com/talk/dbtplyr/</link>
  <description><![CDATA[ 




<p>url_video: “”</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>At Coalesce for dbt user audience:</p>
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> <a href="https://www.getdbt.com/coalesce-2021/operationalizing-columnname-contracts-with-dbtplyr/">Video</a> </span></p>
<p>At posit::conf for R user audience:</p>
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides-posit.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> Video - posit::conf for R User Audience <em>coming soon!</em> </span></p>
<p><span><i class="bi bi-pencil"></i> <a href="../..\post/column-name-contracts/">Post - Column Name Contracts</a> </span><br>
<span><i class="bi bi-pencil"></i> <a href="../..\post/convo-dbt/">Post - Column Name Contracts in dbt</a> </span><br>
<span><i class="bi bi-pencil"></i> <a href="../..\post/convo-dbt-update/">Post - Column Name Contracts with dbtplyr</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Complex software systems make performance guarantees through documentation and unit tests, and they communicate these to users with conscientious interface design.</p>
<p>However, published data tables exist in a gray area; they are static enough not to be considered a “service” or “software”, yet too raw to earn attentive user interface design. This ambiguity creates a disconnect between data producers and consumers and poses a risk for analytical correctness and reproducibility.</p>
<p>In this talk, I will explain how controlled vocabularies can be used to form contracts between data producers and data consumers. Explicitly embedding meaning in each component of variable names is a low-tech and low-friction approach which builds a shared understanding of how each field in the dataset is intended to work.</p>
<p>Doing so can offload the burden of data producers by facilitating automated data validation and metadata management. At the same time, data consumers benefit by a reduction in the cognitive load to remember names, a deeper understanding of variable encoding, and opportunities to more efficiently analyze the resulting dataset. After discussing the theory of controlled vocabulary column-naming and related workflows, I will illustrate these ideas with a demonstration of the {dbtplyr} dbt package which helps analytics engineers get the most value from controlled vocabularies by making it easier to effectively exploit column naming structures while coding.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="slides" style="width:100%; aspect-ratio:16/11;">
<embed src="slides.pdf#zoom=Fit" width="100%" height="100%">
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<p>Coming Soon!</p>
</div>
</div>
</div>



 ]]></description>
  <category>workflow</category>
  <category>rmarkdown</category>
  <category>rstats</category>
  <guid>https://emilyriederer.com/talk/dbtplyr/</guid>
  <pubDate>Thu, 21 Sep 2023 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/dbtplyr/featured.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Posit Data Science Hangout</title>
  <link>https://emilyriederer.com/talk/meetup-posit/</link>
  <description><![CDATA[ 




<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-play"></i> <a href="https://www.youtube.com/watch?v=VUgoaNhE4u0">Video</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>We were recently joined by Emily Riederer, Senior Manager - Customer Management Data Science &amp; Analytics at Capital One. We discussed how a strong foundation in high-quality data infrastructure and reproducible tools sets the stage for innovation in modeling, causal inference, and analytics, and so much more.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<p>Not applicable - live conversation</p>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/VUgoaNhE4u0" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</div>



 ]]></description>
  <category>rstats</category>
  <category>workflow</category>
  <guid>https://emilyriederer.com/talk/meetup-posit/</guid>
  <pubDate>Thu, 13 Apr 2023 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/meetup-posit/featured.png" medium="image" type="image/png" height="74" width="144"/>
</item>
<item>
  <title>Taking Flight with Shiny: a Modules-First Approach</title>
  <link>https://emilyriederer.com/talk/shiny-modules/</link>
  <description><![CDATA[ 




<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> <a href="https://posit.co/resources/videos/tidycf-turning-analysis-on-its-head-by-turning-cashflows-on-their-sides/">Video</a> </span><br>
<span><i class="bi bi-pencil"></i> <a href="../..\post/shiny-modules/">Post - A beginner’s guide to Shiny modules</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>R users are increasingly trained to develop with good principles such as writing modular functions, testing their code, and decomposing long individual scripts into R projects. In recent years, such approaches have crept earlier into introductory R education with the realization that applying best practices is not an advanced skill but rather empowers beginners with a more robust structure.</p>
<p>However, new Shiny developers are confronted with two challenges: they must simultaneously learn new packages and concepts (like reactivity) which introductory tutorials demonstrate how to write their apps as single scripts. This means small changes are harder to test and debug for the groups that need it the most. Although Shiny modules offer a solution to this exact problem, they are regarded as an advanced topic and often not encountered until much later in a developer’s journey.</p>
<p>In this talk, I will demonstrate a workflow to encourage the use of modules for newer Shiny users. I argue that a ‘module-first’ approach helps to decompose design into more tangible, bite-sized, and testable components and prevent the code sprawl that makes Shiny feel intimidating. Further, this approach can be even more powerful when developing Shiny applications in the enterprise setting and onboarding new team members to existing applications.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="slides" style="width:100%; aspect-ratio:16/11;">
<embed src="slides.pdf#zoom=Fit" width="100%" height="100%">
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/F6I_jXPWFBk" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</div>



 ]]></description>
  <category>workflow</category>
  <category>rstats</category>
  <category>shiny</category>
  <guid>https://emilyriederer.com/talk/shiny-modules/</guid>
  <pubDate>Wed, 15 Mar 2023 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/shiny-modules/featured.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Oh, I’m sure it’s probably nothing</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/nulls-polyglot/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/nulls-polyglot/featured.jpg" class="img-fluid figure-img"></p>
<figcaption>Photo credit to <a href="https://unsplash.com/@davideragusa">Davide Ragusa</a> on Unsplash</figcaption>
</figure>
</div>
<p>Language interoperability and different ways of enabling “polyglot” workflows have seemed to take centerstage in the data world recently:</p>
<ul>
<li><a href="https://arrow.apache.org/">Apache Arrow</a> promises a language-independent memory format for interoperability, - <a href="https://www.rstudio.com/blog/rstudio-is-becoming-posit/">RStudio</a> its rebranding as Posit to cement their place as a leader in language-agnostic data tooling,</li>
<li>RStudio simultaneously announced <a href="https://quarto.org/">Quarto</a> as an interoperable alternative to RMarkdown which will treat python, Julia, and JS as first-class citizens</li>
<li>dbt has released its beta of <a href="https://docs.getdbt.com/docs/building-a-dbt-project/building-models/python-models">python models</a> to extend is previously SQL-focused paradigm</li>
</ul>
<p>As a general matter, these are all exciting advances with great potential to aid in different workflows <em>when used judiciously</em>. However, it also poses the question: what cognitive burdens do we alleviate and which do we add when our projects begin to leverage multiple languages?</p>
<p>Despite common data analysis tools like SQL, R, and python being high-level languages with declarative interfaces (in the case of R’s <code>tidyverse</code> and python’s <code>pandas</code>), successful usage still requires understanding the underlying assumptions and operations of each tool. There is not such thing as a truly declarative language; only those that generally make decisions that the user likes well-enough to ask for the “what” and delegate the “how”. These differences can emerge at many different levels: such as foundational issues like whether data structures are copied or modified in-place or broader design choices like default hyperparameters in machine learning libraries (e.g.&nbsp;python’s <code>scikitlearn</code> notoriously uses regularized logistic regression as the default for logistic regression.) Somewhere along that spectrum lies the fickle issue of handling null values.</p>
<p>In this post, I recap a quick case study of how incautious null handling risks data analysis validity. Then, taking a step back, I compare how R, python, and SQL behave differently when confront with null values and the implications for analysts switching between languages.</p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">TLDR</h2>
<p>A summary of these different behaviors is provided below:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;"><strong>R</strong></th>
<th style="text-align: center;"><strong>python</strong></th>
<th style="text-align: center;"><strong>SQL</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><em>Column Aggregation</em></td>
<td style="text-align: center;">NA</td>
<td style="text-align: center;">np: NA<br>pd: Value</td>
<td style="text-align: center;">Value</td>
</tr>
<tr class="even">
<td style="text-align: center;"><em>Row-wise Transformation</em></td>
<td style="text-align: center;">NA</td>
<td style="text-align: center;">NA</td>
<td style="text-align: center;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><em>Joining</em></td>
<td style="text-align: center;">Match by default</td>
<td style="text-align: center;">Match</td>
<td style="text-align: center;">No match</td>
</tr>
<tr class="even">
<td style="text-align: center;"><em>Filtering</em></td>
<td style="text-align: center;">No match</td>
<td style="text-align: center;">Match</td>
<td style="text-align: center;">No match</td>
</tr>
</tbody>
</table>
</section>
<section id="case-study" class="level2">
<h2 class="anchored" data-anchor-id="case-study">Case Study</h2>
<p>Before comparing different languages, let’s walk through a brief case study to see all the way that “lurking” nulls can surprise a junior analyst in any one language and observe a few different “contours” of the problem space.</p>
<p>Consider two tables in a retailer’s database. The <code>spend</code> table reports total sales by month and store identifier (null if online).</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>  STORE_ID MONTH AMT_SPEND
1        1     1 100.12011
2        2     1 100.31441
3       NA     1 100.40517
4        1     2  99.67098
5        2     2  98.39703
6       NA     2  98.81231
7        1     3 102.27124
8        2     3 100.20843
9       NA     3        NA</code></pre>
</div>
</div>
<p>Similarly, the <code>returns</code> table reports returned sales at the same grain.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>  STORE_ID MONTH AMT_RETURN
1        1     1         NA
2        2     1   9.972159
3       NA     1  10.071639
4        1     2   9.798444
5        2     2  10.254347
6       NA     2   9.881071
7        1     3  10.108880
8        2     3   9.951398
9       NA     3   9.849277</code></pre>
</div>
</div>
<p>In both cases, nulls are used in the <code>'AMT_*'</code> fields to denote zeros for the respective <code>month x store_id</code> combinations`.</p>
<p>To calculate something as simple as the average gross spend per store across months, an analyst might attempt to write:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb3-2">  store_id, </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg</span>(amt_spend)</span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> spend</span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">order</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">store_id</th>
<th style="text-align: right;">avg(amt_spend)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">99.60874</td>
</tr>
<tr class="even">
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.68744</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">99.63996</td>
</tr>
</tbody>
</table>
</div>
<p>However, because SQL silently drops nulls in column aggregations, the online spend is not appropriately “penalized” for its lack of March spend. The averages across all three stores look nearly equal.</p>
<p>Not only is this answer “wrong”, it can also be thought of as fundamentally changing the <strong>computand</strong> (a word I just made up. In statistics, we talk about estimands as “the conceptual thing we are trying to estimate with an estimator”. Here, we aren’t estimating anything – just computing. But, there’s still a concentual “thing we are trying to measure” and in this case, it’s our <em>tools</em> and not our <em>methods</em> that are imposing assumptions on that) to one that answers a fundamentally different question:</p>
<p>Instead of measuring “average monthly spend in Q1 by store”, we’re measuring “averaging monthly spend in Q1 by store <em>conditional on</em> there being spend”.</p>
<p>To obtain the correct result, one would write:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb4-2">  store_id, </span>
<span id="cb4-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- wrong answers</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg</span>(amt_spend) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> wrong1,  </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_spend) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(amt_spend) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> wrong2,</span>
<span id="cb4-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- right answers</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_spend) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> right1,</span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(amt_spend, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> right2</span>
<span id="cb4-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> spend</span>
<span id="cb4-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">order</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">store_id</th>
<th style="text-align: right;">wrong1</th>
<th style="text-align: right;">wrong2</th>
<th style="text-align: right;">right1</th>
<th style="text-align: right;">right2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">99.60874</td>
<td style="text-align: right;">99.60874</td>
<td style="text-align: right;">66.40583</td>
<td style="text-align: right;">66.40583</td>
</tr>
<tr class="even">
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.68744</td>
<td style="text-align: right;">100.68744</td>
<td style="text-align: right;">100.68744</td>
<td style="text-align: right;">100.68744</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">99.63996</td>
<td style="text-align: right;">99.63996</td>
<td style="text-align: right;">99.63996</td>
<td style="text-align: right;">99.63996</td>
</tr>
</tbody>
</table>
</div>
<p>With a better understand of gross sales, the analyst might next proceed to compute net sales.</p>
<p>This first requires joining the <code>spend</code> and <code>returns</code> tables. Naively, they might attempt:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb5-2">  spend.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb5-3">  returns.amt_return</span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb5-5">  spend</span>
<span id="cb5-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb5-7">  returns </span>
<span id="cb5-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb5-9">  spend.store_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.store_id <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb5-10">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">STORE_ID</th>
<th style="text-align: right;">MONTH</th>
<th style="text-align: right;">AMT_SPEND</th>
<th style="text-align: right;">amt_return</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.12011</td>
<td style="text-align: right;">NA</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.31441</td>
<td style="text-align: right;">9.972159</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">99.67098</td>
<td style="text-align: right;">9.798444</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">98.39703</td>
<td style="text-align: right;">10.254347</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">102.27124</td>
<td style="text-align: right;">10.108880</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">100.20843</td>
<td style="text-align: right;">9.951398</td>
</tr>
</tbody>
</table>
</div>
<p>However, this once again fails. Why? Although SQL handled nulls “permissively” when aggregating a column, it took a stricted stance when making the comparison on <code>spend.store_id = returns.store_id</code> in the join clause. SQL doesn’t recognize different nulls as equal. To the extent than null means “I dunno” versus “The field is not relevant to this observation”, it’s reasonable that SQL should find it hard to decide whether two “I dunno”s are equal.</p>
<p>Once again, this isn’t a “random” or inconsequential error. Continuing to use this corrupted dataset changes the computand from “net sales by month” to “net sales by month at physical retail locations”.</p>
<p>To remedy this, we can force <code>store_id</code> to take on a value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb6-2">  spend.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb6-3">  returns.amt_return</span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb6-5">  spend</span>
<span id="cb6-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb6-7">  returns </span>
<span id="cb6-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(spend.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(returns.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb6-10">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">STORE_ID</th>
<th style="text-align: right;">MONTH</th>
<th style="text-align: right;">AMT_SPEND</th>
<th style="text-align: right;">amt_return</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.12011</td>
<td style="text-align: right;">NA</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.31441</td>
<td style="text-align: right;">9.972159</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.40517</td>
<td style="text-align: right;">10.071639</td>
</tr>
<tr class="even">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">99.67098</td>
<td style="text-align: right;">9.798444</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">98.39703</td>
<td style="text-align: right;">10.254347</td>
</tr>
<tr class="even">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">98.81231</td>
<td style="text-align: right;">9.881071</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">102.27124</td>
<td style="text-align: right;">10.108880</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">100.20843</td>
<td style="text-align: right;">9.951398</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">9.849277</td>
</tr>
</tbody>
</table>
</div>
<p>And next we proceed with computing sales by month net of returns across all stores:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb7-2">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span>, </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_spend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> amt_return) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> net_spend</span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb7-5">  spend</span>
<span id="cb7-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb7-7">  returns </span>
<span id="cb7-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(spend.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(returns.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb7-10">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span>
<span id="cb7-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">order</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">month</th>
<th style="text-align: right;">net_spend</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">180.6758</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">266.9465</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">182.4194</td>
</tr>
</tbody>
</table>
</div>
<p>However, by now, you should not be surprised that this result is also incorrect. If we inspect the sequence of computations, we realize that SQL is also stricter in its null handing in <em>rowwise computations</em> than <em>column-wise aggregations</em>. The subtraction of <code>amt_spend</code> and <code>amt_return</code> obliterates the total when either is null. So, we fail to include the gross spend at Store 1 in January simply because there were no returns (and vice versa for Internet sales in March).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb8-2">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span>, </span>
<span id="cb8-3">  spend.store_id,</span>
<span id="cb8-4">  amt_spend,</span>
<span id="cb8-5">  amt_return,</span>
<span id="cb8-6">  amt_spend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> amt_return <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> net_spend</span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb8-8">  spend</span>
<span id="cb8-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb8-10">  returns </span>
<span id="cb8-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb8-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(spend.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(returns.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb8-13">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">month</th>
<th style="text-align: right;">store_id</th>
<th style="text-align: right;">amt_spend</th>
<th style="text-align: right;">amt_return</th>
<th style="text-align: right;">net_spend</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.12011</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">NA</td>
</tr>
<tr class="even">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">100.31441</td>
<td style="text-align: right;">9.972159</td>
<td style="text-align: right;">90.34225</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">100.40517</td>
<td style="text-align: right;">10.071639</td>
<td style="text-align: right;">90.33353</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">99.67098</td>
<td style="text-align: right;">9.798444</td>
<td style="text-align: right;">89.87254</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">98.39703</td>
<td style="text-align: right;">10.254347</td>
<td style="text-align: right;">88.14268</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">98.81231</td>
<td style="text-align: right;">9.881071</td>
<td style="text-align: right;">88.93124</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">102.27124</td>
<td style="text-align: right;">10.108880</td>
<td style="text-align: right;">92.16236</td>
</tr>
<tr class="even">
<td style="text-align: right;">3</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">100.20843</td>
<td style="text-align: right;">9.951398</td>
<td style="text-align: right;">90.25704</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">9.849277</td>
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
</div>
<p>A few ways to get the correct answer are shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb9-2">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span>, </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(amt_spend,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(amt_return,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> right1,</span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_spend) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_return) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> right2</span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb9-6">  spend</span>
<span id="cb9-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb9-8">  returns </span>
<span id="cb9-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(spend.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(returns.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb9-11">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span>
<span id="cb9-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">order</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">month</th>
<th style="text-align: right;">right1</th>
<th style="text-align: right;">right2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">280.7959</td>
<td style="text-align: right;">280.7959</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">266.9465</td>
<td style="text-align: right;">266.9465</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">172.5701</td>
<td style="text-align: right;">172.5701</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="observations" class="level2">
<h2 class="anchored" data-anchor-id="observations">Observations</h2>
<p>The preceding example hopefully illustrates a few points:</p>
<ul>
<li>Nulls can cause issues in the most basic of analyses</li>
<li>Beyond causing random or marginal errors, null handling changes the questions being answered</li>
<li>Even within a language, null handling may feel inconsistent (w.r.t. strictness) across different operations</li>
</ul>
<p>So, with that, let’s compare languages!</p>
</section>
<section id="comparison" class="level2">
<h2 class="anchored" data-anchor-id="comparison">Comparison</h2>
<p>Below, we compare how R, SQL, and python handle column aggregation, rowwise transformation, joining, and filtering.</p>
<section id="aggregation" class="level3">
<h3 class="anchored" data-anchor-id="aggregation">Aggregation</h3>
<p>SQL, as we saw before, simply ignores nulls in aggregation functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> sum_x, </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_null_x</span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl</span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">sum_x</th>
<th style="text-align: right;">n_null_x</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>
</div>
<p>Built by and for statistician’s, R is scandalized at the very idea of attempting to do math with null columns. For aggregation functions, it returns <code>NA</code> as a form of protest should any entry of the vector provided be null. (This can be overridden with the <code>na.rm</code> parameter.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x)</span>
<span id="cb11-3"></span>
<span id="cb11-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x)</span>
<span id="cb11-5">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">x</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>When it comes to python, well, it depends. Base and <code>numpy</code> operations act more like R whereas <code>pandas</code> aggregation acts more like SQL.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb13-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,np.nan]</span>
<span id="cb13-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb13-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>:x,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>:y})</span>
<span id="cb13-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x)</span>
<span id="cb13-7">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x)</span>
<span id="cb13-8">df.agg({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>]})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>nan
nan
       x
sum  3.0</code></pre>
</div>
</div>
</section>
<section id="transformation" class="level3">
<h3 class="anchored" data-anchor-id="transformation">Transformation</h3>
<p>All of SQL, R, and python return NA when <code>NA</code>s are used in atomic or rowwise transformations.</p>
<p>In SQL:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> z</span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl</span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">x</th>
<th style="text-align: right;">y</th>
<th style="text-align: right;">z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
</div>
<p>In R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb16-2">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y)</span>
<span id="cb16-3"></span>
<span id="cb16-4">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y)</span>
<span id="cb16-5">df</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">x</th>
<th style="text-align: right;">y</th>
<th style="text-align: right;">z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">x</th>
<th style="text-align: right;">y</th>
<th style="text-align: right;">z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>In python:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">np.array(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.array(y)</span>
<span id="cb17-2">df.assign(z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> d: d.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d.y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>array([-2., -2., nan])
     x  y    z
0  1.0  3 -2.0
1  2.0  4 -2.0
2  NaN  5  NaN</code></pre>
</div>
</div>
</section>
<section id="joining" class="level3">
<h3 class="anchored" data-anchor-id="joining">Joining</h3>
<p>The situation with joins may feel like the opposite of aggregation. Here, R and python’s most popular data wrangling packages are more permissive than SQL.</p>
<p>As we saw in the case study, SQL does not match on nulls.</p>
<p>Consider <code>tbl1</code> and <code>tbl2</code> as shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl1</span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">TRUE</td>
</tr>
</tbody>
</table>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl2</span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">Y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">FALSE</td>
</tr>
</tbody>
</table>
</div>
<p>Attempts to join return no results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> tbl1.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, tbl2.Y </span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb21-3">  tbl1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span> tbl2 </span>
<span id="cb21-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span> </span>
<span id="cb21-5">  tbl1.A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tbl2.A <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> </span>
<span id="cb21-6">  tbl1.B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tbl2.B</span></code></pre></div>
<table>
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
<th style="text-align: left;">y</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
</div>
<p>In contrast, default behavior for base R’s <code>merge</code> and <code>dplyr</code> <em>does match</em> on nulls. (Although, either behavior can be altered with the <code>incomparables</code> or <code>na_matches</code> arguments, respectively.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb22-2">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>))</span>
<span id="cb22-4">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
<th style="text-align: left;">Y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">TRUE</td>
<td style="text-align: left;">FALSE</td>
</tr>
</tbody>
</table>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
<th style="text-align: left;">Y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">TRUE</td>
<td style="text-align: left;">FALSE</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Similarly, <code>pandas</code> also matches on nulls for joining.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb23-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb23-3">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, np.nan, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]], columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>])</span>
<span id="cb23-4">df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, np.nan, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>])</span>
<span id="cb23-5">pd.merge(df1, df2, on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   A   B     X      Y
0  1 NaN  True  False</code></pre>
</div>
</div>
<p><code>R</code> and <code>python</code>’s behavior here seems most surprising. One might expect joining to work the same as raw logical evaluation works. However, neither language “likes” null comparison in its raw form. Instead, the default behavior is intentionally altered in these higher-level joining functions.</p>
<p>In R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
</div>
<p>In python:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">np.nan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> np.nan</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>False</code></pre>
</div>
</div>
</section>
<section id="filtering" class="level3">
<h3 class="anchored" data-anchor-id="filtering">Filtering</h3>
<p>Finally, both SQL and R drop null records used in filtering statements since comparisons with these values are incapable of returning a TRUE/FALSE value that is used to subset the rows. In python, however, pandas does preserve nulls in filter conditions.</p>
<p>Using the same <code>tbl1</code> shown above, we can also confirm that SQL proactively drops nulls in where clauses where they cannot be readily compared to non-null values. This seems quite consistent with its behavior in the joining case.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> A, B, X </span>
<span id="cb29-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl1 </span>
<span id="cb29-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table>
<thead>
<tr class="header">
<th style="text-align: right;">a</th>
<th style="text-align: left;">b</th>
<th style="text-align: left;">x</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
</div>
<p>Both base R and <code>dplyr</code> paradigms follow suit here.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb30-2">df1[df1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>B <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]</span>
<span id="cb30-3">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(df1, B <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">NA</td>
<td style="text-align: right;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
</div>
</div>
<p>However, bucking the trend, multiple approaches to subsetting <code>pandas</code> data will not drop nulls in filtering comparisons.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, np.nan, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]], columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>])</span>
<span id="cb31-2">df1[df1.B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb31-3">df1.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B != 1'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   A   B     X
0  1 NaN  True
   A   B     X
0  1 NaN  True</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In data computation and analysis, the devil is often in the details. It’s not breaking news that low-level reasoning on the careful handling of null values can jeopardize the resulting analyses. However, as analysts take on increasingly complex tasks and using a plehora of different tools, it’s more important than ever for both data producers and consumers to consider the choices they are making in encoding and handling these values across the stack.</p>


</section>

 ]]></description>
  <category>rstats</category>
  <category>python</category>
  <category>sql</category>
  <category>data</category>
  <category>data-disasters</category>
  <guid>https://emilyriederer.com/post/nulls-polyglot/</guid>
  <pubDate>Mon, 05 Sep 2022 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/nulls-polyglot/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using databases with Shiny</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/shiny-db/</link>
  <description><![CDATA[ 





<p>Shiny apps are R’s answer to building interface-driven applications that help expose important data, metrics, algorithms, and more with end-users. However, the more interesting work that your Shiny app allows users to do, the more likely users are to want to save, return to, and alter some of the ways that they interacted with your work.</p>
<p>This creates a need for <strong>persistent storage</strong> in your Shiny application, as opposed to the ephemeral in-memory of basic Shiny applications that “forget” the data that they generated as soon as the application is stopped.</p>
<p>Relational databases are a classic form of persistent storage for web applications. Many analysts may be familiar with <em>querying</em> relational databases to retrieve data, but <em>managing</em> a database for use with a web application is slightly more complex. You’ll find yourself needing to define tables, secure data, and manage connections. More importantly, you might worry about what things that you do not know you should be worrying about.</p>
<p>This post provides some tips, call-outs, and solutions for using a relational database for persistent storage with Shiny. In my case, I rely on a Shiny app built with the <a href="https://thinkr-open.github.io/golem/"><code>golem</code> framework</a> and served on the Digital Ocean App platform.</p>
<section id="databases-options-for-storage" class="level2">
<h2 class="anchored" data-anchor-id="databases-options-for-storage">Databases &amp; Options for Storage</h2>
<p>Dean Attali’s <a href="https://deanattali.com/blog/shiny-persistent-data-storage/">blog post on persistent storage</a> compares a range of options for persistent storage including databases, S3 buckets, Google Drive, and more.</p>
<p>For my application, I anticipated the need to store and retrieve sizable amounts of structured data, so using a relational database seemed like a good option. Since I was hosting my application on <a href="https://m.do.co/c/6c5fdc198503">Digital Ocean App Platform</a>, I could create a <a href="https://www.digitalocean.com/products/managed-databases/">managed Postgres database</a> with just a few button clicks. As I share in the “Key Issues” section, this solution offers some significant benefits in terms of security.</p>
<p>For more information on different options for hosting Shiny apps and some insight into why I chose Digital Ocean, check out Peter Solymos’ excellent blog on <a href="https://hosting.analythium.io/">Hosting Data Apps</a>.</p>
</section>
<section id="talking-to-your-database-through-shiny" class="level2">
<h2 class="anchored" data-anchor-id="talking-to-your-database-through-shiny">Talking to your database through Shiny</h2>
<p>General information on working with databases with R is included on RStudio’s <a href="https://db.rstudio.com/">excellent website</a>. Below, I focus on a few topics specific to databases with Shiny, Shiny apps built in the <code>{golem}</code> framework, and Shiny apps served on Digital Ocean in particular.</p>
<section id="creating-a-database" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-database">Creating a database</h3>
<p>To create a database for my application in DigitalOcean, I simply went to:</p>
<p><code>Settings &gt; Add Component &gt; Database</code></p>
<p>This creates a fully-managed Postgres databases so you do not have to thing a ton about the underlying set-up or configuration.</p>
<p>At the time on writing, I was able to add a 1GB Dev Database for /$7 / month. For new users, DigitalOcean offers a generous number of free credits for use in the first 60 days. For a more mature product, one can add or switch to a production-ready Managed Database.</p>
<p>After a few minutes, the database has launched and its Connection Parameters are provided, which look something like this:</p>
<pre><code>host     : abc.b.db.ondigitalocean.com
port     : 25060
username : db
password : abc123
database : db
sslmode  : require</code></pre>
<p>By default, the Dev Database registers your application as a Trusted Source, meaning that only traffic from the application can attempt to access the database. As the <a href="https://docs.digitalocean.com/products/databases/postgresql/how-to/secure/#firewalls">documentation</a> explains, this type of firewall improves security by preventing against brute-force password or denial-of-service attacks from the outside.</p>
<p><em>Note: If you just want to experiment with databases and Shiny but aren’t using an in-production, served application, you can mostly skip this step and use the “Dev” approach that is discuss in “Dev versus Prod” subsection of “Key Issues” below.</em></p>
</section>
<section id="connecting-to-the-database" class="level3">
<h3 class="anchored" data-anchor-id="connecting-to-the-database">Connecting to the database</h3>
<p>We can use the connection parameters provided to connect to the database using R’s <code>DBI</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RPostgres<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>(),</span>
<span id="cb2-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aabc.b.db.ondigitalocean.com"</span>,</span>
<span id="cb2-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb2-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb2-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password  =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc123"</span>,</span>
<span id="cb2-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25060</span>)</span></code></pre></div>
</div>
<p>We will talk about ways to not hardcode one’s password in the last section.</p>
</section>
<section id="creating-tables" class="level3">
<h3 class="anchored" data-anchor-id="creating-tables">Creating tables</h3>
<p>Next, you can set up tables in your database that your application will require.</p>
<p>If you know SQL DDL, you can write a <a href="https://www.tutorialspoint.com/sql_certificate/using_ddl_statements.html">CREATE TABLE statement</a> which defines a tables names, fields, and data types. However, this can feel verbose or uncomfortable to analysts who mostly use DML (e.g.&nbsp;<code>SELECT</code>, <code>FROM</code>, <code>WHERE</code>).</p>
<p>Fortunately, you can also define a table using R’s <code>DBI</code> package. First, create a simple dataframe with a single record to help R infer the appropriate and expected data types. Then pass the first <em>zero</em> rows of the table (essentially, only the schema) to <code>DBI::dbCreateTable()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>))</span>
<span id="cb3-2">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbCreateTable</span>(con, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fields =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
</div>
<p>To prove that this works, I show a “round trip” of the data using an in-memory SQLite database. Note that this is <em>not</em> an option for persistent storage because in-memory databases are not persistent. This is only to “prove” that this approach can create database tables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">con_lite <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RSQLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb4-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>))</span>
<span id="cb4-3">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbCreateTable</span>(con_lite, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fields =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb4-4">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbListTables</span>(con_lite)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "my_data"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbReadTable</span>(con_lite, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] x y z
&lt;0 rows&gt; (or 0-length row.names)</code></pre>
</div>
</div>
<p>But where should you run this script? You do <em>not</em> want to put this code in your app to run every time the app launches, but we just limited database traffic to the app so we cannot run it locally. Instead, you can run this code from the app’s <a href="https://docs.digitalocean.com/products/app-platform/concepts/console/">console</a>. (Alternatively, if you upgrade to a Managed Database, I believe you can also whitelist your local IP as another trusted source.)</p>
</section>
<section id="forming-the-connection-within-your-app" class="level3">
<h3 class="anchored" data-anchor-id="forming-the-connection-within-your-app">Forming the connection within your app</h3>
<p>Once your database is set-up and ready to go, you can begin to integrate it into your application.</p>
<p>I was using the <a href="https://thinkr-open.github.io/golem/"><code>golem</code> framework</a> for my application, so I connected to the database and made the initial data pull by adding the following lines in my top-level <code>app_server.R</code> file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">db_con</span>()</span>
<span id="cb8-2">tbl_init <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbReadTable</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>)</span></code></pre></div>
</div>
<p>The custom <code>db_con()</code> function contains <em>roughly</em> the <code>DBI::dbConnect()</code> code we saw above, but I turned it into a function to incorporate some added complexity which I will describe shortly.</p>
<p>Most of the rest of my application uses Shiny modules, and this connection object and initial data pull can be seamless passed into either.</p>
<p>To see similar code in a full app, check out Colin Fay’s <a href="https://github.com/ColinFay/golemexamples/blob/master/golemqlite/R/app_server.R#L7"><code>golemqlite</code></a> project on Github.</p>
</section>
<section id="crud-operations" class="level3">
<h3 class="anchored" data-anchor-id="crud-operations">CRUD operations</h3>
<p>CRUD operations (Create, Read, Update, Delete) are at the heart of any interactive application with persistent data storage.</p>
<p>Interacting with your database within Shiny begins to look like more rote Shiny code. I do not describe this process in much detail since it is quite specific to what your app is trying to accomplish, but <a href="https://www.tychobra.com/posts/2020-01-29-shiny-crud-traditional/">this blog post</a> provides some nice examples.</p>
<p>In short:</p>
<ul>
<li>To add records to the table, you can use <code>DBI::dbAppendTable()</code></li>
<li>To remove records from the table, you can construct a <code>DELETE FROM my_data WHERE &lt;conditions&gt;</code> statement and run it with <code>DBI::dbExecute()</code></li>
</ul>
<p>Some cautions on the second piece are included in the “Key Issues” section.</p>
</section>
</section>
<section id="key-issues" class="level2">
<h2 class="anchored" data-anchor-id="key-issues">Key Issues</h2>
<p>Adding a permanent data store to your application can open up a lot of exciting new functionality. However, it may create some challenges that your typical data analyst or Shiny developer has not faced before. In this last section, I highlight a few key issues that you should be aware of and provide some recommendations.</p>
<section id="securing-data-transfer" class="level3">
<h3 class="anchored" data-anchor-id="securing-data-transfer">Securing data transfer</h3>
<p>Already, we have one safeguard in place for data security since our application is the only Trusted Source able to interface with our database.</p>
<p>But, just like we secure our database credentials, it becomes important to think about securing the database itself. This is made easy with DigitalOcean because data is <a href="https://docs.digitalocean.com/products/databases/">end-to-end encrypted</a>, but depending on how or by whom your data is managed, this is something to bear in mind.</p>
</section>
<section id="securing-database-credentials" class="level3">
<h3 class="anchored" data-anchor-id="securing-database-credentials">Securing database credentials</h3>
<p>No matter how safe the data itself is, it still may be at risk if anyone can obtain our database credentials.</p>
<p>Previously, I demonstrated how to connect to a database from R like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RPostgres<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>(),</span>
<span id="cb9-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aabc.b.db.ondigitalocean.com"</span>,</span>
<span id="cb9-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb9-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb9-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password  =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc123"</span>,</span>
<span id="cb9-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25060</span>)</span></code></pre></div>
</div>
<p>However, you should never ever put your password in plaintext like this. Instead, you can use <em>environment variables</em> to store the value of sensitive credentials like a password or even a username like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RPostgres<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>(),</span>
<span id="cb10-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aabc.b.db.ondigitalocean.com"</span>,</span>
<span id="cb10-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb10-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb10-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_PASS"</span>),</span>
<span id="cb10-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25060</span>)</span></code></pre></div>
</div>
<p>Then, you can define that same environment variable more securely in <a href="https://docs.digitalocean.com/products/app-platform/how-to/use-environment-variables/">within the App Platform</a>.</p>
</section>
<section id="securing-input-integrity-sql-injection" class="level3">
<h3 class="anchored" data-anchor-id="securing-input-integrity-sql-injection">Securing input integrity (SQL injection)</h3>
<p>Finally, it’s also important to be aware of <a href="https://www.w3schools.com/sql/sql_injection.asp">SQL injection</a> to ensure that your database does not get corrupted.</p>
<p>SQL injection is usually discussed in the concept of malicious attacks. For example, W3 schools shows the following example where an application could be tricked into providing data on <em>all</em> users instead of a single user:</p>
<pre><code>txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;</code></pre>
<p>If the entered <code>UserId</code> is <code>"UserId = 105 OR 1=1"</code>, then the full SQL string will be <code>"SELECT * FROM Users WHERE UserId = 105 OR 1=1;"</code>.</p>
<p>SQL injection is also at jokes you make have heard about “little Bobby Drop Tables” (<a href="https://xkcd.com/327/">xkcd</a>).</p>
<p><img src="https://imgs.xkcd.com/comics/exploits_of_a_mom.png" class="img-fluid"></p>
<p>That joke also, in some odd way, highlights that SQL injection need not be malicious. Rather, whenever we have software opened up to users beyond ourselves, they will likely use it in unexpected ways that push the system to its limit. For example, a user might try to enter or remove values from our database with double quotes, semicolons, or other features that mean something different to SQL than in human parlance and corrupt the code. Regardless of intent, we can protect against bad SQL that will break our application by using the <code>DBI::sqlInterpolate()</code> function.</p>
<p>A demonstration of this function and how it can protect against bad query generation is shown in <a href="https://shiny.rstudio.com/articles/sql-injections.html">this post</a> by RStudio.</p>
</section>
<section id="dev-versus-prod" class="level3">
<h3 class="anchored" data-anchor-id="dev-versus-prod">Dev versus Prod</h3>
<p>However, you may have realized a flaw in this approach. Our entire app now depends on forming a connection <em>that can only be made by the in-production app.</em> This meams you cannot test your application locally. However, even if our local traffic was not categorically blocked, we wouldn’t <em>want</em> to test our app on the production database and recklessly add and remove entries.</p>
<p>Instead, we would ideally have <em>separate</em> databases: one for development and one for production. Ideally, these would be the same type of database (e.g.&nbsp;both Postgres) to catch nuances of different SQL syntax and database operations. However, to keep things simpler (and cheaper), I decided to use an in-memory SQLite database locally.</p>
<p>To accomplish this, I wrapped my database connection in a custom <code>db_con()</code> function that checks if the app is running in development or production (using <code>golem::app_prod()</code> which in turn checks the <code>R_CONFIG_ACTIVE</code> environment variable) and connects to different databases in either case. In the development case, it creates an in-memory SQLite database and remakes the empty table.</p>
<p>(Another alternative to creating the database on-the-fly is to <a href="https://datacarpentry.org/R-ecology-lesson/05-r-and-databases.html#Creating_a_new_SQLite_database">pre-make a SQLite database</a> saved to a <code>.sqlite</code> file and connect to that. But for this example, my sample table is so simple, creating it manually takes a negligible amount of time and keeps things quite readable, so I left it as-is.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">db_con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prod =</span> golem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app_prod</span>()) {</span>
<span id="cb12-2">  </span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (prod) {</span>
<span id="cb12-4">    </span>
<span id="cb12-5">    con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RPostgres<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>(),</span>
<span id="cb12-6">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc.b.db.ondigitalocean.com"</span>,</span>
<span id="cb12-7">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb12-8">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb12-9">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_PASS"</span>),</span>
<span id="cb12-10">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25060</span>)</span>
<span id="cb12-11">    </span>
<span id="cb12-12">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb12-13">    </span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSQLite"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) )</span>
<span id="cb12-15">    con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb12-16">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>))</span>
<span id="cb12-17">    DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>, df)</span>
<span id="cb12-18">    </span>
<span id="cb12-19">  }</span>
<span id="cb12-20">  </span>
<span id="cb12-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(con)</span>
<span id="cb12-22">  </span>
<span id="cb12-23">}</span></code></pre></div>
</div>
</section>
<section id="managing-connections" class="level3">
<h3 class="anchored" data-anchor-id="managing-connections">Managing connections</h3>
<p>So, you’ve built a robust app that can run against a database locally or on your production server. Great! It’s time to share your application with the world. But what if it is <em>so</em> popular that you have a lot of concurrent users and they are all trying to work with the database at once?</p>
<p>To maintain good application performance, you have to be careful about managing the database connection objects that you create (with <code>DBI::dbConnect()</code>) and to close them when you are doing using them.</p>
<p>If this sounds manual and tedious, you’re in luck! The <a href="https://rstudio.github.io/pool/">{pool}</a> package adds a layer of abstraction to manage a <em>set</em> of connections and execute new queries to an available idle collection. Full examples are given on the package’s website, but in short <code>{pool}</code> is quite easy to implement due to it’s <code>DBI</code>-like syntax. You can replace <code>DBI::dbConenct()</code> with <code>pool::dbPool()</code> and proceed as usual!</p>


</section>
</section>

 ]]></description>
  <category>rstats</category>
  <category>shiny</category>
  <category>data</category>
  <guid>https://emilyriederer.com/post/shiny-db/</guid>
  <pubDate>Sun, 02 Jan 2022 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/shiny-db/featured.png" medium="image" type="image/png" height="107" width="144"/>
</item>
<item>
  <title>How to Make R Markdown Snow</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/snow/</link>
  <description><![CDATA[ 





<p>Last year, I tweeted about how to spread holiday cheer by letting your R Markdown documents snow. After all, what better to put people in the holiday spirit than to add a random 5% probability that whatever part of a document they are trying to read will be covered?</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
No one:<br><br>Absolutely no one:<br><br>Me: SO, I know we can't have a holiday party this year, but we CAN make our <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> R Markdown reports snow before we send them to each other <a href="https://t.co/SSBzlgb3TV">https://t.co/SSBzlgb3TV</a><br>HT to <a href="https://t.co/c7c5c5csMK">https://t.co/c7c5c5csMK</a> for the heavy lifting <a href="https://t.co/hIu7z0knR4">pic.twitter.com/hIu7z0knR4</a>
</p>
— Emily Riederer (<span class="citation" data-cites="EmilyRiederer">@EmilyRiederer</span>) <a href="https://twitter.com/EmilyRiederer/status/1337178684868980738?ref_src=twsrc%5Etfw">December 10, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I make no promises that this will amuse your recipients, but at least it seemed to strike a cord with other R Markdown creators. This year, I decided to write it up step-by-step. As silly as the example is, I think it demonstrates (through slight abuse) some useful features of R Markdown. Much like ice sculpting, we will apply the powertool that is R Markdown to achieve our rather fanciful end.</p>
<p>If you want to skip the discussed, you can check out the <a href="https://github.com/emilyriederer/demo-rmd-snow">full project</a>, the main <a href="https://github.com/emilyriederer/demo-rmd-snow/blob/main/index.html">R Markdown file</a>, or the <a href="https://emilyriederer.github.io/demo-rmd-snow/">rendered output</a>. The rendered output is also shown below:</p>
<p><img src="https://emilyriederer.com/post/snow/featured.gif" class="img-fluid"></p>
<p>In the rest of this post, I’ll touch on three R Markdown tricks and their fanciful uses:</p>
<ul>
<li><strong>Using child documents…</strong> to add snowflake</li>
<li><strong>Including raw HTML and custom CSS style…</strong> to animate them</li>
<li><strong>Evaluating chunks conditionally…</strong> to keep things seasonal</li>
</ul>
<p>We will see how to dress up this <a href="https://github.com/emilyriederer/demo-rmd-snow/blob/main/index.Rmd">very important business R Markdown</a></p>
<p>Much more useful applications of these same features are discussed in the linked sections of the <a href="https://bookdown.org/yihui/rmarkdown-cookbook/">R Markdown Cookbook</a>.</p>
<section id="child-documents" class="level2">
<h2 class="anchored" data-anchor-id="child-documents">Child documents</h2>
<p><a href="https://bookdown.org/yihui/rmarkdown-cookbook/child-document.html">Child documents</a> allow R Markdown authors to combine multiple R Markdown files into a single final output rendered in a consistent environment. This helps create a more manageable, modular workflow if you are working on a long project or anaylsis with many distinct parts or if there are some pieces of boilerplate text or analysis that you wish to inject into many projects.</p>
<p>To add child documents, we create an empty R code chunk, and use the <code>child</code> chunk option to pass the path to the R Markdown file that we wish to include. In our case, we reference our <code>snow.Rmd</code> file.</p>
<pre><code>```{r child = "snow.Rmd"}`r ''`
```</code></pre>
<p>Of course, since child documents are functionally the same as including files in the same document, we could have included this material in the same file. However, since snowflakes should clearly only be placed in <em>very</em> important documents, it is good to use best practices and take a modular approach. Tactically, this also makes it easier to “turn them on an off” at will or swap them our for New Years fireworks, Valentine’s Day hearts, and more.</p>
</section>
<section id="including-html-and-css" class="level2">
<h2 class="anchored" data-anchor-id="including-html-and-css">Including HTML and CSS</h2>
<p>So, what is in the <a href="https://github.com/emilyriederer/demo-rmd-snow/blob/main/snow.Rmd"><code>snow.Rmd</code></a> file?</p>
<p>First, we have to bring in the snowflakes themselves.</p>
<pre><code>&lt;div class="snowflakes" aria-hidden="true"&gt;
  &lt;div class="snowflake"&gt;
  ❅
  &lt;/div&gt;
  &lt;!-- many more snowflakes... --&gt;
&lt;/div&gt;</code></pre>
<p>Because this R Markdown will render to an HTML document, we are free to include raw HTML text the same way we include narrative, English-language text. Here, I wrap unicode snowflakes in <code>&lt;divs&gt;</code> so I can attach CSS classes to them.</p>
<p>Similarly, R Markdowns that will be rendered to HTML can use all the benefits of web technology like CSS and JavaScript. <a href="https://bookdown.org/yihui/rmarkdown-cookbook/html-css.html">Custom CSS</a> can be included either with the <code>css</code> language engine or a reference in the YAML header to an external <code>.css</code> file. For compactness, I go with the former.</p>
<p>A <code>css</code> chunk adds CSS code used to animate the snowflake divs. This is taken nearly verbatim from <a href="https://codepen.io/codeconvey/pen/xRzQay">this CodePen</a>. Since this is rather lengthy, we can also use the <code>echo = FALSE</code> chunk option to not output all of the CSS in our final document.</p>
<pre><code>```{css echo = FALSE}`r ''`
&lt;&lt;css goes here&gt;&gt;
```</code></pre>
<p>For more tips on writing CSS for R Markown, check out my <a href="../..\post/rmarkdown-css-tips/">post</a> on finding the right selectors.</p>
</section>
<section id="conditional-chunk-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="conditional-chunk-evaluation">Conditional chunk evaluation</h2>
<p>The above two tricks are as for as my demo goes since I only planned to render it once. However, if you are creating automated reports and fear your recipients have limited patience for animated snowflakes, we can also use R Markdown <a href="https://yihui.org/knitr/options/">chunk options</a> with <a href="https://bookdown.org/yihui/rmarkdown-cookbook/chunk-variable.html">variables as arguments</a> to only allow these snowflakes to appear during a certain time period.</p>
<p>So, for example instead of:</p>
<pre><code>```{r child = "snow.Rmd"}`r ''`
```</code></pre>
<p>We might type:</p>
<pre><code>```{r child = "snow.Rmd", eval = (substr(Sys.Date(), 6, 7) == 12)}`r ''`
```</code></pre>
<p>To only allow the child document to be included in December.</p>
<p>If we had chosen not to use child documents, we could also use chunks to achieve conditional evaluation using the <a href="https://bookdown.org/yihui/rmarkdown-cookbook/eng-asis.html"><code>asis</code> engine</a>.</p>


</section>

 ]]></description>
  <category>rstats</category>
  <category>rmarkdown</category>
  <guid>https://emilyriederer.com/post/snow/</guid>
  <pubDate>Sat, 11 Dec 2021 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/snow/featured.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>UIUC STAT447 (Data Science Programming) Guest Lecture</title>
  <link>https://emilyriederer.com/talk/meetup-stat447/</link>
  <description><![CDATA[ 




<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> <a href="https://www.youtube.com/watch?v=Q-6Bm0ADXQg">Video</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>In this talk, I pulled from themes in my work on R Markdown Driven Development, innersource analytical tooling, and data science career pathing to help students understand the connections between their classroom learnings and “real world” data science work</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="slides" style="width:100%; aspect-ratio:16/11;">
<embed src="slides.pdf#zoom=Fit" width="100%" height="100%">
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/Q-6Bm0ADXQg" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</div>



 ]]></description>
  <category>rstats</category>
  <category>workflow</category>
  <guid>https://emilyriederer.com/talk/meetup-stat447/</guid>
  <pubDate>Wed, 17 Nov 2021 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/meetup-stat447/featured.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Update: column-name contracts with dbtplyr</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/convo-dbt-update/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/convo-dbt-update/featured.PNG" class="img-fluid figure-img"></p>
<figcaption>Diff of original dbt model using dbtplyr’s concise, declarative macros</figcaption>
</figure>
</div>
<p>Earlier this year, I wrote about <a href="../..\post/convo-dbt/">embedding column-name contracts in data pipelines with dbt</a>. This, in turn, built off my post regarding the general theory of <a href="../..\post/column-name-contracts/">using controlled vocabularies to define data models</a>.</p>
<p>The general idea of the post was:</p>
<ul>
<li>Column names are the “user interface” between data producers and consumers</li>
<li>Standardizing a controlled vocabulary of naming “keywords” can communicate semantics and type information</li>
<li>These names can then be operated on in code and aid in automated documentation, testing, and transformation</li>
</ul>
<p>My first post illustrated these concepts using packages from R’s <code>tidyverse</code>. This suite of packages has an expressive, declarative API that inadvertently shaped a lot of my thinking around “naming things”. Clever naming schemes make things <em>just work</em>. The latter, as the name suggests, used <code>SQL</code> and <code>dbt</code>. While this too proved effective, it felt less elegant and satisfying. This inspired me: what if more <code>dplyr</code> syntax existed in <code>dbt</code>?</p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">TLDR</h2>
<p>This inspired the creation of the <code>dbtplyr</code> dbt package (find it on <a href="https://github.com/emilyriederer/dbtplyr">GitHub</a>). This package aims to port the semantic sugar of <code>dplyr</code>’s <code>select-helpers</code> and related functionality to <code>dbt</code> to support both controlled vocabularies and, more broadly, more concise and semantic code.</p>
<p>A full explanation is provided below. Additionally, for those that have read the previous post, I have also rewritten my COVID data modeling example to use the macros available in <code>dbtplyr</code>. Comparing the <a href="https://github.com/emilyriederer/dbt-convo-covid/pull/2/files">diff of the <code>model_monitor</code> model between the two versions</a> illustrates how <code>dbtplyr</code>’s semantic sugar creates more concise and readable templating code.</p>
</section>
<section id="introducing-dbtplyr" class="level2">
<h2 class="anchored" data-anchor-id="introducing-dbtplyr">Introducing dbtplyr</h2>
<p>To paraphrase the <code>README</code>:</p>
<p>This add-on package enhances <code>dbt</code> by providing macros which programmatically select columns based on their column names. It is inspired by the <a href="https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-colwise/"><code>across()</code> function</a> and the <a href="https://tidyselect.r-lib.org/reference/select_helpers.html"><code>select helpers</code></a> in the R package <code>dplyr</code>.</p>
<p><code>dplyr</code> (&gt;= 1.0.0) has helpful semantics for selecting and applying transformations to variables based on their names. For example, if one wishes to take the <em>sum</em> of all variables with name prefixes of <code>N</code> and the mean of all variables with name prefixes of <code>IND</code> in the dataset <code>mydata</code>, they may write:</p>
<pre><code>summarize(
  mydata, 
  across( starts_with('N'), sum),
  across( starts_with('IND', mean)
)</code></pre>
<p>This package enables us to similarly write <code>dbt</code> data models with commands like:</p>
<pre><code>{% set cols = dbtplyr.get_column_names( ref('mydata') ) %}
{% set cols_n = dbtplyr.starts_with('N', cols) %}
{% set cols_ind = dbtplyr.starts_with('IND', cols) %}

select

  {{ dbtplyr.across(cols_n, "sum({{var}}) as {{var}}_tot") }},
  {{ dbtplyr.across(cols_ind, "mean({{var}}) as {{var}}_avg") }}

from {{ ref('mydata') }}</code></pre>
<p>which <code>dbt</code> then compiles to standard SQL.</p>
<p>Alternatively, to protect against cases where no column names matched the pattern provided (e.g.&nbsp;no variables start with <code>n</code> so <code>cols_n</code> is an empty list), one may instead internalize the final comma so that it is only compiled to SQL when relevant by using the <code>final_comma</code> parameter of <code>across</code>.</p>
<pre><code>  {{ dbtplyr.across(cols_n, "sum({{var}}) as {{var}}_tot", final_comma = true) }}</code></pre>
<p>Note that, slightly more <code>dplyr</code>-like, you may also write:</p>
<pre><code>select

  {{ dbtplyr.across(dbtplyr.starts_with('N', ref('mydata')), "sum({{var}}) as {{var}}_tot") }},
  {{ dbtplyr.across(dbtplyr.starts_with('IND', ref('mydata')), "mean({{var}}) as {{var}}_avg") }}

from {{ ref('mydata') }}</code></pre>
<p>But, as each function call is a bit longer than the equivalent <code>dplyr</code> code, I personally find the first form more readable.</p>
<p>The complete list of macros included are:</p>
<p><strong>Functions to apply operation across columns</strong></p>
<ul>
<li><code>across(var_list, script_string, final_comma)</code></li>
<li><code>c_across(var_list, script_string)</code></li>
</ul>
<p><strong>Functions to evaluation condition across columns</strong></p>
<ul>
<li><code>if_any(var_list, script_string)</code></li>
<li><code>if_all(var_list, script_string)</code></li>
</ul>
<p><strong>Functions to subset columns by naming conventions</strong></p>
<ul>
<li><code>starts_with(string, relation or list)</code></li>
<li><code>ends_with(string, relation or list)</code></li>
<li><code>contains(string, relation or list)</code></li>
<li><code>not_contains(string, relation or list)</code></li>
<li><code>one_of(string_list, relation or list)</code></li>
<li><code>not_one_of(string_list, relation or list)</code></li>
<li><code>matches(string, relation)</code></li>
<li><code>everything(relation)</code></li>
<li><code>where(fn, relation)</code> where <code>fn</code> is the string name of a <a href="https://docs.getdbt.com/reference/dbt-classes/#column">Column type-checker</a> (e.g.&nbsp;“is_number”)</li>
</ul>
<p>Note that all of the select-helper functions that take a relation as an argument can optionally be passed a list of names instead.</p>
<p>Documentation for these functions is available on the <a href="https://emilyriederer.github.io/dbtplyr/">package website</a> and in the <a href="https://github.com/emilyriederer/dbtplyr/blob/main/macros/macro.yml"><code>macros/macro.yml</code></a> file.</p>


</section>

 ]]></description>
  <category>rstats</category>
  <category>dbt</category>
  <guid>https://emilyriederer.com/post/convo-dbt-update/</guid>
  <pubDate>Tue, 21 Sep 2021 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/convo-dbt-update/featured.PNG" medium="image"/>
</item>
<item>
  <title>A lightweight data validation ecosystem with R, GitHub, and Slack</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/data-valid-lightweight/</link>
  <description><![CDATA[ 





<p>Data quality monitoring is an essential part of any data analysis or business intelligence workflow. As such, an increasing number of promising tools<sup>1</sup> have emerged as part of the <a href="https://moderndatastack.xyz/">Modern Data Stack</a> to offer better orchestration, testing, and reporting.</p>
<p>Although I’m very excited about the developments in this space, I realize that emerging products may not be the best fit for every organization. Enterprise tools can be financial costly, and, more broadly, even free and open-source offerings bring costs in the time and risks associated with vetting tools for security, training associates, and committing to potential lock-in of building workflows around these tools. Additionally, data end-users may not always have the ability to get far enough “upstream” in the production process of their data to make these tools make sense.</p>
<p>“Right-sizing” technology to the problem at hand is a critical task. A “best” solution with the most polished, professional, exciting product isn’t always the best <em>fit</em> for your needs. Trade-offs must be made between feature completeness and fit-for-purpose. In other words, sometimes its more important for technology to be <em>“good enough”</em>.<sup>2</sup></p>
<p>Additionally, in an embarassment of riches of developer tools, sometimes the number of tools (no matter how good) we have to work with can become a burden. Personally, I like to leverage a core set of tools like Slack and GitHub for as many of their strengths when possible instead of allowing a creep of many different project-specific communication and project management tools.</p>
<p>With all of that in mind, in this post I explore a lightweight approach to a data quality workflow using a minimal set of tools that are likely already part of many team’s data stacks: R, GitHub, and Slack. This approach may be far from perfect, but I believe it provides a lot of “bang for the buck” by enabling scheduling data quality monitoring, instantaneous alerting, and workflow management at little-to-no incremental overhead.</p>
<p>The full code for this demo is available in my <a href="https://github.com/emilyriederer/data-validation-demo">emilyriederer/data-validation-demo</a> repo on GitHub.</p>
<section id="overall-workflow" class="level2">
<h2 class="anchored" data-anchor-id="overall-workflow">Overall Workflow</h2>
<p>To think about right-sizing, it’s first useful to think about what features from some of the “hot” data quality monitoring products make them so appealing. Key features and tradeoffs include:</p>
<ul>
<li><strong>Always-on monitoring</strong>: Monitoring any time data is loaded or changed (or preferably <em>before</em> – such as dbt’s dev schemas and Great Expectation’s in-pipeline integration)</li>
<li><strong>Reporting</strong>: Dashboards or tools to review outputs of data validation</li>
<li><strong>Alerting</strong>: Proactive logging and alerting of failures of data validation checks</li>
<li><strong>Integration in data production process</strong>: As alluded to in the “always-on” point, the more validation is not just a passive activity but part of data production itself the better (e.g.&nbsp;preventing bad data from being loaded)</li>
</ul>
<p>This approach makes some tradeoffs. It’s not orchestrated or trigger-based but can be scheduled to run on a regular basis. It’s also loosely-coupled with data production, but as we will see it can still support a better GitHub-based workflow for seeing issues through to resolution.</p>
<p>The basic idea of this workflow is to recreate as many of these strengths as possibly by maximally leveraging the strengths of existing tools. We use each for what its already good at, including:</p>
<ul>
<li><strong>R</strong>:
<ul>
<li>Data validation with the <a href="https://rich-iannone.github.io/pointblank/"><code>pointblank</code> package</a> can be run directly or “outsourced” upstream to run in-place in a database (if that is where your data lives)</li>
<li>Validation failures are logged as GitHub issues using the <a href="https://emilyriederer.github.io/projmgr/"><code>projmgr</code> package</a></li>
<li>A more aesthetic version of data quality reporting output is produced by running the above steps by rendering an <strong>R Markdown</strong> document to HTML</li>
</ul></li>
<li><strong>GitHub</strong>: Serves as the central nervous system for execution, project management, and reporting
<ul>
<li><strong>Actions</strong>: Reruns the <code>pointblank</code> checks on a regular basis and updates an RMarkdown-based website</li>
<li><strong>Pages</strong>: Hosts the resultings RMarkdown-generated HTML for accessible data quality reporting</li>
<li><strong>Issues</strong>: Record data quality errors caught by <code>pointblank</code>. This provides an easy platform to assign owners, discuss issues, and track progress. With detailed labels, closed issues can also serve as a way to catalog past errors and identify trends or needed areas of improvement (where repeat failures occur)</li>
</ul></li>
<li><strong>Slack</strong>: Integrates with GitHub to provide alerts on new issues on a Slack channel. Individual teams or team members can use Slack’s controls to determine how they receive notifications (e.g.&nbsp;email, mobile notification, etc.) for time-sensitive issues</li>
</ul>
<p>Intrigued? Next we’ll step through the technical details.</p>
</section>
<section id="detailed-implementation" class="level2">
<h2 class="anchored" data-anchor-id="detailed-implementation">Detailed Implementation</h2>
<p>This workflow revolves around a single main R Markdown document. The full version can be found <a href="https://github.com/emilyriederer/data-validation-demo/blob/master/data-valid-pipe.Rmd">on GitHub</a>, and we will step through key components of the code and its interaction with the GitHub and Slack platforms below.</p>
<section id="validating-data-with-pointblank" class="level3">
<h3 class="anchored" data-anchor-id="validating-data-with-pointblank">Validating data (with <code>pointblank</code>)</h3>
<p><img src="https://emilyriederer.com/post/data-valid-lightweight/report.PNG" class="img-fluid"></p>
<p>The first key step is setting up validation with <code>pointblank</code>. Here, I show a minimal example which uses a very small toy dataset. However, <code>pointblank</code> can also connect to a number of remote datasources like databases and run these checks on the data in-place<sup>3</sup> The following example just runs a few checks for data ranges, nulls, and duplicates although a wide array of premade and customizable checks are available.</p>
<p>Out of the box, we can produce an aesthetic table of validation results.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-2">act <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">action_levels</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn_at =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">notify_at =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop_at =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb1-3">table_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_table"</span></span>
<span id="cb1-4">agent <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_agent</span>(tbl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">actions =</span> act) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_vals_between</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_vals_not_null</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rows_distinct</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(x,y))</span>
<span id="cb1-9">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interrogate</span>(agent)</span>
<span id="cb1-10">res</span></code></pre></div>
</div>
</section>
<section id="posting-results-as-github-issues-with-projmgr" class="level3">
<h3 class="anchored" data-anchor-id="posting-results-as-github-issues-with-projmgr">Posting results as GitHub issues (with <code>projmgr</code>)</h3>
<p><img src="https://emilyriederer.com/post/data-valid-lightweight/issues.PNG" class="img-fluid"></p>
<p>Beyond <code>pointblank</code>’s aesthetic output, we can also extract an underlying dataframe with all of the check information include which columns were included in the check, a human-readable description of the check, and the failure rate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb2-2">  res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>validation_set <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(warn) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(columns_expr, brief, column, n, n_failed, f_failed) </span></code></pre></div>
</div>
<p>With this information, we can use <code>projmgr</code> to connect to a GitHub repository<sup>4</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">repo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_repo_ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"emilyriederer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-validation-demo"</span>)</span></code></pre></div>
</div>
<p>The full data wrangling steps are shown in the <a href="https://github.com/emilyriederer/data-validation-demo/blob/master/data-valid-pipe.Rmd">R Markdown</a>, but after light data wrangling of the output dataset (<code>out</code>) to convert validation results into a title, description, and labels, we can post these issues to our repository.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">issue_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(issues_df, </span>
<span id="cb4-2">                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">possibly</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">post_issue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ref =</span> repo, ...), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">otherwise =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb4-3">                      )</span></code></pre></div>
</div>
<p>This creates the two issues shown above with labels for each table and variable.</p>
<p>The full R Markdown also shows how this collection of issues can also be pulled back into the resulting report to provide context on the status of each issue such as whether it has been assigned to an owner and the number of comments it has.</p>
</section>
<section id="running-on-github-actions" class="level3">
<h3 class="anchored" data-anchor-id="running-on-github-actions">Running on GitHub Actions</h3>
<p>Of course, monitoring isn’t useful if it doesn’t run and detect new errors at a reasonable cadence. One way to run this report regularly is using <a href="https://github.com/features/actions">GitHub Actions</a>. With a simple <a href="https://github.com/emilyriederer/data-validation-demo/blob/master/.github/workflows/run-validation.yaml">config file</a>, we are able to schedule a daily cron job. This job:</p>
<ul>
<li>Exposes the GITHUB personal access token we need for <code>projmgr</code> to be able to write issues to our repository<sup>5</sup></li>
<li>Sets up R and pandoc to be able to knit an R Markdown</li>
<li>Installs needed packages</li>
<li>Renders the R Markdown to the file <code>docs/index.html</code> (Why this name? See the next step)</li>
<li>Pushes the results back to the repo</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">on<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-2">  schedule<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> cron<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"30 4 * * 3"</span></span>
<span id="cb5-4">  push<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-5">    branches<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-6">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> master</span>
<span id="cb5-7"></span>
<span id="cb5-8">jobs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-9">  render<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-10">    name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Render my document</span>
<span id="cb5-11">    runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>on<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> macOS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>latest</span>
<span id="cb5-12">    steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-13">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Create and populate .Renviron file</span>
<span id="cb5-14">        run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb5-15">          echo GITHUB_PAT<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$GH_PAT"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">~/</span>.Renviron</span>
<span id="cb5-16">        shell<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> bash</span>
<span id="cb5-17">        env<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-18">          GH_PAT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span>{{secrets.GH_PAT}}</span>
<span id="cb5-19">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>checkout<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-20">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v1</span>
<span id="cb5-21">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pandoc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v1</span>
<span id="cb5-22">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tinytex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v1</span>
<span id="cb5-23">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Install rmarkdown</span>
<span id="cb5-24">        run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Rscript <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>e <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'install.packages(c("pointblank", "projmgr", "dplyr", "purrr", "glue", "rmarkdown", "knitr"))'</span></span>
<span id="cb5-25">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Render my document to all types</span>
<span id="cb5-26">        run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Rscript <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>e <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rmarkdown::render("data-valid-pipe.Rmd", output_file = "index.html", output_dir = "docs")'</span></span>
<span id="cb5-27">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Commit results</span>
<span id="cb5-28">        run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb5-29">          git add <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>force docs</span>
<span id="cb5-30">          git commit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rerun validation checks'</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> echo <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No changes to commit"</span></span>
<span id="cb5-31">          git push origin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> echo <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No changes to commit"</span></span></code></pre></div>
</div>
</section>
<section id="publishing-on-github-pages" class="level3">
<h3 class="anchored" data-anchor-id="publishing-on-github-pages">Publishing on GitHub Pages</h3>
<p>Now that we’ve created an HTML report from our R Markdown, we can easily host it on <a href="https://pages.github.com/">GitHub Pages</a> by going to our repo’s <code>Settings &gt; Pages</code> and selecting as a <code>Source</code> the <code>main</code> or <code>master</code> branch and, specifically, the <code>docs</code> folder. GitHub will then provide a URL to our pages where the <code>docs/index.html</code> file serves as the main page.</p>
<p>In the case of my repo <code>emilyriederer/data-validation-demo</code>, the URL is https://emilyriederer.github.io/data-validation-demo/.</p>
</section>
<section id="setting-up-slack-notifications" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-slack-notifications">Setting up Slack notifications</h3>
<p><img src="https://emilyriederer.com/post/data-valid-lightweight/featured.png" class="img-fluid"></p>
<p>Of course, no one wants to go check one more report every single day. While you can watch a repository on GitHub and receive emails about new issues, you might prefer not to fill up your own inbox or have more control over how you manage these notifications. In your team is already using Slack, <a href="https://github.com/integrations/slack">GitHub + Slack integration</a> offers a great alternative.</p>
<p>You can consider making a dedicated Slack channel for data issues and automate instant Slack notifications when any new issues are opened. First, as described in the link above, install GitHub integration for Slack. Then, the following commands (typed simply as if you are writing a message on the Slack channel) connect to your GitHub repo and unsubscribe from all notifications except for issues.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>invite <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>github</span>
<span id="cb6-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>github subscribe your<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>your<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>repo</span>
<span id="cb6-3"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>github unsubscribe your<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>your<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>repo pulls commits releases deployments</span></code></pre></div>
</div>
<p>Slack messages can both allow teams to customize how and when they are notified about emerging issues across different devices. This also allows a space for “meta” discussions, such as who is equipped to handle an issue, before someone is assigned and the conversation moves to GitHub itself.</p>
</section>
</section>
<section id="trade-offs" class="level2">
<h2 class="anchored" data-anchor-id="trade-offs">Trade Offs</h2>
<p>There’s always a fine line between exploiting the synergies of different tools or creating an incoherent Rube Goldberg machine with rough edges and new problems. However, different solutions are best suited for different organizations, teams, and data needs. I’m very excited about all of the emerging data quality tools and platforms, and for large enterprises I suspect that may be the way to go. However, if you’re looking for scaling up your data management practices with minimal new tools, infrastructure, or tech debt, I hope this set of powerful but lightweight tools can be a first step in a good direction.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Just to name a few: dbt, datafold, Soda, Great Expectations, and Monte Carlo↩︎</p></li>
<li id="fn2"><p>With love and admiration, I borrow this phrase from the excellent paper “Good Enough Practices in Scientific Computing”: https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510↩︎</p></li>
<li id="fn3"><p>Logic is translated to SQL via <code>dbplyr</code>.↩︎</p></li>
<li id="fn4"><p>Assuming you have your personal access token set per the documentation: https://emilyriederer.github.io/projmgr/articles/github-pat.html↩︎</p></li>
<li id="fn5"><p>This assumes that within GitHub, the PAT is defined as a secret called GH_PAT. Curiously, GitHub does not allow secrets that start with the word “GITHUB”. Who knew? Additionally, depending on the privacy level of your repository, you might not need a PAT to make issues and could skip this step.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>data</category>
  <category>elt</category>
  <guid>https://emilyriederer.com/post/data-valid-lightweight/</guid>
  <pubDate>Thu, 26 Aug 2021 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/data-valid-lightweight/featured.png" medium="image" type="image/png" height="105" width="144"/>
</item>
<item>
  <title>Workflows for querying databases via R</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/sql-r-flow/</link>
  <description><![CDATA[ 





<p>Simple, self-contained, reproducible examples are a common part of good software documentation. However, in the spirit of brevity, these examples often do not demonstrate the most sustainable or flexible <em>workflows</em> for integrating software tools into large projects. In this post, I document a few mundane but useful patterns for querying databases in R using the <code>DBI</code> package.</p>
<p>A prototypical example of forming and using a database connection with <code>DBI</code> might look something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb1-2"></span>
<span id="cb1-3">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RSQLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds"</span>, ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>diamonds)</span>
<span id="cb1-5">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select cut, count(*) as n from diamonds group by 1"</span>)</span>
<span id="cb1-6">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        cut     n
1      Fair  1610
2      Good  4906
3     Ideal 21551
4   Premium 13791
5 Very Good 12082</code></pre>
</div>
</div>
<p>A connection is formed (in this case to a fake database that lives only in my computer’s RAM), the <code>diamonds</code> dataset from the <code>ggplot2</code> package is written to the database (once again, this is for example purposes only; a real database would, of course, have data), and <code>dbGetQuery()</code> executes a query on the resulting table.</p>
<p>However, as queries get longer and more complex, this succinct solution becomes less attractive. Writing the query directly inside <code>dbGetQuery()</code> blurs the line between “glue code” (rote connection and execution) and our more nuanced, problem-specific logic. This makes the latter harder to extract, share, and version.</p>
<p>Below, I demonstrate a few alternatives that I find helpful in different circumstances such as reading queries that are saved separately (in different files or at web URLs) and forming increasingly complex query templates. Specifically, we’ll see how to:</p>
<ul>
<li>Read a query from a separate file</li>
<li>Retrieve a query from a web URL</li>
<li>Convert a query into a template</li>
<li>Compose more complex queries from templates</li>
<li>Store and access queries/templates from within packages</li>
<li>Bonus: Data Testing</li>
</ul>
<section id="read-query-from-separate-file" class="level2">
<h2 class="anchored" data-anchor-id="read-query-from-separate-file">Read query from separate file</h2>
<p>A first enhancement is to isolate your SQL script in a separate file than the “glue code” that executes it. This improves readability and makes scripts more portable between projects. If a coworker who uses python or runs SQL through some other tool wishes to use your script, it’s more obvious which parts are relevant. Additionally, its easier to version control: we likely care far more about changes to the actual query than the boilerplate code that executes it so it feels more transparent to track them separately.</p>
<p>To do this, we can save our query in a separate file. We’ll call it <code>query-cut.sql</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">select</span>
<span id="cb3-2">  cut,</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) as n</span>
<span id="cb3-4">from diamonds</span>
<span id="cb3-5">group by <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>Then, in our script that pulls the data, we can read that other file with <code>readLines()</code> and give the results of that to the <code>dbGetQuery()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb4-2"></span>
<span id="cb4-3">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RSQLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb4-4">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query-cut.sql"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-5">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(con, query)</span>
<span id="cb4-6">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        cut     n
1      Fair  1610
2      Good  4906
3     Ideal 21551
4   Premium 13791
5 Very Good 12082</code></pre>
</div>
</div>
<p>Of course, if you wish you could define a helper function for the bulky <code>paste(readLines(...))</code> bit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">read_source <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(path) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(path), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)}</span></code></pre></div>
</div>
</section>
<section id="read-query-from-url-like-github" class="level2">
<h2 class="anchored" data-anchor-id="read-query-from-url-like-github">Read query from URL (like GitHub)</h2>
<p>Sometimes, you might prefer that your query not live in your project at all. For example, if a query is used across multiple projects or if it changes frequently or is maintained by multiple people, it might live in a separate repository. In this case, the exact same workflow may be used if the path is replaced by a URL to a plain-text version of the query. (On GitHub, you may find such a link by clicking the “Raw” button when a file is pulled up.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb7-2"></span>
<span id="cb7-3">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RSQLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb7-4">url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/emilyriederer/website/master/content/post/sql-r-flow/query-cut.sql"</span></span>
<span id="cb7-5">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(url), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-6">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(con, query)</span>
<span id="cb7-7">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        cut     n
1      Fair  1610
2      Good  4906
3     Ideal 21551
4   Premium 13791
5 Very Good 12082</code></pre>
</div>
</div>
<p>This works because the <code>query</code> variable simply contains our complete text file read from the internet:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(query)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>select
  cut,
  count(*) as n
from diamonds
group by 1</code></pre>
</div>
</div>
<p>Alternatively, in an institutional setting you may find that you need some sort of authentication or proxy to access GitHub from R. In that case, you may retrieve the same query with an HTTP request instead using the <code>httr</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(httr)</span>
<span id="cb11-2"></span>
<span id="cb11-3">url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/emilyriederer/website/master/content/post/sql-r-flow/query-cut.sql"</span></span>
<span id="cb11-4">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">content</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GET</span>(url))</span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(query)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>select
  cut,
  count(*) as n
from diamonds
group by 1</code></pre>
</div>
</div>
</section>
<section id="use-query-template" class="level2">
<h2 class="anchored" data-anchor-id="use-query-template">Use query template</h2>
<p>Separating the query from its actual execution also allows us to do query pre-processing. For example, instead of a normal query, we could write a query template with a wildcard variable. Consider the file <code>template-cut.sql</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">select</span>
<span id="cb13-2">  cut,</span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) as n</span>
<span id="cb13-4">from diamonds</span>
<span id="cb13-5">where price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> {max_price}</span>
<span id="cb13-6">group by <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>This query continues to count the number of diamonds in our dataset by their cut classification, but now is has parameterized the <code>max_price</code> variable. Then, we may use the <code>glue</code> package to populate this template with a value of interest before executing the script.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span>
<span id="cb14-3"></span>
<span id="cb14-4">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RSQLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb14-5">template <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"template-cut.sql"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(template, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_price =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb14-7">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(con, query)</span>
<span id="cb14-8">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        cut   n
1      Fair   7
2      Good 226
3     Ideal 628
4   Premium 215
5 Very Good 653</code></pre>
</div>
</div>
<p>This is a useful alternative to databases that do not allow for local variables.</p>
</section>
<section id="compose-more-complex-queries" class="level2">
<h2 class="anchored" data-anchor-id="compose-more-complex-queries">Compose more complex queries</h2>
<p>The idea of templating opens up far more interesting possibilities. For example, consider a case where you wish to frequently create the same data structure for a different population of observations (e.g.&nbsp;a standard set of KPIs for different A/B test experiments, reporting for different business units, etc.)</p>
<p>A boilerplate part of the query could be defined as a template ready to accept a CTE or a subquery for a specific population of interest. For example, we could write a file <code>template-multi.sql</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">with</span>
<span id="cb16-2">sample <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as</span> ({query_sample}),</span>
<span id="cb16-3">prices <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as</span> (select id, cut, price from diamonds)</span>
<span id="cb16-4">select prices.<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb16-5">from</span>
<span id="cb16-6">  prices</span>
<span id="cb16-7">  inner join</span>
<span id="cb16-8">  sample</span>
<span id="cb16-9">  on</span>
<span id="cb16-10">  prices.id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> diamonds.id</span></code></pre></div>
</div>
<p>Then our “glue code” can combine the static and dynamic parts of the query at runtime before executing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">template <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"template-multi.sql"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-2">query_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select * from diamonds where cut = 'Very Good' and carat &lt; 0.25"</span></span>
<span id="cb17-3">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(template, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">query_sample =</span> query_sample)</span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(query)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>with
sample as (select * from diamonds where cut = 'Very Good' and carat &lt; 0.25),
prices as (select id, cut, price from diamonds)
select prices.*
from
  prices
  inner join
  sample
  on
  prices.id = diamonds.id</code></pre>
</div>
</div>
<p>(Of course, this may seem like overkill and an unnecessarily inefficent query for the example above where a few more <code>where</code> conditions could have sufficed. But one can imagine more useful applications in a traditional setting where multiple tables are being joined.)</p>
</section>
<section id="query-package" class="level2">
<h2 class="anchored" data-anchor-id="query-package">Query package</h2>
<p>Finally, these queries and query templates could even be shipped as part of an R package. Additional text files may be placed in the <code>inst/</code> directory and their paths discovered by <code>system.file()</code>. So, if your package <code>myPkg</code> were to contain the <code>template-multi.sql</code> file we saw above, you could provide a function to access it like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">construct_query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(stub, ...) {</span>
<span id="cb19-2">  </span>
<span id="cb19-3">  path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(stub, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'myPkg'</span>)</span>
<span id="cb19-4">  template <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(path), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb19-5">  query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(template, ...)</span>
<span id="cb19-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(query)</span>
<span id="cb19-7">  </span>
<span id="cb19-8">}</span></code></pre></div>
</div>
<p>Then, that function could be called like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select * from diamonds where cut = 'Very Good' and carat &lt; 0.25"</span></span>
<span id="cb20-2">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">construct_query</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multi"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">query_sample =</span> sample)</span></code></pre></div>
</div>
<p>This approach has some benefits such as making it easier to share queries across users and benefit from package versioning and environment management standards. However, there are of course other risks; only dynamically generating queries could limit reproducibility or documentation about the actual query run to generate data. Thus, it might be a good idea to save the resulting query along with the resulting data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(con, query)</span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(dat, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.rds"</span>)</span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(query, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query-data.sql"</span>)</span></code></pre></div>
</div>
</section>
<section id="bonus-data-testing" class="level2">
<h2 class="anchored" data-anchor-id="bonus-data-testing">Bonus: Data Testing</h2>
<p>Although unrelated to the previous workflow, another nice aspect of working with SQL through R is the ability to use R’s superior toolkit for creating small datasets on the fly for testing purposes.</p>
<p>Mocking data to easily test SQL can be a tedious exercise since you generally need to write out the dataset row-by-row:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INSERT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INTO</span> test_tbl</span>
<span id="cb22-2">  ( x, y, z )</span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">VALUES</span></span>
<span id="cb22-4">  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, NA), </span>
<span id="cb22-5">  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb22-6">  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span></code></pre></div>
</div>
<p>This may be fine for a few rows, but it can easily get cumbersome when you require a mock dataset in the 10s or 20s of rows.</p>
<p>Of course, R has many helpful functions for generating data including sequences, predefined vectors (e.g.&nbsp;<code>letters</code>), and random number generators. This can make it easy to quickly generate data and push it to a database for testing SQL scripts:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span></span>
<span id="cb23-2">test_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb23-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n,</span>
<span id="cb23-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> LETTERS,</span>
<span id="cb23-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb23-6">)</span>
<span id="cb23-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_tbl"</span>, test_df)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>workflow</category>
  <category>sql</category>
  <guid>https://emilyriederer.com/post/sql-r-flow/</guid>
  <pubDate>Wed, 14 Jul 2021 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/sql-r-flow/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Building a team of internal R packages</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/team-of-packages/</link>
  <description><![CDATA[ 





<p><em>Note: this post is a written version of my <a href="../..\talk/organization">rstudio::global 2020 talk</a> on the same topic. Please see the link for the slides and video version. I do elaborate on a few points here that I cut from the talk; if you’ve already watched the talk and just want the delta, please see the sections in <span style="color: blue;">blue</span></em></p>
<p>More and more organizations are beginning to write their own internal R packages. These internal tools have great potential to improve an organization’s code quality, promote reproducible analysis frameworks, and enhance knowledge management. Developers of such tools are often inspired by their favorite open-source tools and, consequently, rely on the design patterns and best practices they have observed. Although this is a good starting position, internal packages have unique challenges (such as a smaller developer community) and opportunities (such as an intimate understanding of the problem space and over-arching organizational goals). Internal packages can realize their full potential by engineering to embrace these unique features. In this post, I explore the jobs of internal packages and the types of different design decisions these jobs can inspire – from API design and error handling to documentation to training and testing. <strong>If you’d rather just read the main ideas instead of the full essay, skip to the tl;dr</strong></p>
<section id="what-differentiates-internal-packages" class="level2">
<h2 class="anchored" data-anchor-id="what-differentiates-internal-packages">What differentiates internal packages</h2>
<p>To begin, think about the last time that you joined a new organization. There was so much you had to learn before you could get started – accessing data, intuiting what problems are worth tackling, understanding team norms, and so much more. Thankfully, we only have to descend this learning curve once. However, the off-the-shelf tools we use can’t preserve this context and culture. Every day is like their first day at work.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://emilyriederer.com/post/team-of-packages/first-day.png" class="img-fluid figure-img" style="width:33.0%"></p>
</figure>
</div>
</div>
</div>
<p>In open-source, this high level of abstraction is a feature, not a bug. Stripping context from code enables reuse and collaboration across the globe. The <code>survival</code> package, for example, need not care whether one is modeling the time-to-death in a clinical trial or the time-to-attrition of a Netflix subscriber. In contrast, internal packages can drive additional value if they act more like a colleague and embrace institutional knowledge.</p>
<p>Contrasting internal and external packages on two dimensions illuminates this difference.</p>
<p>First, internal packages can target more domain-specific and concrete problems than open-source packages. Inherently, within an institution, such tools can have a <strong>narrower problem definition</strong> without loss of <em>useful</em> generality. This means our functions can be more tailored to the contours and corner cases of our problems and our documentation can use more relevant examples.</p>
<p>Second, and perhaps less intuitively, internal packages can actually span a <strong>broader solution space</strong>, as measured by the number of steps in the workflow that they span. For example, an open source package might offer many different methods to model time-to-event but remain agnostic to where the input data came from or what the analyst does with the results. In contrast, an internal package might cater to answering a narrower question but apply its insight into our organization to cover more of the steps in the workflow of answering that questions – such as pulling data, engineering features, and communicating outcomes.</p>
<p><img src="https://emilyriederer.com/post/team-of-packages/featured.PNG" class="img-fluid"></p>
<p>Because of these two factors, internal packages can make large contributions to our organization by addressing different needs such as:</p>
<ul>
<li><strong>Utilities</strong>: Providing an abstraction layer over internal infrastructure, such as connecting to databases, APIs, servers or enabling proxies</li>
<li><strong>Analysis</strong>: Guiding analysts through a curated set of methods and packages to answer common questions</li>
<li><strong>Developer Tools</strong>: Helping analysts produce better outputs faster with building blocks like ggplot themes, R Markdown templates, and Shiny modules</li>
</ul>
<p>But it’s not just what internal packages <em>do</em> that distinguishes them from open-source tools. Even more critical is how these packages are <em>designed</em> to do these tasks. In the rest of this post, I’ll illustrate how internal packages can be conscientiously engineered to act more like a veteran than a new hire.</p>
</section>
<section id="the-theory-of-jobs-to-be-done" class="level2">
<h2 class="anchored" data-anchor-id="the-theory-of-jobs-to-be-done">The theory of jobs-to-be-done</h2>
<p>To motivate the design goals and decisions we’ll discuss, it’s useful to think about Harvard Business School Professor Clayton Christensen’s <a href="https://hbr.org/2016/09/know-your-customers-jobs-to-be-done">jobs-to-be-done</a> theory of disruptive innovation. This asserts that</p>
<blockquote class="blockquote">
<p>we <em>hire</em> a product to do a job that helps us make progress towards a goal</p>
</blockquote>
<p>and sometimes<sup>1</sup> the theory further asserts that</p>
<blockquote class="blockquote">
<p>these jobs can have functional, social, and emotional components</p>
</blockquote>
<p><span style="color: blue;"></span></p>
<p>In the world of product development, that focus on the <em>progress</em> a customer is a critical distinction from the conventional understanding of competition and industry makeup. For example, if I ask you who Twitter’s competitors are, you might first think of Facebook, Instagram, or TikTok – other entrants in the category of “mobile apps for social networking”. However, if we think about the jobs that I “hire” Twitter to do, I might “hire” Twitter to help me pass the time while I wait in a long line or (back in “the olden days”) ride my long commute to work. Through that lens, it not longer matters what industry Twitter is nominally in; this is about me and my needs - not Twitter. So, Twitter is “competing” for the position of my travel companion against all sorts of other potential hires like Spotify, podcasts, books, or even an extra 20 minutes nap on the train.</p>
<p>In relation to R packages, open source packages know a <em>task</em> we want done (e.g.&nbsp;“fit a Cox proportional hazard model”) which is somewhat like a product category. But what really sets internal packages apart is that they can use their knowledge of our organization to cater to the kind of <em>progress</em> that we truly want to make.</p>
<p>It’s hard for passionate R users<sup>2</sup> to imagine, but no one actually <em>wants</em> a package. I’d even go as far to say that no one even <em>wants</em> data (blasphemy!). Organizations need <em>progress</em> – they need strategies, fueled by decisions, fueled by answers to questions, and fueled, in turn and in part, by data sets and tools. Since internal tools have a better sense of what that key bit of progress is, they can be more focused on helping us get there.</p>
<p></p>
<p>I claim that we can make internal tools more useful and more appealing by targeting them towards the specific jobs of an organization. To complete the analogy, I’ll restate the initial theory with a few alterations</p>
<blockquote class="blockquote">
<p>let’s build a <em>team of packages</em> that can do the <em>jobs</em> that help our organization make <em>answer impactful questions</em> with efficient workflows</p>
</blockquote>
<p>So how does jobs-to-be-done inform our package design? To explore this, we’ll consider what makes good teammates and how we can encode those traits in our tools.</p>
</section>
<section id="the-it-guy---abstraction" class="level2">
<h2 class="anchored" data-anchor-id="the-it-guy---abstraction">The IT Guy - Abstraction</h2>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://emilyriederer.com/post/team-of-packages/it-guy.png" class="img-fluid figure-img" style="width:33.0%"></p>
</figure>
</div>
</div>
</div>
<p>First, let’s meet the IT Guy. IT and DevOps colleagues complement the skills of data analysts by handling all of the things that analysts are generally not the most skilled or experienced at doing independently – production systems, servers, deployments, etc. In that abstraction process, they also take on additional responsibilities to promote good practices like data security and credential management. Ideally, they can save us time and frustration in navigating organization-specific roadblocks than no amount of searching on StackOverflow can help.</p>
<p>Put another way, the IT Guy fills the jobs of</p>
<ul>
<li><strong>Functional:</strong> Abstracting away confusing quirks of infrastructure</li>
<li><strong>Social:</strong> Promoting or enforcing good practices</li>
<li><strong>Emotional:</strong> Avoiding frustrating or stress of lost time or “silly” questions</li>
</ul>
<p>We can emulate these characteristics in internal packages by including utility functions, taking an opinionated stance on design, and providing helpful and detailed error messages.<sup>3</sup></p>
<p>As an example, let’s consider a simple function to connect to an organization’s internal database.<sup>4</sup> First, we might start out with a rather boilerplate piece of code using the <code>DBI</code> package. We take in the username and password; hard-code the driver name, server location, and port; and return a connection object. (Note that the content of this example doesn’t matter. The jobs of the IT Guy prototype are abstracting away things we don’t need to think about and protecting us from anti-patterns – not just connecting to databases. The design patterns shown will apply to the more general problem.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">get_database_conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(username, password) {</span>
<span id="cb1-2"></span>
<span id="cb1-3">conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb1-4">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(</span>
<span id="cb1-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drv =</span> odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb1-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">driver =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"driver name here"</span>,</span>
<span id="cb1-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"server string here"</span>,</span>
<span id="cb1-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID =</span> username,</span>
<span id="cb1-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD =</span> password,</span>
<span id="cb1-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port number here"</span></span>
<span id="cb1-11">  )</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(conn)</span>
<span id="cb1-14"></span>
<span id="cb1-15">}</span></code></pre></div>
</div>
<section id="opinionated-design" class="level3">
<h3 class="anchored" data-anchor-id="opinionated-design">Opinionated Design</h3>
<p>Now, let’s suppose our organization has strict rules against putting secure credentials in plain text. (Let’s actually <em>hope</em> they have such rules!) To enforce this, we can remove <code>username</code> and <code>password</code> from the function header, and use <code>Sys.getenv()</code> inside of the function to retrieve specifically named environment variables (<code>DB_USER</code> and <code>DB_PASS</code>) containing these quantities.<sup>5</sup></p>
<p>In an open source package, I would not presume to force users’ hand to use one specific system set-up. However, in this case, we can make strong assumptions based on our knowledge of an organization’s rules and norms. And this sort of function can be great leverage to incentivize users to do it right (like storing their credentials in environment variables) because there’s only one way it can work.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">get_database_conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb2-2"></span>
<span id="cb2-3">conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb2-4">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drv =</span> odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb2-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">driver =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"driver name here"</span>,</span>
<span id="cb2-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"server string here"</span>,</span>
<span id="cb2-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_USER"</span>),</span>
<span id="cb2-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_PASS"</span>),</span>
<span id="cb2-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port number here"</span></span>
<span id="cb2-11">  )</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(conn)</span>
<span id="cb2-14"></span>
<span id="cb2-15">}</span></code></pre></div>
</div>
</section>
<section id="helpful-error-messages" class="level3">
<h3 class="anchored" data-anchor-id="helpful-error-messages">Helpful Error Messages</h3>
<p>Of course, opinionated design is only helpful if we communicate those opinions to our users. Otherwise, they’ll get an error that <code>DB_PASS</code> is missing and find nothing useful online to help them troubleshoot since this is a specific internal choice that we made.</p>
<p>So, we can enhance the function with extremely custom and prescriptive error messages explaining what went wrong and either how to fix it (e.g.&nbsp;setting an environment variable, applying for an access) or where one can get more information (in a vignette, asking someone on a specific support team, checking out a specific document in a team wiki).</p>
<p><span style="color: blue;"></span></p>
<p>Such support messages can be made even more approachable with the use of the <a href="https://github.com/r-lib/cli"><code>cli</code> package</a> which makes console messages more aesthetic, user-friendly, and clear in intent.</p>
<p></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">get_database_conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_USER"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_PASS"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) {</span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(</span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_USER or DB_PASS environment variables are missing."</span>,</span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please read set-up vignette to configure your system."</span></span>
<span id="cb3-7">  ) </span>
<span id="cb3-8">}</span>
<span id="cb3-9"></span>
<span id="cb3-10">conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-11">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(</span>
<span id="cb3-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drv =</span> odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb3-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">driver =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"driver name here"</span>,</span>
<span id="cb3-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"server string here"</span>,</span>
<span id="cb3-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_USER"</span>),</span>
<span id="cb3-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_PASS"</span>),</span>
<span id="cb3-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port number here"</span></span>
<span id="cb3-18">  )</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(conn)</span>
<span id="cb3-21"></span>
<span id="cb3-22">}</span></code></pre></div>
</div>
</section>
<section id="proactive-problem-solving" class="level3">
<h3 class="anchored" data-anchor-id="proactive-problem-solving">Proactive Problem Solving</h3>
<p>Of course, even better than explaining errors is preventing them from occurring. We might also know at our specific organization, non alphanumeric characters are required in passwords and that <code>DBI::dbConnect()</code> does not natively encode these correctly when passing them to the database. Instead of troubling the users and telling them how to pick a password, we can instead handle this silently by running the password retrieved from the <code>DB_PASS</code> environment variable through the <code>URLencode()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">get_database_conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_USER"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_PASS"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) {</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(</span>
<span id="cb4-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_USER or DB_PASS environment variables are missing."</span>,</span>
<span id="cb4-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please read set-up vignette to configure your system."</span></span>
<span id="cb4-7">  ) </span>
<span id="cb4-8">}</span>
<span id="cb4-9"></span>
<span id="cb4-10">conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb4-11">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(</span>
<span id="cb4-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drv =</span> odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb4-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">driver =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"driver name here"</span>,</span>
<span id="cb4-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"server string here"</span>,</span>
<span id="cb4-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_USER"</span>),</span>
<span id="cb4-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">URLencode</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_PASS"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reserved =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb4-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port number here"</span></span>
<span id="cb4-18">  )</span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(conn)</span>
<span id="cb4-21"></span>
<span id="cb4-22">}</span></code></pre></div>
</div>
<p><span style="color: blue;"></span></p>
<p>At this point, you might be wondering: “Isn’t proactive troubleshooting and helpful error messages good standard practice?” And, yes, these are things that both external and internal packages should strive for. The differences with internal R packages are that you have a tighter feedback loop with your users and their systems. This has two advantages.</p>
<p>First, you’ll be quicker to learn about the spectrum of issues your users are encountering (trust me, they’ll find you!), and proactively explaining or solving those issues in the package saves you both a lot of time.</p>
<p>Secondly, in a constrained environment, there are more predictable ways things can go wrong, so you attempts at proactive problem solving and helpful error messages have a better chance at spanning the spectrum of commonly occurring problems.</p>
<p></p>
</section>
</section>
<section id="the-junior-analyst---proactive-problem-solving" class="level2">
<h2 class="anchored" data-anchor-id="the-junior-analyst---proactive-problem-solving">The Junior Analyst - Proactive Problem-Solving</h2>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://emilyriederer.com/post/team-of-packages/junior-analyst.png" class="img-fluid figure-img" style="width:33.0%"></p>
</figure>
</div>
</div>
</div>
<p>Of course, strong opinions and complete independence don’t always make a great teammate. Other times, we might want someone more like a junior analyst. They know a good bit about our organization, and we can trust them to execute calculations correctly and make reasonable assumptions. At the same time, we want them to be responsive to feedback and willing to try out things in more ways than one.</p>
<p>More concretely, a Junior Analyst fills the jobs:</p>
<ul>
<li><strong>Functional:</strong> Performs rote tasks effectively and makes reasonable assumptions where needed</li>
<li><strong>Social:</strong> Communicates assumptions and eagerly adapts to feedback</li>
<li><strong>Emotional:</strong> Builds trust so you can focus on other things</li>
</ul>
<p>To capture these jobs in our package, we can build proactive yet responsive functions by using default arguments, reserved keywords, and the ellipsis.</p>
<p>To illustrate, now let’s imagine a basic visualization function that wraps <code>ggplot2</code> code but allows users to input their preferred x-axis, y-axis and grouping variables to draw cohort curves. (Again, note that the content of this example doesn’t matter. The jobs of the junior analyst prototype are performing rote tasks efficiently and flexibly – not visualizing cohort curves, per say. The design patterns shown will apply to the general problem of assisting in analysis without overbearing assumptions.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">viz_cohort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, time, metric, group) {</span>
<span id="cb5-2"></span>
<span id="cb5-3">  gg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .data[[time]], </span>
<span id="cb5-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .data[[metric]],</span>
<span id="cb5-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> .data[[group]]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_org_theme</span>()</span>
<span id="cb5-10"></span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(gg)</span>
<span id="cb5-12"></span>
<span id="cb5-13">}</span></code></pre></div>
</div>
<p>This function is alright, but we can probably draw on institutional knowledge to make our junior analyst a bit more proactive.</p>
<section id="default-function-arguments" class="level3">
<h3 class="anchored" data-anchor-id="default-function-arguments">Default Function Arguments</h3>
<p>If we relied on the same opinionated design as the IT Guy, we might consider hard-coding some of the variables inside of the function. Here, though, that is not a great approach. The junior analyst’s job is not to give edicts. We might know what the desired x-axis will be 80% of the time, but hard-coding here is a too-strong assumption even for an internal package and decreases the usefulness of the function in the other 20% of applications.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">viz_cohort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, metric, group) {</span>
<span id="cb6-2"></span>
<span id="cb6-3">  gg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .data[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MONTHS_SUBSCRIBED"</span>]], </span>
<span id="cb6-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .data[[metric]],</span>
<span id="cb6-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> .data[[group]]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_org_theme</span>()</span>
<span id="cb6-10"></span>
<span id="cb6-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(gg)</span>
<span id="cb6-12"></span>
<span id="cb6-13">}</span></code></pre></div>
</div>
<p>Instead, we can put our best-guess 80-percent-right names as the default arguments in the function header – ordered by decreasing likelihood to override. This means, when users do not provide their own value, a default value is used (that’s the junior analyst’s best-guess!), but users retain complete control to change it as they see fit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">viz_cohort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb7-2">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">metric =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IND_ACTIVE"</span>,</span>
<span id="cb7-3">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MONTHS_SUBSCRIBED"</span>, </span>
<span id="cb7-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COHORT"</span>) {</span>
<span id="cb7-5"></span>
<span id="cb7-6">  gg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .data[[time]], </span>
<span id="cb7-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .data[[metric]],</span>
<span id="cb7-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> .data[[group]]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_org_theme</span>()</span>
<span id="cb7-13"></span>
<span id="cb7-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(gg)</span>
<span id="cb7-15"></span>
<span id="cb7-16">}</span></code></pre></div>
</div>
</section>
<section id="reserved-keywords" class="level3">
<h3 class="anchored" data-anchor-id="reserved-keywords">Reserved Keywords</h3>
<p>This approach becomes even more powerful if we can abstract out a small set of commonly occuring assumed variable names or other values. Then, we can define and document a set of “keywords” or special variable names that span all of our internal packages. Following the example above, we might define a handful of reserved keywords such as <code>TIME_SUBSCRIBED</code>, <code>CUSTOMER_COHORT</code>, and <code>CUSTOMER_SEGMENT</code>.</p>
<p>If these are well-known and well-documented, users will then get into the habit of shaping their data so it “plays nice” with the package ecosystem and save a lot of manual typing. This type of “incentive” to standardize field names can have other convenient consequences in making data extracts more sharable and code more readable.</p>
<p><span style="color: blue;"></span></p>
<p>In the spirit of the IT Guy’s proactive problem-solving, we can also help users catch potential errors caused by missing keywords. A few strategies here are to provide a function like <code>validate_{package name}_data()</code> to check that any required names exist or report out what is missing or to provide similar on-the-fly validation inside of functions that expect reserved keyword variable names to exist.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">validate_mypackage_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(vbl_names) {</span>
<span id="cb8-2">  </span>
<span id="cb8-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># validate variable names ----</span></span>
<span id="cb8-4">  required <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TIME_SUBSCRIBED"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CUSTOMER_COHORT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CUSTOMER_SEGMENT"</span>)</span>
<span id="cb8-5">  not_present <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(required, vbl_names)</span>
<span id="cb8-6">  </span>
<span id="cb8-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># report missing / required names ----</span></span>
<span id="cb8-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(not_present) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)}</span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The following required variable(s) are missing: "</span>, </span>
<span id="cb8-10">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(not_present, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>))</span>
<span id="cb8-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb8-12">  </span>
<span id="cb8-13">}</span></code></pre></div>
</div>
<p>(An alternative approach to reserved keywords is to let users specify important variables by using package <code>options()</code>. However, I do not prefer this approach because it does not have the benefits of driving consistency, and it requires more documentation and R knowledge. Most any user can grasp “)</p>
<p></p>
</section>
<section id="ellipsis" class="level3">
<h3 class="anchored" data-anchor-id="ellipsis">Ellipsis</h3>
<p>Finally, one other nice trick in making our functions responsive to feedback is the ellipsis (<code>...</code>, also called “passing the dots”). This allows users to provide any number of additional, arbitrary arguments beyond what was specified by the developer and to plug them in at a designated place in the function body.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">viz_cohort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb9-2">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MONTHS_SUBSCRIBED"</span>, </span>
<span id="cb9-3">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">metric =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IND_ACTIVE"</span>,</span>
<span id="cb9-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COHORT"</span>,</span>
<span id="cb9-5">                       ...) {</span>
<span id="cb9-6"></span>
<span id="cb9-7">  gg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .data[[time]], </span>
<span id="cb9-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .data[[metric]],</span>
<span id="cb9-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> .data[[group]]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(...)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_org_theme</span>()</span>
<span id="cb9-14"></span>
<span id="cb9-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(gg)</span>
<span id="cb9-16"></span>
<span id="cb9-17">}</span></code></pre></div>
</div>
<p>This way, users can extend functions based on needs that the developer could not have anticipated, like customizing the color, size, and line type with commands such as:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viz_cohort</span>(my_org_data)</span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viz_cohort</span>(my_org_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> COHORT, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> COHORT)</span></code></pre></div>
</div>
<p><span style="color: blue;"></span></p>
<p>Note that the benefits of the ellipsis are very similar to the benefits of functional programming, in general, with small, modular, and composable functions that do not preserve state. This also provides users flexibility because they can continue to add on to our functions from the <em>outside</em> without having to modify the internals. For example, if users wanted to make our plot separate by the quarter that different cohorts began, they could simply create an additional column with this information before calling our function and add a <code>facet_grid()</code> call outside of <code>viz_cohort()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">my_org_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">COHORT_QUARTER =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarter</span>(DATE_COHORT_START)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viz_cohort</span>(my_org_data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(COHORT_QUARTER))</span></code></pre></div>
</div>
<p></p>
</section>
</section>
<section id="the-tech-lead---knowledge-management" class="level2">
<h2 class="anchored" data-anchor-id="the-tech-lead---knowledge-management">The Tech Lead - Knowledge Management</h2>
<p>So far, we have mostly focused on that first dimension of differentiation between internal and open-source tools – making our package teammates targeted to solving specific internal problems. But there’s just as much value in that second dimension: using internal packages as a way to ship not just calculations but workflows and share an understanding of how the broader organization operates. This allows our packages to play leadership and mentorship roles in our org. To illustrate this, consider our intrepid tech lead.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://emilyriederer.com/post/team-of-packages/tech-lead.png" class="img-fluid figure-img" style="width:33.0%"></p>
</figure>
</div>
</div>
</div>
<p>We value this type of teammate because they can draw from a breadth of past experience and institutional knowledge to help you weigh trade-offs, learn from collected wisdom, and inspire you to do your best work.</p>
<ul>
<li><strong>Functional:</strong> Coach you through weighing alternatives and debugging issues based on vast experience</li>
<li><strong>Social:</strong> Shares collected “tribal” knowledge</li>
<li><strong>Emotional:</strong> Breaks down barriers to help you do your best work</li>
</ul>
<p>Of course, all of that is a pretty tall order for a humble R package! But conscientious use of vignettes, R Markdown templates, and project templates can do a lot to help us toward this goal.</p>
<section id="vignettes" class="level3">
<h3 class="anchored" data-anchor-id="vignettes">Vignettes</h3>
<p>Vignettes often help introduce the basic functionality of a package with a toy example, as found in the <code>dplyr</code> vignette, or less commonly may discuss a statistical method that’s implemented, as done in the <code>survival</code> package. Vignettes of internal R packages can do more diverse and numerous jobs by tackling comprehensive <em>knowledge management</em>. These vignettes can accumulate the hard-won experience and domain knowledge like an experienced tech leads’ photographic memory and hand-deliver them to anyone currently working on a related analysis.</p>
<p>Just as a few examples, vignettes of an internal package might cover some of the following topics:</p>
<ul>
<li><strong>Conceptual Overview:</strong> Explain the problem(s) the package is trying to solve and how they help the organization make progress</li>
<li><strong>Workflow:</strong> Describe the workflow for answering the question For example, does it require data collection or use of existing data? what sort of models will be employed? what are the steps in in what order?</li>
<li><strong>Key Questions:</strong> What sort of questions should an analyst be asking themselves throughout the analysis? What assumptions are the methods making that they should verify? What are common “gotchas”?</li>
<li><strong>Process Documentation:</strong> What are organizational challenges to this problem (as opposed to quantiative ones)? What other systems might someone have to set up or teams to contact (e.g.&nbsp;if need to deploy a model or add features to a library)?</li>
<li><strong>Technical Documentation:</strong> How does the conceptual workflow map to different functions in the package? What sort of inputs do these functions require and what sort of outputs do they produce? Where should these inputs and outputs be stored?</li>
<li><strong>Method Comparison:</strong> When the package offers different options for solving specific problems, how should users evaluate these options and decide which is best? Are there quantitative measures? Examples from past experience?</li>
<li><strong>Lessons Learned:</strong> What has gone wrong when solving this type of problem before? What can be done better?</li>
<li><strong>Past Examples:</strong> Previous case studies of successful use of the package and the organizational progress it drove</li>
</ul>
<p><span style="color: blue;"></span></p>
<p>These examples of potential vignettes further illustrate how our internal packages can help us better achieve <em>progress</em>. No one in an organization wants a model for the sake of having a model; they want is to answer a question or suggest an action. Open-source packages are relatively “blind” to this, so their vignettes will focus on getting to the model; internal packages can partner with us in understanding that “moment before” and “moment after” with tips on everything from featuring engineering to assessing the ethics and bias in a certain output.</p>
<p>Of course, any organization can document their processes, and this documentation doesn’t strictly have to live inside an R package. However, many organizations struggle with knowledge management. Including documentation in a related R package ensures that it’s easily discoverable to the <em>right</em> people (those doing a related project), at the <em>right</em> time (when they are working on that project). It also ensures that documentation won’t be lost when any one person changes teams, leaves the organization, or gets a new computer.</p>
<p></p>
</section>
<section id="package-websites" class="level3">
<h3 class="anchored" data-anchor-id="package-websites">Package Websites</h3>
<p>In fact, all of that context may be <em>so</em> helpful, even people who are not direct users of your package may wish to seek its mentorship.</p>
<p>In this case, you can use the <a href="https://pkgdown.r-lib.org/"><code>pkgdown</code> package</a> to automatically (honestly, you just run <code>pkgdown::build_site()</code>) create a package website to share these vignettes with anyone who needs to learn about a specific problem space – whether or not they will ultimately be the data analyst using your package to solve the <em>computational</em> part of this quest for organizational progress. And, unlike their human counterparts, the packaged tech lead can always find time for another meeting.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://emilyriederer.com/post/team-of-packages/calendar.png" class="img-fluid figure-img" style="width:33.0%"></p>
</figure>
</div>
</div>
</div>
<p>Like other R Markdown output types, <code>pkgdown</code> creates basic HTML output. This means that you can host it on an internal server or (if you organization uses it) GitHub Pages in GitHub enterprise. Alternatively, you may even simply store the HTML files in an internal shared drive and any users may open the site on their own computer in their favorite browser.</p>
</section>
<section id="r-markdown-templates" class="level3">
<h3 class="anchored" data-anchor-id="r-markdown-templates">R Markdown Templates</h3>
<p>Similar to vignettes, embedded <a href="https://rstudio.github.io/rstudio-extensions/rmarkdown_templates.html">R Markdown templates</a> take on a more important and distinctive role for internal packages.</p>
<p>Templates are a way to include prepopulated R Markdowns within your package, which users may access through <code>File &gt; New File &gt; R Markdown &gt; From Template</code> in the RStudio IDE or with the <code>rmarkdown::draft()</code> function. In open-source packages, R Markdown templates provide a pre-populated file instead of the default. This is most commonly used to demonstrate proper formatting syntax. For example, the <code>flexdashboard</code> package use a template to show users how to set up their YAML metadata and section headers.</p>
<p>Instead, internal packages can use templates to coach users through workflows because they understand the problem users are facing and the progress they hope to achieve. Internal packages can mentor users and structure their work in two different ways:</p>
<p><strong>Process walk-throughs</strong> can serve as interactive notebooks that “coach” users through common analyses. As an example, if a type of analysis requires manual data cleaning and curation, a template notebook could guide users to ask the right questions of their data and generate the common views they need to analyze.</p>
<p>We can also include full end-to-end <strong>analysis outlines</strong> which include placeholder text, commentary, and code if the type of analysis that a package supports usually results in a specific report.</p>
</section>
<section id="project-templates" class="level3">
<h3 class="anchored" data-anchor-id="project-templates">Project Templates</h3>
<p>Similarly, our package can include <a href="https://rstudio.github.io/rstudio-extensions/rstudio_project_templates.html">RStudio project templates</a>. These templates can predefine a standard file-structure and boilerplate set of files for a new project to give users a helping hand and drive the kind of consistency across projects that any tech lead dreams of when doing a code review. When any package user is beginning a new analysis, they may click <code>File &gt; New Project</code> in RStudio and select your custom project template among a number of options in the IDE.</p>
<p>For example, one flexible file structure might be something like:</p>
<ul>
<li><code>analysis</code>: RMarkdown files that constitute the final narrative output</li>
<li><code>src</code>: R scripts that contain useful helper functions or other set-up tasks (e.g.&nbsp;data pulls)</li>
<li><code>data</code>: Raw data - this folder should be considered “read only”!</li>
<li><code>output</code>: Intermediate data objects created in the analysis</li>
<li><code>doc</code>: Any long form documentation or set-up instructions</li>
<li><code>ext</code>: Any miscellaneous external files or presentation material collected or created throughout the analysis</li>
</ul>
<p>Additionally, for a given problem that our package attempts to solve, we could pre-populate this file structure with certain guaranteed files such as template scripts for querying and accessing data, configuration files, some of the template R Markdowns we mentions above, etc. The more that directories and files are standardized for a given problem type, the easier it is for anyone else in our organization that has previously used our tool to easily understand our project.</p>
<p>The idea of a standardized file structure is one of the 10 principles called out in the wonderful <a href="https://arxiv.org/abs/1609.00037">Good Enough Practices for Scientific Computing</a> and potentially one of the single highest leverage practices I’ve found for driving consistency and preserving sanity when building collaboratively on large teams.</p>
</section>
</section>
<section id="the-project-manager---coordination" class="level2">
<h2 class="anchored" data-anchor-id="the-project-manager---coordination">The Project Manager - Coordination</h2>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://emilyriederer.com/post/team-of-packages/proj-mgr.png" class="img-fluid figure-img" style="width:33.0%"></p>
</figure>
</div>
</div>
</div>
<p>Now, we discussed how a package filling the “tech lead” role can help structure our work with templates and how this can help collaboration between R users. But to think about collaboration more broadly, we must turn to our final teammate – the project manager.</p>
<p>One of the biggest differences between task-doing open-source packages versus problem-solving internal packages is understanding the whole workflow and helping coordinate projects across different components.</p>
<p>In short, a package can help project manage by addressing the jobs of</p>
<ul>
<li><strong>Functional:</strong> Integrate work across colleagues and components</li>
<li><strong>Social:</strong> Help mediate conflict and find common ground</li>
<li><strong>Emotional:</strong> Meet individual teammates where they are at and remove barriers</li>
</ul>
<p>Specifically, when writing open-source packages, we rightly tend to assume our target audience is R users, but on a true cross-functional team not everyone will be, so we can intentionally modularize the workflow, define specific tasks, and augment RStudio’s IDE to make sure our tools work well with all of our colleagues.</p>
<section id="modularization" class="level3">
<h3 class="anchored" data-anchor-id="modularization">Modularization</h3>
<p>Modularizing allows us to isolate parts of our workflow that do not really require R code to provide a lower barrier of entry for more of our colleagues to contribute.</p>
<p>For example, in the templates we just discussed, we could actually make separate template components for parts that require R code and for commentary. The commentary files could be plain vanilla markdown files that any collaborator could edit without even having R installed, and main R Markdown file can pull in this plaintext output using child documents. This approach is made even easier with advances in the RStudio IDE like the <a href="https://rstudio.github.io/visual-markdown-editing/#/">visual markdown editor</a> provides great, graphical UI support for word processing in markdown.</p>
</section>
<section id="project-planning" class="level3">
<h3 class="anchored" data-anchor-id="project-planning">Project Planning</h3>
<p><span style="color: blue;"></span></p>
<p>Pieces of code are not the only thing we can modularize for our users. Often, a good bit of work in the early stages of a project is figuring out what the right steps are. This is emphasized in the project management book <a href="https://basecamp.com/shapeup/3.4-chapter-13#work-is-like-a-hill">Shape Up</a> which illustrates the flow of a project with “hill diagrams”:</p>
<p><img src="https://basecamp.com/assets/books/shapeup/3.4/hill_concept-a0a77c0ebb209b61899b8b4cdb1a315f2807e3fdc2e1d2373e2f19060725f042.png" class="img-fluid"></p>
<p>Our “tech lead” documentation can already help document some of the learned project steps and help speed up the “hill climbing”. Additionally, a package could play the role of the project manager and make those steps more tangible by embedding a project plan. One option for this is the <a href="https://emilyriederer.github.io/projmgr/"><code>projmgr</code></a> package<sup>6</sup> which allows for specification of main steps as a project as in a <a href="https://emilyriederer.github.io/projmgr/articles/building-custom-plans.html">YAML file</a> which can then be bulk uploaded to GitHub issues and milestones.</p>
<p>Technically, this would mean writing a project plan, saving it in the <code>inst/</code> folder of your package, and perhaps writing a custom function to wrap <code>system.file()</code> to help users access the plan. Your function might look something like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">retrieve_{package name}_plan <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">proj_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)) {</span>
<span id="cb12-2">  </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.arg</span>(proj_type)</span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plan.yml"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{package name}"</span>)</span>
<span id="cb12-5">  </span>
<span id="cb12-6">}</span></code></pre></div>
</div>
<p>Alternatively, you could automate similar project plans yourself using the public APIs for Jira, Trello, GitLab, or whatever project management solution your organization uses.</p>
<p></p>
</section>
<section id="ide-support" class="level3">
<h3 class="anchored" data-anchor-id="ide-support">IDE Support</h3>
<p>We can also use <a href="https://rstudio.github.io/rstudioaddins/">RStudio Add-Ins</a> to extend RStudio interface and ship interactive widgets (imagine writing a “baby Shiny app”) in our internal packages. For example, the <a href="https://dreamrs.github.io/esquisse/"><code>esquisse</code> package</a> uses add-ins to ship a point-and-click plot coding assistant. Add-ins should be used judiciously because they require more investment upfront, but they are much easier to maintain than a full application and can help slowly convert more teammates to R users over time. Besides, a good project manager is willing to go the extra mile to support their team.</p>
<p>One other way to “go the extra mile” could also be to include an interactive <a href="https://rstudio.github.io/learnr/"><code>learnr</code> tutorial</a> as another way to help onboard new users. These tutorials are now also viewable through the RStudio IDE’s Tutorial pane.</p>
</section>
</section>
<section id="collaboration" class="level2">
<h2 class="anchored" data-anchor-id="collaboration">Collaboration</h2>
<p>Now, speaking of collaboration, we’ve talked about how packages can act like team <em>members</em> such as the IT Guy, Analyst, Tech Lead, or Project Manager. But being a good <em>teammate</em> is about more than doing individual jobs; organizational progress is made by working together. Another major opportunity when building a suite of internal tools is that we have the unique opportunity to think about how multiple packages on our team can interact most effectively.</p>
<p>We want teammates that are clear communicators, have defined responsibilities, and keep their promises. We can help our packages be good teammates with naming conventions, clearly defined scopes, and careful attention to dependencies and testing.</p>
<section id="clear-communication---naming-conventions" class="level3">
<h3 class="anchored" data-anchor-id="clear-communication---naming-conventions">Clear Communication - Naming Conventions</h3>
<p>Clear function naming conventions and consistent method signatures help packages effectively communicate with both package and human collaborators.</p>
<p>Internally, we can give our suite of internal packages a richer language by define a consistent set of prefix name stubs that indicate how each function is used. One approach is that each function prefix can denote the type of object being returned (like “viz” for a <code>ggplot</code> object).<sup>7</sup></p>
<p><img src="https://emilyriederer.com/post/team-of-packages/in-out.PNG" class="img-fluid"></p>
<p>This sort of convention can reduce the cognitive load when working with any packages; it’s not particularly unique to internal tools. However, while the <em>practice</em> is general, the benefits scale significantly for internal packages. Since we can drive this consistent standard across a collection of packages, past experience working with any one of our internal packages gives a user intuition when working with the next.</p>
</section>
<section id="defined-roles---curation" class="level3">
<h3 class="anchored" data-anchor-id="defined-roles---curation">Defined Roles - Curation</h3>
<p>Another aspect of good team communication is having clearly defined roles and responsibilities. Again, since we own our whole internal stack, we have more freedom in how we chose to divide functionality across packages.</p>
<p>Open source packages inevitably have overlapping functionality which forces users to compare alternatives and decide which is best. The need to <em>curate</em> all of the potentially useful tools creates a meta-job for analysts of researching and weighing alternatives, seeking their colleague’s advice, and piecing disparate pieces of a pipeline together.</p>
<p>But internally, we can use some amount of central planning to ensure each package teammate has a clearly defined role – whether that be to provide a horizontal utility or to enable progress on a specific workstream. And just like one team ought to work well with another, that central planning can include curation and promotion of open-source tools that “play nicely” with our internal ones. After all, no one team can go it alone!</p>
</section>
<section id="definded-roles---dependencies" class="level3">
<h3 class="anchored" data-anchor-id="definded-roles---dependencies">Definded Roles - Dependencies</h3>
<p>When assigning these roles and responsibilities to our team of packages, we should consider how to manage the dependencies between them when different functionality needs to be shared.</p>
<p>Packages often have direct dependencies where a function in one package calls a function in another. This is not necessarily bad, but especially with internal packages which might sometimes have a shorter shelf-life and few developers, this can create a domino effect. If one package is deprecated (or decides to retire or take a vacation), we don’t want the rest of our ecosystem affected.</p>
<p>Alternative, we can use the fact that both packages A and B are under our control and see if we can eliminate explicit dependencies by promoting a clean hand-off. We can see if a function in A can produce an output that B can consume instead of directly calling A’s function internally.</p>
<p>Additionally, because we own the full stack, we may also consider if there are shared needs in A and B that should be be extracted into a common “building block” package C. For instance, a set of common visualization function “primitives”. This was, we at least have a clear hierarchy of dependencies instead of a spiderweb and can identify a small number of truly essential ones.</p>
<p><img src="https://emilyriederer.com/post/team-of-packages/dep-structures.PNG" class="img-fluid"></p>
</section>
<section id="delivering-reliably---testing" class="level3">
<h3 class="anchored" data-anchor-id="delivering-reliably---testing">Delivering Reliably - Testing</h3>
<p>Regardless of the type of dependencies we end up with, we can use tests to make sure that our packages are reliable teammates who do what they promised.</p>
<p>Typically, if I write a package B that depends on package A, I can only control package B’s tests, so I could write tests to see if A continues to perform as B is expecting.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/team-of-packages/test-1.PNG" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:33.0%"></p>
</figure>
</div>
</div>
</div>
<p>This is a good safeguard, but it means that we will only detect problems after they have already been introduced in A. There’s nothing in place to actually stop package A from getting distracted in the first place.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://emilyriederer.com/post/team-of-packages/contract-meme.png" class="img-fluid figure-img" style="width:33.0%"></p>
</figure>
</div>
</div>
</div>
<p>Instead, we’d prefer that both A and B be conscientious of the promises that they have made and stay committed to working towards their shared goals.</p>
<p>We can formalize that shared vision with integration tests. That is, we can add tests to both the upstream and downstream packages to ensure that they continue to check in with each other and inquire if any changes that they are planning could be disruptive. Now, just imagine having such rigorous and ongoing communication and prioritization with your actual teammates!</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/team-of-packages/test-2.PNG" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%"></p>
</figure>
</div>
</div>
</div>
<p><span style="color: blue;"></span></p>
<p>This type of two-way testing can also be deployed to more robustly test <em>external</em> and <em>cross-platform</em> dependencies. For example, if your internal package requires connects to external resources like APIs or databases, you could even write tests that connect to external resources and verify that certain API endpoints, database schemas, or even columns still exist.</p>
<p>In open source packages, we generally employ “mocking” to avoid testing external dependencies since these fail when run by unauthenticated users or programs (such as CRAN checks.) However, once again, internally we can get differential value and safety by making different decisions.</p>
<p></p>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>In summary, we all know the the joy of working with a great team, and, if you’ve made it this far, I suspect you know the pleasure of cracking open a new R package. By taking advantage of unique opportunities when designing internal packages, we can truly achieve the best of both worlds. We can share the fun of working with good tools with the teammates we care about, and elevate those same tools to full-fledged teammates by giving them the skills to succeed.</p>
<p><img src="https://emilyriederer.com/post/team-of-packages/all-the-jobs.PNG" class="img-fluid"></p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p><span style="color: blue;"></span></p>
<p>Ready to get started? Check out my posts on:</p>
<ul>
<li><a href="../..\post/rmarkdown-driven-development">R Markdown Driven Development</a> to learn the <em>technical</em> side of converting existing analysis scripts into reusable tools and packages</li>
<li>my <a href="../..\project/rtistic">Rtistic project</a> for a template to make your organization’s first package (for themes and color palettes)</li>
<li>my <a href="https://emilyriederer.netlify.app/post/resource-roundup-r-industry/">round-up</a> of cool examples of R packages in industry.<sup>8</sup></li>
</ul>
<p>For general resources on building R packages, check out:</p>
<ul>
<li>the <a href="https://r-pkgs.org/">R Packages book</a></li>
<li>Malcolm Barrett and Rich Iannone’s <a href="https://github.com/rstudio-conf-2020/my-org-first-pkg">My Organization’s First Package training</a> from rstudio::conf 2020</li>
<li>Hadley Wickham’s <a href="https://github.com/rstudio-conf-2020/build-tidy-tools">Building Tidy Tools training</a> from rstudio::conf 2020</li>
</ul>
<p>For opinionated guides to package design, check out:</p>
<ul>
<li><a href="https://devguide.ropensci.org/">rOpenSci Packages: Development, Maintenance, and Peer Review</a></li>
<li><a href="https://masalmon.eu/2017/12/11/goodrpackages/">How to develop good R packages for open science</a> by Maëlle Salmon</li>
</ul>
<p></p>
</section>
<section id="too-long-didnt-read" class="level2">
<h2 class="anchored" data-anchor-id="too-long-didnt-read">Too Long Didn’t Read</h2>
<p>The following summarizes the key principles and practices discussed in this article.</p>
<p><strong>Abstraction &amp; Enforcement</strong>: In an organization, there are more things that we absolutely know to be true (e.g.&nbsp;the location of a server) or required (e.g.&nbsp;the right way to authenticate.) Thus, for internal tools, sometimes less flexible functions are useful; these don’t require users to input things that will not change or that they may not completely understand (e.g.&nbsp;encryption). So, internal packages could include functions that:</p>
<ul>
<li>Provide <strong>utilities</strong> such as database connections objects</li>
<li>Take an <strong>opinionated stance</strong> to be more efficient and enforce best practices (by what they chose <em>not</em> to parameterize)</li>
<li>Provide extremely helpful and <strong>prescriptive error messages</strong> not only explaining failure but explaining what organizational resources are needed to fix (e.g.&nbsp;perhaps someone needs to access a DBA for access to a schema). Bonus points for using the <a href="https://github.com/r-lib/cli"><code>cli</code> package</a> to make these errors easy to read</li>
<li>Continually learn from user challenges to <strong>silently handle more potential errors</strong> and corner cases internally</li>
</ul>
<p><strong>Informed &amp; Flexible</strong>: Because we know our organization’s problem domain, there are some things we probably know to be true 80% of the time. When designing functions, we can make our functions informed enough to save user’s time and typing by handling this 80% of cases more automatically but still providing complete flexibility to override with:</p>
<ul>
<li><strong>Default arguments</strong> which allow us to provide a likely value for a function argument that is used unless overridden by the user</li>
<li><strong>Reserved keywords</strong> that provide at the package or package-ecosystem level a small set of variable names that will be repeatedly used for these defaults</li>
<li><strong>Ellipsis</strong> to allow users to insert additional arguments and customize functions in ways we did not foresee</li>
<li><strong>Functional programming</strong> which, like the ellipsis, makes our functions seamless to extend</li>
</ul>
<p><strong>Providing Context &amp; Coaching</strong>: Internal packages can shared knowledge learned from past experience and nudge users towards better coding standards by include:</p>
<ul>
<li><strong>Vignettes</strong> that package the accumulated knowledge about solving a certain type of problem within the bounds of an organization</li>
<li><strong><a href="https://pkgdown.r-lib.org/"><code>pkgdown</code></a> sites</strong> to share all of the qualitative information contained in vignettes as part of institutional knowledge management</li>
<li><strong>R Markdown templates</strong> to encode an interactive workflow or provide an analysis template</li>
<li><strong>R Project templates</strong> to drive consistency in how a project using that package is structured</li>
</ul>
<p><strong>Improving accessibility and coordination</strong>: Internal packages can become more integral to how our organization works if they help all of our coworkers engage – even non-R users. Some strategies for this are:</p>
<ul>
<li><strong>Modularizing</strong> parts of the workflow that do and do not require programming. One way to do this is with R Markdown <strong>child documents</strong></li>
<li><strong>Defining project plans</strong> with <a href="https://emilyriederer.github.io/projmgr/index.html"><code>projmgr</code></a> (or other APIs) and automatically publishing them to one’s prefered project management platform</li>
<li>Promoting use of the <strong>RStudio Visual Markdown Editor</strong></li>
<li>Providing <strong>RStudio Add-ins</strong> to help new users get some amount of graphical support in performing simple tasks with out package</li>
</ul>
<p><strong>Collaboration</strong>: When we write multiple internal R package, we also have the unique ability to think about how our set of packages can interact well with each other. To fully capitalize on this, we can:</p>
<ul>
<li>Define a <strong>naming convention</strong> to use across all packages and help make “performance guarantees” so knowledge transfers between packages</li>
<li>Carefully rationalizing the functions in each package to <strong>avoid confusing redunancy</strong> and promote a <strong>curated set of (internal and open) tools</strong></li>
<li>Tackle refactoring <strong>across all our packages</strong> instead of one-by-one to attempt to unneeded, potentially brittle dependencies</li>
<li>Set up <strong>two-way unit tests</strong> (or “integration tests”) where we have dependencies to ensure that the intent of dependent packages doesn’t drift apart</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Many practitioners have built off of Christensen’s initial theory with sometimes passionately conflicting opinions on the nuances↩︎</p></li>
<li id="fn2"><p>Particularly users interested enough to read this post =)↩︎</p></li>
<li id="fn3"><p>The <code>usethis</code> package also has many great examples of “IT Guy”-like qualities. One that I don’t discuss in this post is explicitly <em>informing</em> users what it intends to do and then seeking permission↩︎</p></li>
<li id="fn4"><p>Note that any functions I show in the post are psuedo-code and simplified to illustrate my key points.↩︎</p></li>
<li id="fn5"><p>This is <em>not</em> a recommendation for the best way to store credentials! There are many other options such as keychains and password managers that your organization may prefer. I use a relatively simple example here that I could implement without adding any bulky code or additional packages to illustrate the point of opinionated design - not to give advice on security.↩︎</p></li>
<li id="fn6"><p>Disclaimer, this is a shameless promotion of my own package.↩︎</p></li>
<li id="fn7"><p>rOpenSci has a nice discussion on function naming in their package <a href="https://devguide.ropensci.org/building.html#package-api">style guide</a>↩︎</p></li>
<li id="fn8"><p>This round-up also illustrates some great examples of when you should <em>not</em> use an R package for your organization and when other types of end-products could be more beneficial.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>pkgdev</category>
  <category>jtbd</category>
  <guid>https://emilyriederer.com/post/team-of-packages/</guid>
  <pubDate>Thu, 21 Jan 2021 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/team-of-packages/featured.PNG" medium="image"/>
</item>
<item>
  <title>oRganization: Design patterns for internal packages</title>
  <link>https://emilyriederer.com/talk/organization/</link>
  <description><![CDATA[ 




<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> <a href="https://www.youtube.com/watch?v=E887K1au5ug">Video</a> </span><br>
<span><i class="bi bi-pencil"></i> <a href="../..\post/team-of-packages/">Post - A Team of Packages</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Many case studies demonstrate the benefits of organizations developing internal R packages. But how do you move your organization from individual internal packages to a coherent internal ecosystem?</p>
<p>In this talk, I analyze how internal packages differ from open-source, publicly available packages in their ideal level of abstraction and their understanding of specific user needs. By applying the jobs-to-be-done framework, I envision internal packages as teammates annd consider the many roles they can play, from unblocking IT challenges to democratizing tribal knowledge.</p>
<p>To help our team of packages succeed, we explore a wide variety of concrete design choices that developers of internal packages may make – spanning functions, documentation, testing, and more.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="slides" style="width:100%; aspect-ratio:16/11;">
<embed src="slides.pdf#zoom=Fit" width="100%" height="100%">
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/E887K1au5ug" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</div>



 ]]></description>
  <category>workflow</category>
  <category>pkgdev</category>
  <category>rstats</category>
  <guid>https://emilyriederer.com/talk/organization/</guid>
  <pubDate>Thu, 21 Jan 2021 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/organization/featured.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Generating SQL with {dbplyr} and sqlfluff</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/sql-generation/</link>
  <description><![CDATA[ 





<p><a href="https://en.wikipedia.org/wiki/Declarative_programming">Declarative programming languages</a> such as HTML, CSS, and SQL are popular because they allow users to focus more on the desired <em>outcome</em> than the exact computational steps required to achieve that outcome. This can increase efficiency and code readability since programmers describe what they <em>want</em> – whether that be how their website is laid out (without worrying about how the browser computes this layout) or how a dataset is structured (regardless of how the database goes about obtaining and aggregating this data).</p>
<p>However, sometimes this additional layer of abstraction can introduce problems of its own. Most notably, the lack of common <a href="https://en.wikipedia.org/wiki/Control_flow">control flow</a> can introduce a lot of redundancy. This is part of the motivation for <em>pre-processing</em> tools which use more imperative programming concepts such as local variables and for-loops to automatically generate declarative code. Common examples in the world of web development are <a href="https://sass-lang.com/">Sass</a> for CSS and <a href="https://haml.info/docs/yardoc/file.REFERENCE.html">Haml</a> for HTML. Of course, such tools naturally come at a cost of their own by requiring developers to learn yet another tool.<sup>1</sup></p>
<p>For R (or, specifically <code>tidyverse</code>) users who need to generate SQL code, recent advances in <a href="https://dplyr.tidyverse.org/"><code>dplyr v1.0.0</code></a> and <a href="https://dbplyr.tidyverse.org/"><code>dbplyr v2.0.0</code></a> pose an interesting alternative. By using efficient, readable, and most important <em>familiar</em> syntax, users can generate accurate SQL queries that could otherwise be error-prone to write. For example, computing sums and means for a large number of variables. Coupled with the power of <a href="https://www.sqlfluff.com/"><code>sqlfluff</code></a>, an innovative SQL styler which was announced at DBT’s recent <a href="https://www.getdbt.com/coalesce/agenda/presenting-sqlfluff">coalesce conference</a>, these queries can be made not only accurate but also imminently readable.</p>
<section id="the-basic-approach" class="level2">
<h2 class="anchored" data-anchor-id="the-basic-approach">The basic approach</h2>
<p>In the following example, I’ll briefly walk through the process of generating readable, well-styled SQL using <code>dbplyr</code> and <code>sqlfluff</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dbplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span></code></pre></div>
</div>
<p>First, we would connect to our database using the <code>DBI</code> package. For the sake of example, I simply connect to an “in-memory” database, but <a href="https://db.rstudio.com/">a wide range of database connectors</a> are available depending on where your data lives.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RSQLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span></code></pre></div>
</div>
<p>Again, <em>for the sake of this tutorial only</em>, I will write the <code>palmerpenguins::penguins</code> data to our database. Typically, data would already exist in the database of interest.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">copy_to</span>(con, palmerpenguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins"</span>)</span></code></pre></div>
</div>
<p>For reference, the data looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(palmerpenguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 x 8
  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
1 Adelie  Torgersen           39.1          18.7               181        3750
2 Adelie  Torgersen           39.5          17.4               186        3800
3 Adelie  Torgersen           40.3          18                 195        3250
4 Adelie  Torgersen           NA            NA                  NA          NA
5 Adelie  Torgersen           36.7          19.3               193        3450
6 Adelie  Torgersen           39.3          20.6               190        3650
# i 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<p>Now, we’re done with set-up. Suppose we want to write a SQL query to calculate the sum, mean, and variance for all of the measures in our dataset measured in milimeters (and ending in “mm”). We can accomplish this by using the <code>tbl()</code> function to connect to our database’s data and describing the results we want with <code>dplyr</code>’s elegant syntax. This is now made especially concise with select helpers (e.g.&nbsp;<code>ends_with()</code>) and the <code>across()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">penguins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tbl</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">penguins_aggr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb7-2">  penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(</span>
<span id="cb7-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>), sum, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TOT_{.col}"</span>),</span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>), var, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VAR_{.col}"</span>),</span>
<span id="cb7-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>), mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AVG_{.col}"</span>),</span>
<span id="cb7-9">  )</span>
<span id="cb7-10">penguins_aggr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># Source:   lazy query [?? x 11]
# Database: sqlite 3.33.0 [:memory:]
  species       N TOT_bill_length_mm TOT_bill_depth_mm TOT_flipper_length_mm
  &lt;chr&gt;     &lt;int&gt;              &lt;dbl&gt;             &lt;dbl&gt;                 &lt;int&gt;
1 Adelie      152              5858.             2770.                 28683
2 Chinstrap    68              3321.             1253.                 13316
3 Gentoo      124              5843.             1843.                 26714
# i 6 more variables: VAR_bill_length_mm &lt;dbl&gt;, VAR_bill_depth_mm &lt;dbl&gt;,
#   VAR_flipper_length_mm &lt;dbl&gt;, AVG_bill_length_mm &lt;dbl&gt;,
#   AVG_bill_depth_mm &lt;dbl&gt;, AVG_flipper_length_mm &lt;dbl&gt;</code></pre>
</div>
</div>
<p>However, since we are using a remote backend, the <code>penguins_aggr</code> object does not contain the resulting data that we see when it is printed (forcing its execution). Instead, it contains a reference to the database’s table and an accumulation of commands than need to be run on the table in the future. We can access this underlying SQL translation with the <code>dbplyr::show_query()</code> and use <code>capture.output()</code> to convert that query (otherwise printed to the R console) to a character vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">penguins_query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capture.output</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_query</span>(penguins_aggr))</span>
<span id="cb9-2">penguins_query</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "&lt;SQL&gt;"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
[2] "SELECT `species`, COUNT(*) AS `N`, SUM(`bill_length_mm`) AS `TOT_bill_length_mm`, SUM(`bill_depth_mm`) AS `TOT_bill_depth_mm`, SUM(`flipper_length_mm`) AS `TOT_flipper_length_mm`, VARIANCE(`bill_length_mm`) AS `VAR_bill_length_mm`, VARIANCE(`bill_depth_mm`) AS `VAR_bill_depth_mm`, VARIANCE(`flipper_length_mm`) AS `VAR_flipper_length_mm`, AVG(`bill_length_mm`) AS `AVG_bill_length_mm`, AVG(`bill_depth_mm`) AS `AVG_bill_depth_mm`, AVG(`flipper_length_mm`) AS `AVG_flipper_length_mm`"
[3] "FROM `penguins`"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
[4] "GROUP BY `species`"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 </code></pre>
</div>
</div>
<p>At this point, we already have a function SQL query and have saved ourselves the hassle of writing nine typo-free aggregation functions. However, since <code>dbplyr</code> was not written to generate “pretty” queries, this is not the most readable or well-formatted code. To clean it up, we can apply the <code>sqlfluff</code> linter and styler.</p>
<p>As a prerequisite, we slightly reformat the query to remove anything that isn’t native to common SQL and will confuse the linter, such as the first line of the query vector: <code>&lt;SQL&gt;</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">penguins_query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins_query[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(penguins_query)]</span>
<span id="cb11-2">penguins_query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, penguins_query)</span>
<span id="cb11-3">penguins_query</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "SELECT species, COUNT(*) AS N, SUM(bill_length_mm) AS TOT_bill_length_mm, SUM(bill_depth_mm) AS TOT_bill_depth_mm, SUM(flipper_length_mm) AS TOT_flipper_length_mm, VARIANCE(bill_length_mm) AS VAR_bill_length_mm, VARIANCE(bill_depth_mm) AS VAR_bill_depth_mm, VARIANCE(flipper_length_mm) AS VAR_flipper_length_mm, AVG(bill_length_mm) AS AVG_bill_length_mm, AVG(bill_depth_mm) AS AVG_bill_depth_mm, AVG(flipper_length_mm) AS AVG_flipper_length_mm"
[2] "FROM penguins"                                                                                                                                                                                                                                                                                                                                                                                                                                              
[3] "GROUP BY species"                                                                                                                                                                                                                                                                                                                                                                                                                                           </code></pre>
</div>
</div>
<p>After cleaning, we can write the results to a temp file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">tmp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(penguins_query, tmp)</span></code></pre></div>
</div>
<p>The current state of our file looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> species, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> N, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(bill_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> TOT_bill_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(bill_depth_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> TOT_bill_depth_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(flipper_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> TOT_flipper_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VARIANCE</span>(bill_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> VAR_bill_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VARIANCE</span>(bill_depth_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> VAR_bill_depth_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VARIANCE</span>(flipper_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> VAR_flipper_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(bill_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> AVG_bill_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(bill_depth_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> AVG_bill_depth_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(flipper_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> AVG_flipper_length_mm</span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> penguins</span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> species</span></code></pre></div>
</div>
<p>Finally, we are ready to use <code>sqlfluff</code>. The <code>lint</code> command highlights errors in our script, and the <code>fix</code> command automatically fixes them (with flags <code>--no-safety</code> and <code>-f</code> requesting that it apply all rules and does not ask for permission to overwrite the file, respectively). However, note that if your stylistic preferences differ from the defaults, <code>sqlfluff</code> is imminently <a href="https://docs.sqlfluff.com/en/stable/rules.html">customizable</a> via YAML.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sqlfluff lint"</span>, tmp), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intern =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in system(paste("sqlfluff lint", tmp), intern = TRUE): running command
'sqlfluff lint C:\Users\emily\AppData\Local\Temp\RtmpOyDJYM\file51f4757357ce'
had status 1</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>character(0)
attr(,"status")
[1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># intern = TRUE is only useful for the sake of showing linter results for this blog post</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it is not needed for interactive use</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sqlfluff fix --no-safety -f"</span>, tmp))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>The results of these commands are a well-formatted and readable query.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> species, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> N, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(bill_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> TOT_bill_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(bill_depth_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> TOT_bill_depth_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(flipper_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> TOT_flipper_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VARIANCE</span>(bill_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> VAR_bill_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VARIANCE</span>(bill_depth_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> VAR_bill_depth_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VARIANCE</span>(flipper_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> VAR_flipper_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(bill_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> AVG_bill_length_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(bill_depth_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> AVG_bill_depth_mm, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(flipper_length_mm) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> AVG_flipper_length_mm</span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> penguins</span>
<span id="cb21-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> species</span></code></pre></div>
</div>
</section>
<section id="a-slightly-more-realistic-example" class="level2">
<h2 class="anchored" data-anchor-id="a-slightly-more-realistic-example">A (slightly) more realistic example</h2>
<p>One situation in which this approach is useful is when engineering features that might include many subgroups or lags. Some flavors of SQL have <code>PIVOT</code> functions which help to aggregate and reshape data by group; however, this can vary by engine and even those that do (such as <a href="https://docs.snowflake.com/en/sql-reference/constructs/pivot.html">Snowflake</a>) require manually specifying the names of each field. Instead, our <code>dbplyr</code> and <code>sqlfluff</code> can help generate an accurate query to accomplsh this more concisely.</p>
<p>Now assume we want to find the mean for each measurement separately for years 2007 through 2009. Ultimately, we want these measures organized in a table with one row per species. We can concisely describe this goal with <code>dplyr</code> instead of writing out the definition of each of 9 variables (three metrics for three years) separately.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">penguins_pivot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb22-2">  penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>)), </span>
<span id="cb22-5">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">in09 =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>L, ., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)),</span>
<span id="cb22-6">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">in08 =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>L, ., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)),</span>
<span id="cb22-7">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">in07 =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>L, ., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb22-8">               ) </span>
<span id="cb22-9">penguins_pivot</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># Source:   lazy query [?? x 10]
# Database: sqlite 3.33.0 [:memory:]
  species   bill_length_mm_in09 bill_depth_mm_in09 flipper_length_mm_in09
  &lt;chr&gt;                   &lt;dbl&gt;              &lt;dbl&gt;                  &lt;dbl&gt;
1 Adelie                   13.3               6.19                   65.7
2 Chinstrap                17.3               6.47                   69.9
3 Gentoo                   17.0               5.34                   76.4
# i 6 more variables: bill_length_mm_in08 &lt;dbl&gt;, bill_depth_mm_in08 &lt;dbl&gt;,
#   flipper_length_mm_in08 &lt;dbl&gt;, bill_length_mm_in07 &lt;dbl&gt;,
#   bill_depth_mm_in07 &lt;dbl&gt;, flipper_length_mm_in07 &lt;dbl&gt;</code></pre>
</div>
</div>
<p>Following the same process as before, we can convert this to a SQL query.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capture.output</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_query</span>(penguins_pivot))</span>
<span id="cb24-2">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> query[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(query)]</span>
<span id="cb24-3">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, query)</span>
<span id="cb24-4">tmp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb24-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(query, tmp)</span>
<span id="cb24-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sqlfluff fix --no-safety -f"</span>, tmp))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>The following query shows the basic results. In this case, the <code>sqlfluff</code> default is significantly more aggressive with identations for the <code>CASE WHEN</code> statements than I personally prefer. If I were to use this in practice, I could refer back to the customizable <a href="https://docs.sqlfluff.com/en/stable/rules.html#"><code>sqlfluff</code> rules</a> and either change their configuration or restrict rules I perceived as unaesthetic or overzealous from running.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> species, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (bill_length_mm) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> bill_length_mm_in09, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (bill_depth_mm) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> bill_depth_mm_in09, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (flipper_length_mm) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> flipper_length_mm_in09, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (bill_length_mm) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> bill_length_mm_in08, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (bill_depth_mm) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> bill_depth_mm_in08, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (flipper_length_mm) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> flipper_length_mm_in08, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (bill_length_mm) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> bill_length_mm_in07, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (bill_depth_mm) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> bill_depth_mm_in07, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (flipper_length_mm) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHEN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">THEN</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> flipper_length_mm_in07</span>
<span id="cb26-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> penguins</span>
<span id="cb26-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> species</span></code></pre></div>
</div>
</section>
<section id="when-you-cant-connect-to-you-data" class="level2">
<h2 class="anchored" data-anchor-id="when-you-cant-connect-to-you-data">When you can’t connect to you data</h2>
<p>Even if, for some reason, you cannot connect to R with your specific dataset, you may still use this approach.</p>
<p>For example, suppose we cannot connect to the <code>penguins</code> dataset directly, but with the help of a data dictionary we can obtain a list of all of the fields in the dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">penguins_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(palmerpenguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins)</span></code></pre></div>
</div>
<p>In this case, we can simple mock a fake dataset using the column names, write it to an in-memory database, generate SQL, and style the output as before.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make fake dataset ----</span></span>
<span id="cb28-2">penguins_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(penguins_cols)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb28-3">penguins_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(penguins_mat), penguins_cols)</span>
<span id="cb28-4">penguins_dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex
1       1      1              1             1                 1           1   1
  year
1    1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy to database ----</span></span>
<span id="cb30-2">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RSQLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb30-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">copy_to</span>(con, penguins_dat, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins_mock"</span>)</span>
<span id="cb30-4">penguins_mock <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tbl</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins_mock"</span>)</span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate sql ----</span></span>
<span id="cb30-7">penguins_aggr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb30-8">  penguins_mock <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(</span>
<span id="cb30-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb30-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>), sum, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TOT_{.col}"</span>),</span>
<span id="cb30-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>), var, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VAR_{.col}"</span>),</span>
<span id="cb30-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>), mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AVG_{.col}"</span>),</span>
<span id="cb30-15">  )</span>
<span id="cb30-16"></span>
<span id="cb30-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_query</span>(penguins_aggr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;SQL&gt;
SELECT `species`, COUNT(*) AS `N`, SUM(`bill_length_mm`) AS `TOT_bill_length_mm`, SUM(`bill_depth_mm`) AS `TOT_bill_depth_mm`, SUM(`flipper_length_mm`) AS `TOT_flipper_length_mm`, VARIANCE(`bill_length_mm`) AS `VAR_bill_length_mm`, VARIANCE(`bill_depth_mm`) AS `VAR_bill_depth_mm`, VARIANCE(`flipper_length_mm`) AS `VAR_flipper_length_mm`, AVG(`bill_length_mm`) AS `AVG_bill_length_mm`, AVG(`bill_depth_mm`) AS `AVG_bill_depth_mm`, AVG(`flipper_length_mm`) AS `AVG_flipper_length_mm`
FROM `penguins_mock`
GROUP BY `species`</code></pre>
</div>
</div>
<p>The only caution with this approach is that one should not use <em>type-driven</em> select helpers such <code>summarize_if(is.numeric, ...)</code> because our mock data has some erroneous types (e.g.&nbsp;<code>species</code>, <code>island</code>, and <code>sex</code> are erroneously numeric). Thus, we could generate SQL that would throw errors when applied to actual data. For example, the following SQL code attempts to sum up islands. This is perfectly reasonably given our dummy dataset but would be illogical and problematic when applied in production.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">penguins_mock <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize_if</span>(is.numeric, sum) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_query</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;SQL&gt;
SELECT `species`, SUM(`island`) AS `island`, SUM(`bill_length_mm`) AS `bill_length_mm`, SUM(`bill_depth_mm`) AS `bill_depth_mm`, SUM(`flipper_length_mm`) AS `flipper_length_mm`, SUM(`body_mass_g`) AS `body_mass_g`, SUM(`sex`) AS `sex`, SUM(`year`) AS `year`
FROM `penguins_mock`
GROUP BY `species`</code></pre>
</div>
</div>
</section>
<section id="caveats" class="level2">
<h2 class="anchored" data-anchor-id="caveats">Caveats</h2>
<p>I have found this combination of tools to be useful for generating readable, typo-free queries when doing a large number of queries. However, I will end by highlighting when this may not be the best approach.</p>
<p><strong><code>dbplyr</code> is not intended to generate SQL.</strong> There’s always a risk when using tools for something other than their primary intent. <code>dbplyr</code> is no exception. Overall, it does an excellent job translating SQL and being aware of the unique flavor of various SQL backends. However, translating between languages is a challenging problem, and sometimes the SQL translation may not be the most computationally efficient (e.g.&nbsp;requiring more subqueries) or semantic approach. For multistep or multitable problems, you may wish to use this approach simple for generating a few painful SQL chunks instead of your whole script.</p>
<p><strong><code>dbplyr</code> <em>is</em> intended for you to <em>not</em> look at the SQL.</strong> One major benefit of <code>dbplyr</code> for R users is distinctly to <em>not</em> change languages and to benefit from a database’s compute power while staying in R. Not only is this use case not the intended purpose, you could go as far as to argue it is almost antithetical. Nevertheless, I do think there are many cases where one should preserve SQL independently; for example, you might need to do data tranformations in a production pipeline that does not run R, not wish to take on additional code dependencies, not be able to connect to your database with R, or be collaborating with non-R users.</p>
<p><strong><code>sqlfluff</code> is still experimental.</strong> As the developers emphasized in their DBT talk, <code>sqlfluff</code> is still in its early changes and subject to change. While I’m optimistic that this only means this tool will only keep getting better, it’s possible the exact rules, configuration, flags, syntax, etc. may change. Check out the docs for the latest documentation there.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>That being said, for SQL <a href="https://docs.getdbt.com/tutorial/using-jinja"><code>dbt</code> with Jinja templating support</a> is an intriguing option↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>data</category>
  <category>sql</category>
  <category>tutorial</category>
  <guid>https://emilyriederer.com/post/sql-generation/</guid>
  <pubDate>Sat, 16 Jan 2021 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/sql-generation/featured.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
